{
    "absolute_path_to_file_in_container": "/google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java",
    "errors": [
        {
            "line_number": 25,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[25,58] package com.google.api.services.cloudresourcemanager.model does not exist",
            "additional_info": "",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "8fc4f515-958c-5fde-8ce7-f5fc0089beac"
        },
        {
            "line_number": 26,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[26,58] package com.google.api.services.cloudresourcemanager.model does not exist",
            "additional_info": "",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "8fc4f515-958c-5fde-8ce7-f5fc0089beac"
        },
        {
            "line_number": 27,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[27,58] package com.google.api.services.cloudresourcemanager.model does not exist",
            "additional_info": "",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "8fc4f515-958c-5fde-8ce7-f5fc0089beac"
        },
        {
            "line_number": 28,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[28,58] package com.google.api.services.cloudresourcemanager.model does not exist",
            "additional_info": "",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "8fc4f515-958c-5fde-8ce7-f5fc0089beac"
        },
        {
            "line_number": 29,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[29,58] package com.google.api.services.cloudresourcemanager.model does not exist",
            "additional_info": "",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "8fc4f515-958c-5fde-8ce7-f5fc0089beac"
        },
        {
            "line_number": 30,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[30,58] package com.google.api.services.cloudresourcemanager.model does not exist",
            "additional_info": "",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "8fc4f515-958c-5fde-8ce7-f5fc0089beac"
        },
        {
            "line_number": 31,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[31,58] package com.google.api.services.cloudresourcemanager.model does not exist",
            "additional_info": "",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "8fc4f515-958c-5fde-8ce7-f5fc0089beac"
        },
        {
            "line_number": 126,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[126,47] cannot find symbol",
            "additional_info": "  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "206ac14c-bd9f-5073-8c9e-aef0d3915ce3"
        },
        {
            "line_number": 127,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[127,29] cannot find symbol",
            "additional_info": "  symbol:   class Policy\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "9b57dfd9-ac67-532f-819b-af13f194b4c2"
        },
        {
            "line_number": 388,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[388,47] cannot find symbol",
            "additional_info": "  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "206ac14c-bd9f-5073-8c9e-aef0d3915ce3"
        },
        {
            "line_number": 444,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[444,32] cannot find symbol",
            "additional_info": "  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "206ac14c-bd9f-5073-8c9e-aef0d3915ce3"
        },
        {
            "line_number": 569,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[569,41] cannot find symbol",
            "additional_info": "  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "206ac14c-bd9f-5073-8c9e-aef0d3915ce3"
        },
        {
            "line_number": 604,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[604,40] cannot find symbol",
            "additional_info": "  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "206ac14c-bd9f-5073-8c9e-aef0d3915ce3"
        },
        {
            "line_number": 637,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[637,51] cannot find symbol",
            "additional_info": "  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "206ac14c-bd9f-5073-8c9e-aef0d3915ce3"
        },
        {
            "line_number": 696,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[696,57] cannot find symbol",
            "additional_info": "  symbol:   class Policy\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper",
            "file_name": "LocalResourceManagerHelper.java",
            "uid": "9b57dfd9-ac67-532f-819b-af13f194b4c2"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: google-api-services-cloudresourcemanager v1-rev20220807-2.0.0->v3-rev20220807-2.0.0\n\nthe following client code fails: \n'''java\npackage com.google.cloud.resourcemanager.testing;\nimport com.sun.net.httpserver.Headers;\nimport com.sun.net.httpserver.HttpExchange;\nimport com.sun.net.httpserver.HttpHandler;\nimport com.sun.net.httpserver.HttpServer;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.zip.GZIPInputStream;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\nimport com.google.cloud.NoCredentials;\nimport com.google.cloud.resourcemanager.ResourceManagerOptions;\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Objects;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.io.ByteStreams;\nimport org.threeten.bp.Instant;\nimport org.threeten.bp.ZoneOffset;\nimport org.threeten.bp.format.DateTimeFormatter;\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static java.net.HttpURLConnection.HTTP_OK;\n@Deprecated\n@SuppressWarnings(\"restriction\")\npublic class LocalResourceManagerHelper {\n    private static final Logger log = Logger.getLogger(LocalResourceManagerHelper.class.getName());\n\n    private static final JsonFactory jsonFactory = GsonFactory.getDefaultInstance();\n\n    private static final Random PROJECT_NUMBER_GENERATOR = new Random();\n\n    private static final String VERSION = \"v1\";\n\n    private static final String CONTEXT = (\"/\" + VERSION) + \"/projects\";\n\n    private static final String OPERATION_CONTEXT = (\"/\" + VERSION) + \"/operations\";\n\n    private static final URI BASE_CONTEXT;\n\n    private static final Set<String> SUPPORTED_COMPRESSION_ENCODINGS = ImmutableSet.of(\"gzip\", \"x-gzip\");\n\n    private static final Pattern LIST_FIELDS_PATTERN = Pattern.compile(\"(.*?)projects\\\\((.*?)\\\\)(.*?)\");\n\n    private static final String[] NO_FIELDS = new String[]{  };\n\n    static {\n        try {\n            BASE_CONTEXT = new URI(CONTEXT);\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(\"Could not initialize LocalResourceManagerHelper due to URISyntaxException.\", e);\n        }\n    }\n\n    private static final Set<Character> PERMISSIBLE_PROJECT_NAME_PUNCTUATION = ImmutableSet.of('-', '\\'', '\"', ' ', '!');\n\n    private final HttpServer server;\n\n    private final ConcurrentSkipListMap<String, Project> projects = new ConcurrentSkipListMap<>();\n\n    private final Map<String, Policy> policies = new HashMap<>();\n\n    private final int port;\n\n    private static class Response {\n        private final int code;\n\n        private final String body;\n\n        Response(int code, String body) {\n            this.code = code;\n            this.body = body;\n        }\n\n        int code() {\n            return code;\n        }\n\n        String body() {\n            return body;\n        }\n    }\n\n    private enum Error {\n\n        ABORTED(409, \"global\", \"aborted\", \"ABORTED\"),\n        ALREADY_EXISTS(409, \"global\", \"alreadyExists\", \"ALREADY_EXISTS\"),\n        PERMISSION_DENIED(403, \"global\", \"forbidden\", \"PERMISSION_DENIED\"),\n        FAILED_PRECONDITION(400, \"global\", \"failedPrecondition\", \"FAILED_PRECONDITION\"),\n        INVALID_ARGUMENT(400, \"global\", \"badRequest\", \"INVALID_ARGUMENT\"),\n        BAD_REQUEST(400, \"global\", \"badRequest\", \"BAD_REQUEST\"),\n        INTERNAL_ERROR(500, \"global\", \"internalError\", \"INTERNAL_ERROR\");\n        private final int code;\n\n        private final String domain;\n\n        private final String reason;\n\n        private final String status;\n\n        Error(int code, String domain, String reason, String status) {\n            this.code = code;\n            this.domain = domain;\n            this.reason = reason;\n            this.status = status;\n        }\n\n        Response response(String message) {\n            try {\n                return new Response(code, toJson(message));\n            } catch (IOException e) {\n                return Error.INTERNAL_ERROR.response(\"Error when generating JSON error response\");\n            }\n        }\n\n        private String toJson(String message) throws IOException {\n            Map<String, Object> errors = new HashMap<>();\n            errors.put(\"domain\", domain);\n            errors.put(\"message\", message);\n            errors.put(\"reason\", reason);\n            Map<String, Object> args = new HashMap<>();\n            args.put(\"errors\", ImmutableList.of(errors));\n            args.put(\"code\", code);\n            args.put(\"message\", message);\n            args.put(\"status\", status);\n            return jsonFactory.toString(ImmutableMap.of(\"error\", args));\n        }\n    }\n\n    private class RequestHandler implements HttpHandler {\n        @Override\n        public void handle(HttpExchange exchange) {\n            Response response;\n            String path = BASE_CONTEXT.relativize(exchange.getRequestURI()).getPath();\n            String requestMethod = exchange.getRequestMethod();\n            try {\n                switch (requestMethod) {\n                    case \"POST\" :\n                        response = handlePost(exchange, path);\n                        break;\n                    case \"DELETE\" :\n                        response = delete(projectIdFromUri(path));\n                        break;\n                    case \"GET\" :\n                        if (!path.isEmpty()) {\n                            response = get(projectIdFromUri(path), parseFields(exchange.getRequestURI().getQuery()));\n                        } else {\n                            response = list(parseListOptions(exchange.getRequestURI().getQuery()));\n                        }\n                        break;\n                    case \"PUT\" :\n                        String requestBody = decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n                        response = replace(projectIdFromUri(path), jsonFactory.fromString(requestBody, Project.class));\n                        break;\n                    default :\n                        response = Error.BAD_REQUEST.response(((\"The server could not understand the following request URI: \" + requestMethod) + \" \") + path);\n                }\n            } catch (IOException e) {\n                response = Error.BAD_REQUEST.response(e.getMessage());\n            }\n            writeResponse(exchange, response);\n        }\n    }\n\n    private Response handlePost(HttpExchange exchange, String path) throws IOException {\n        String requestBody = decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n        if (!path.contains(\":\")) {\n            return create(jsonFactory.fromString(requestBody, Project.class));\n        } else {\n            switch (path.split(\":\", 2)[1]) {\n                case \"undelete\" :\n                    return undelete(projectIdFromUri(path));\n                case \"getIamPolicy\" :\n                    return getPolicy(projectIdFromUri(path));\n                case \"setIamPolicy\" :\n                    return replacePolicy(projectIdFromUri(path), jsonFactory.fromString(requestBody, SetIamPolicyRequest.class).getPolicy());\n                case \"testIamPermissions\" :\n                    return testPermissions(projectIdFromUri(path), jsonFactory.fromString(requestBody, TestIamPermissionsRequest.class).getPermissions());\n                default :\n                    return Error.BAD_REQUEST.response(\"The server could not understand the following request URI: POST \" + path);\n            }\n        }\n    }\n\n    private class OperationRequestHandler implements HttpHandler {\n        @Override\n        public void handle(HttpExchange exchange) {\n            String projectId;\n            try {\n                projectId = new URI(OPERATION_CONTEXT).relativize(exchange.getRequestURI()).getPath();\n            } catch (URISyntaxException e) {\n                throw new IllegalStateException(e);\n            }\n            Response response;\n            String requestMethod = exchange.getRequestMethod();\n            switch (requestMethod) {\n                case \"GET\" :\n                    Project project = projects.get(projectId);\n                    if (project == null) {\n                        response = Error.PERMISSION_DENIED.response((\"Project \" + projectId) + \" not found.\");\n                        break;\n                    }\n                    try {\n                        response = new Response(HTTP_OK, jsonFactory.toString(new Operation().setDone(true).setResponse(project)));\n                    } catch (IOException e) {\n                        response = Error.INTERNAL_ERROR.response(\"Error when serializing project \" + project.getProjectId());\n                    }\n                    break;\n                default :\n                    response = Error.BAD_REQUEST.response(((\"The server could not understand the following request URI: \" + requestMethod) + \" \") + projectId);\n            }\n            writeResponse(exchange, response);\n        }\n    }\n\n    private static void writeResponse(HttpExchange exchange, Response response) {\n        exchange.getResponseHeaders().set(\"Content-type\", \"application/json; charset=UTF-8\");\n        OutputStream outputStream = exchange.getResponseBody();\n        try {\n            exchange.getResponseHeaders().add(\"Connection\", \"close\");\n            exchange.sendResponseHeaders(response.code(), response.body().length());\n            outputStream.write(response.body().getBytes(StandardCharsets.UTF_8));\n            outputStream.close();\n        } catch (IOException e) {\n            log.log(Level.WARNING, \"IOException encountered when sending response.\", e);\n        }\n    }\n\n    private static String decodeContent(Headers headers, InputStream inputStream) throws IOException {\n        List<String> contentEncoding = headers.get(\"Content-encoding\");\n        InputStream input = inputStream;\n        try {\n            if ((contentEncoding != null) && (!contentEncoding.isEmpty())) {\n                String encoding = contentEncoding.get(0);\n                if (SUPPORTED_COMPRESSION_ENCODINGS.contains(encoding)) {\n                    input = new GZIPInputStream(inputStream);\n                } else if (!encoding.equals(\"identity\")) {\n                    throw new IOException(\"The request has the following unsupported HTTP content encoding: \" + encoding);\n                }\n            }\n            return new String(ByteStreams.toByteArray(input), StandardCharsets.UTF_8);\n        } catch (IOException e) {\n            throw new IOException(\"Exception encountered when decoding request content.\", e);\n        }\n    }\n\n    private static String projectIdFromUri(String path) throws IOException {\n        if (path.isEmpty()) {\n            throw new IOException((\"The URI path '\" + path) + \"' doesn't have a project ID.\");\n        }\n        return path.split(\":\")[0];\n    }\n\n    private static String[] parseFields(String query) {\n        if ((query != null) && (!query.isEmpty())) {\n            String[] querySplit = query.split(\"=\");\n            return querySplit.length > 1 ? querySplit[1].split(\",\") : null;\n        }\n        return null;\n    }\n\n    private static Map<String, Object> parseListOptions(String query) throws IOException {\n        Map<String, Object> options = new HashMap<>();\n        if (query != null) {\n            String[] args = query.split(\"&\");\n            for (String arg : args) {\n                String[] argEntry = arg.split(\"=\");\n                switch (argEntry[0]) {\n                    case \"fields\" :\n                        Matcher matcher = LIST_FIELDS_PATTERN.matcher(argEntry[1]);\n                        if (matcher.matches()) {\n                            options.put(\"projectFields\", matcher.group(2).split(\",\"));\n                            options.put(\"listFields\", (matcher.group(1) + matcher.group(3)).split(\",\"));\n                        } else {\n                            options.put(\"projectFields\", NO_FIELDS);\n                            options.put(\"listFields\", argEntry[1].split(\",\"));\n                        }\n                        break;\n                    case \"filter\" :\n                        options.put(\"filter\", argEntry[1].split(\" \"));\n                        break;\n                    case \"pageToken\" :\n                        options.put(\"pageToken\", argEntry[1]);\n                        break;\n                    case \"pageSize\" :\n                        int pageSize = Integer.parseInt(argEntry[1]);\n                        if (pageSize < 1) {\n                            throw new IOException(\"Page size must be greater than 0.\");\n                        }\n                        options.put(\"pageSize\", pageSize);\n                        break;\n                }\n            }\n        }\n        return options;\n    }\n\n    private static String checkForProjectErrors(Project project) {\n        if (project.getProjectId() == null) {\n            return \"Project ID cannot be empty.\";\n        }\n        if (!isValidIdOrLabel(project.getProjectId(), 6, 30)) {\n            return (((((\"Project \" + project.getProjectId()) + \" has an invalid ID.\") + \" See https://cloud.google.com/resource-manager/reference/rest/\") + VERSION) + \"/projects\") + \" for more information.\";\n        }\n        if (project.getName() != null) {\n            for (char c : project.getName().toCharArray()) {\n                if ((!PERMISSIBLE_PROJECT_NAME_PUNCTUATION.contains(c)) && (!Character.isLetterOrDigit(c))) {\n                    return ((((\"Project \" + project.getProjectId()) + \" has an invalid name.\") + \" See https://cloud.google.com/resource-manager/reference/rest/\") + VERSION) + \"/projects for more information.\";\n                }\n            }\n        }\n        if (project.getLabels() != null) {\n            if (project.getLabels().size() > 256) {\n                return (\"Project \" + project.getProjectId()) + \" exceeds the limit of 256 labels.\";\n            }\n            for (Map.Entry<String, String> entry : project.getLabels().entrySet()) {\n                if ((!isValidIdOrLabel(entry.getKey(), 1, 63)) || (!isValidIdOrLabel(entry.getValue(), 0, 63))) {\n                    return ((((\"Project \" + project.getProjectId()) + \" has an invalid label entry.\") + \" See https://cloud.google.com/resource-manager/reference/rest/\") + VERSION) + \"/projects for more information.\";\n                }\n            }\n        }\n        return null;\n    }\n\n    private static boolean isValidIdOrLabel(String value, int minLength, int maxLength) {\n        for (char c : value.toCharArray()) {\n            if (((c != '-') && (!Character.isDigit(c))) && (!Character.isLowerCase(c))) {\n                return false;\n            }\n        }\n        if ((!value.isEmpty()) && ((!Character.isLetter(value.charAt(0))) || value.endsWith(\"-\"))) {\n            return false;\n        }\n        return (value.length() >= minLength) && (value.length() <= maxLength);\n    }\n\n    synchronized Response create(Project project) {\n        String customErrorMessage = checkForProjectErrors(project);\n        if (customErrorMessage != null) {\n            return Error.INVALID_ARGUMENT.response(customErrorMessage);\n        } else {\n            project.setLifecycleState(\"ACTIVE\");\n            project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));\n            project.setCreateTime(DateTimeFormatter.ISO_DATE_TIME.withZone(ZoneOffset.UTC).format(Instant.ofEpochMilli(System.currentTimeMillis())));\n            if (projects.putIfAbsent(project.getProjectId(), project) != null) {\n                return Error.ALREADY_EXISTS.response((\"A project with the same project ID (\" + project.getProjectId()) + \") already exists.\");\n            }\n            Policy emptyPolicy = new Policy().setBindings(Collections.<Binding>emptyList()).setEtag(UUID.randomUUID().toString()).setVersion(0);\n            policies.put(project.getProjectId(), emptyPolicy);\n            try {\n                String createdProjectStr = jsonFactory.toString(new Operation().setDone(false).setName(\"operations/\" + project.getProjectId()));\n                return new Response(HTTP_OK, createdProjectStr);\n            } catch (IOException e) {\n                return Error.INTERNAL_ERROR.response(\"Error serializing project \" + project.getProjectId());\n            }\n        }\n    }\n\n    synchronized Response delete(String projectId) {\n        Project project = projects.get(projectId);\n        if (project == null) {\n            return Error.PERMISSION_DENIED.response((\"Error when deleting \" + projectId) + \" because the project was not found.\");\n        }\n        if (!project.getLifecycleState().equals(\"ACTIVE\")) {\n            return Error.FAILED_PRECONDITION.response((\"Error when deleting \" + projectId) + \" because the lifecycle state was not ACTIVE.\");\n        } else {\n            project.setLifecycleState(\"DELETE_REQUESTED\");\n            return new Response(HTTP_OK, \"{}\");\n        }\n    }\n\n    Response get(String projectId, String[] fields) {\n        Project project = projects.get(projectId);\n        if (project != null) {\n            try {\n                return new Response(HTTP_OK, jsonFactory.toString(extractFields(project, fields)));\n            } catch (IOException e) {\n                return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + project.getProjectId());\n            }\n        } else {\n            return Error.PERMISSION_DENIED.response((\"Project \" + projectId) + \" not found.\");\n        }\n    }\n\n    Response list(Map<String, Object> options) {\n        List<String> projectsSerialized = new ArrayList<>();\n        String[] filters = ((String[]) (options.get(\"filter\")));\n        if ((filters != null) && (!isValidFilter(filters))) {\n            return Error.INVALID_ARGUMENT.response(\"Could not parse the filter.\");\n        }\n        String[] projectFields = ((String[]) (options.get(\"projectFields\")));\n        int count = 0;\n        String pageToken = ((String) (options.get(\"pageToken\")));\n        Integer pageSize = ((Integer) (options.get(\"pageSize\")));\n        String nextPageToken = null;\n        Map<String, Project> projectsToScan = projects;\n        if (pageToken != null) {\n            projectsToScan = projects.tailMap(pageToken);\n        }\n        for (Project p : projectsToScan.values()) {\n            if ((pageSize != null) && (count >= pageSize)) {\n                nextPageToken = p.getProjectId();\n                break;\n            }\n            boolean includeProject = includeProject(p, filters);\n            if (includeProject) {\n                count++;\n                try {\n                    projectsSerialized.add(jsonFactory.toString(extractFields(p, projectFields)));\n                } catch (IOException e) {\n                    return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + p.getProjectId());\n                }\n            }\n        }\n        String[] listFields = ((String[]) (options.get(\"listFields\")));\n        StringBuilder responseBody = new StringBuilder();\n        responseBody.append('{');\n        if (!((projectFields != null) && (projectFields.length == 0))) {\n            responseBody.append(\"\\\"projects\\\": [\");\n            Joiner.on(\",\").appendTo(responseBody, projectsSerialized);\n            responseBody.append(']');\n        }\n        if ((nextPageToken != null) && ((listFields == null) || ImmutableSet.copyOf(listFields).contains(\"nextPageToken\"))) {\n            if (responseBody.length() > 1) {\n                responseBody.append(',');\n            }\n            responseBody.append(\"\\\"nextPageToken\\\": \\\"\");\n            responseBody.append(nextPageToken);\n            responseBody.append('\"');\n        }\n        responseBody.append('}');\n        return new Response(HTTP_OK, responseBody.toString());\n    }\n\n    private static boolean isValidFilter(String[] filters) {\n        for (String filter : filters) {\n            String field = filter.toLowerCase().split(\":\")[0];\n            if (!((\"id\".equals(field) || \"name\".equals(field)) || field.startsWith(\"labels.\"))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean includeProject(Project project, String[] filters) {\n        if (filters == null) {\n            return true;\n        }\n        for (String filter : filters) {\n            String[] filterEntry = filter.toLowerCase().split(\":\");\n            String filterType = filterEntry[0];\n            if (\"id\".equals(filterType)) {\n                if (!satisfiesFilter(project.getProjectId(), filterEntry[1])) {\n                    return false;\n                }\n            } else if (\"name\".equals(filterType)) {\n                if (!satisfiesFilter(project.getName(), filterEntry[1])) {\n                    return false;\n                }\n            } else if (filterType.startsWith(\"labels.\")) {\n                String labelKey = filterType.substring(\"labels.\".length());\n                if (project.getLabels() != null) {\n                    String labelValue = project.getLabels().get(labelKey);\n                    if (!satisfiesFilter(labelValue, filterEntry[1])) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    private static boolean satisfiesFilter(String projectValue, String filterValue) {\n        if (projectValue == null) {\n            return false;\n        }\n        return \"*\".equals(filterValue) || filterValue.equals(projectValue.toLowerCase());\n    }\n\n    private static Project extractFields(Project fullProject, String[] fields) {\n        if (fields == null) {\n            return fullProject;\n        }\n        Project project = new Project();\n        for (String field : fields) {\n            switch (field) {\n                case \"createTime\" :\n                    project.setCreateTime(fullProject.getCreateTime());\n                    break;\n                case \"labels\" :\n                    project.setLabels(fullProject.getLabels());\n                    break;\n                case \"lifecycleState\" :\n                    project.setLifecycleState(fullProject.getLifecycleState());\n                    break;\n                case \"name\" :\n                    project.setName(fullProject.getName());\n                    break;\n                case \"parent\" :\n                    project.setParent(fullProject.getParent());\n                    break;\n                case \"projectId\" :\n                    project.setProjectId(fullProject.getProjectId());\n                    break;\n                case \"projectNumber\" :\n                    project.setProjectNumber(fullProject.getProjectNumber());\n                    break;\n            }\n        }\n        return project;\n    }\n\n    synchronized Response replace(String projectId, Project project) {\n        Project originalProject = projects.get(projectId);\n        if (originalProject == null) {\n            return Error.PERMISSION_DENIED.response((\"Error when replacing \" + projectId) + \" because the project was not found.\");\n        } else if (!originalProject.getLifecycleState().equals(\"ACTIVE\")) {\n            return Error.FAILED_PRECONDITION.response((\"Error when replacing \" + projectId) + \" because the lifecycle state was not ACTIVE.\");\n        } else if (!Objects.equal(originalProject.getParent(), project.getParent())) {\n            return Error.INVALID_ARGUMENT.response(\"The server currently only supports setting the parent once \" + \"and does not allow unsetting it.\");\n        }\n        project.setProjectId(projectId);\n        project.setLifecycleState(originalProject.getLifecycleState());\n        project.setCreateTime(originalProject.getCreateTime());\n        project.setProjectNumber(originalProject.getProjectNumber());\n        projects.replace(projectId, project);\n        try {\n            return new Response(HTTP_OK, jsonFactory.toString(project));\n        } catch (IOException e) {\n            return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + projectId);\n        }\n    }\n\n    synchronized Response undelete(String projectId) {\n        Project project = projects.get(projectId);\n        Response response;\n        if (project == null) {\n            response = Error.PERMISSION_DENIED.response((\"Error when undeleting \" + projectId) + \" because the project was not found.\");\n        } else if (!project.getLifecycleState().equals(\"DELETE_REQUESTED\")) {\n            response = Error.FAILED_PRECONDITION.response((\"Error when undeleting \" + projectId) + \" because the lifecycle state was not DELETE_REQUESTED.\");\n        } else {\n            project.setLifecycleState(\"ACTIVE\");\n            response = new Response(HTTP_OK, \"{}\");\n        }\n        return response;\n    }\n\n    synchronized Response getPolicy(String projectId) {\n        Policy policy = policies.get(projectId);\n        if (policy == null) {\n            return Error.PERMISSION_DENIED.response((\"Project \" + projectId) + \" not found.\");\n        }\n        try {\n            return new Response(HTTP_OK, jsonFactory.toString(policy));\n        } catch (IOException e) {\n            return Error.INTERNAL_ERROR.response(\"Error when serializing the IAM policy for \" + projectId);\n        }\n    }\n\n    synchronized Response replacePolicy(String projectId, Policy policy) {\n        Policy originalPolicy = policies.get(projectId);\n        if (originalPolicy == null) {\n            return Error.PERMISSION_DENIED.response((\"Error when replacing the policy for \" + projectId) + \" because the project was not found.\");\n        }\n        String etag = policy.getEtag();\n        if ((etag != null) && (!originalPolicy.getEtag().equals(etag))) {\n            return Error.ABORTED.response((\"Policy etag mismatch when replacing the policy for project \" + projectId) + \", please retry the read.\");\n        }\n        policy.setEtag(UUID.randomUUID().toString());\n        policy.setVersion(originalPolicy.getVersion());\n        policies.put(projectId, policy);\n        try {\n            return new Response(HTTP_OK, jsonFactory.toString(policy));\n        } catch (IOException e) {\n            return Error.INTERNAL_ERROR.response(\"Error when serializing the policy for project \" + projectId);\n        }\n    }\n\n    synchronized Response testPermissions(String projectId, List<String> permissions) {\n        if (!projects.containsKey(projectId)) {\n            return Error.PERMISSION_DENIED.response((\"Project \" + projectId) + \" not found.\");\n        }\n        try {\n            return new Response(HTTP_OK, jsonFactory.toString(new TestIamPermissionsResponse().setPermissions(permissions)));\n        } catch (IOException e) {\n            return Error.INTERNAL_ERROR.response(\"Error when serializing permissions \" + permissions);\n        }\n    }\n\n    private LocalResourceManagerHelper() {\n        try {\n            server = HttpServer.create(new InetSocketAddress(0), 0);\n            port = server.getAddress().getPort();\n            server.createContext(CONTEXT, new RequestHandler());\n            server.createContext(OPERATION_CONTEXT, new OperationRequestHandler());\n        } catch (IOException e) {\n            throw new RuntimeException(\"Could not bind the mock Resource Manager server.\", e);\n        }\n    }\n\n    public static LocalResourceManagerHelper create() {\n        return new LocalResourceManagerHelper();\n    }\n\n    public ResourceManagerOptions getOptions() {\n        return ResourceManagerOptions.newBuilder().setHost(\"http://localhost:\" + port).setCredentials(NoCredentials.getInstance()).build();\n    }\n\n    public void start() {\n        server.start();\n    }\n\n    public void stop() {\n        server.stop(1);\n    }\n\n    public synchronized boolean changeLifecycleState(String projectId, String lifecycleState) {\n        checkArgument((\"ACTIVE\".equals(lifecycleState) || \"DELETE_REQUESTED\".equals(lifecycleState)) || \"DELETE_IN_PROGRESS\".equals(lifecycleState), \"Lifecycle state must be ACTIVE, DELETE_REQUESTED, or DELETE_IN_PROGRESS\");\n        Project project = projects.get(checkNotNull(projectId));\n        if (project != null) {\n            project.setLifecycleState(lifecycleState);\n            return true;\n        }\n        return false;\n    }\n\n    public synchronized boolean removeProject(String projectId) {\n        policies.remove(checkNotNull(projectId));\n        return projects.remove(projectId) != null;\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\n  private final ConcurrentSkipListMap<String, Project> projects = new ConcurrentSkipListMap<>();\n  private final Map<String, Policy> policies = new HashMap<>();\n  private static String checkForProjectErrors(Project project) {\n  synchronized Response create(Project project) {\n  private static boolean includeProject(Project project, String[] filters) {\n  private static Project extractFields(Project fullProject, String[] fields) {\n  synchronized Response replace(String projectId, Project project) {\n  synchronized Response replacePolicy(String projectId, Policy policy) {\nwith the following error message:\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[25,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[26,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[27,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[28,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[29,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[30,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[31,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[126,47] cannot find symbol  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[127,29] cannot find symbol  symbol:   class Policy\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[388,47] cannot find symbol  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[444,32] cannot find symbol  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[569,41] cannot find symbol  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[604,40] cannot find symbol  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[637,51] cannot find symbol  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[696,57] cannot find symbol  symbol:   class Policy\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\ncom.google.api.services.cloudresourcemanager.model.ListPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Update | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ClearOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.UndeleteProjectRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$ListOrgPolicies | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$GetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.BooleanConstraint | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManagerScopes | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.RestoreDefault | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListOrgPoliciesRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$GetEffectiveOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Create | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$ListAvailableOrgPolicyConstraints | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Project | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$Create | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$Search | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListProjectsResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Operations$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Delete | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$GetEffectiveOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListOrgPoliciesResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$SetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$List | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ResourceId | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListConstraint | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$ClearOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$SetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Operations | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$TestIamPermissions | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$SetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$SetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$SetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManagerRequestInitializer | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.SetOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Builder | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$ClearOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.BooleanPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Binding | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.OrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$TestIamPermissions | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.GetOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Status | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Constraint | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$ListOrgPolicies | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManagerRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetEffectiveOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$ListAvailableOrgPolicyConstraints | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetAncestry | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$GetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ProjectCreationStatus | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$ListOrgPolicies | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Operation | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.GetEffectiveOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$Delete | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Policy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$ClearOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Undelete | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$ListAvailableOrgPolicyConstraints | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$GetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$List | DELETION | TYPE_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\n  private final ConcurrentSkipListMap<String, Project> projects = new ConcurrentSkipListMap<>();\n  private final Map<String, Policy> policies = new HashMap<>();\n  private static String checkForProjectErrors(Project project) {\n  synchronized Response create(Project project) {\n  private static boolean includeProject(Project project, String[] filters) {\n  private static Project extractFields(Project fullProject, String[] fields) {\n  synchronized Response replace(String projectId, Project project) {\n  synchronized Response replacePolicy(String projectId, Policy policy) {",
    "error_message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[25,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[26,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[27,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[28,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[29,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[30,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[31,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[126,47] cannot find symbol  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[127,29] cannot find symbol  symbol:   class Policy\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[388,47] cannot find symbol  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[444,32] cannot find symbol  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[569,41] cannot find symbol  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[604,40] cannot find symbol  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[637,51] cannot find symbol  symbol:   class Project\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java:[696,57] cannot find symbol  symbol:   class Policy\n  location: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper",
    "api_diff": "Format: element | nature | kind\ncom.google.api.services.cloudresourcemanager.model.ListPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Update | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ClearOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.UndeleteProjectRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$ListOrgPolicies | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$GetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.BooleanConstraint | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManagerScopes | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.RestoreDefault | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListOrgPoliciesRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$GetEffectiveOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Create | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$ListAvailableOrgPolicyConstraints | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Project | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$Create | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$Search | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListProjectsResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Operations$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Delete | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$GetEffectiveOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListOrgPoliciesResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$SetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$List | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ResourceId | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListConstraint | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$ClearOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$SetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Operations | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$TestIamPermissions | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$SetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$SetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$SetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManagerRequestInitializer | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.SetOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Builder | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$ClearOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.BooleanPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Binding | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.OrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$TestIamPermissions | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.GetOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Status | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Constraint | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$ListOrgPolicies | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManagerRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetEffectiveOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$ListAvailableOrgPolicyConstraints | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetAncestry | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$GetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ProjectCreationStatus | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$ListOrgPolicies | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Operation | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.GetEffectiveOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$Delete | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Policy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$ClearOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Undelete | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$ListAvailableOrgPolicyConstraints | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$GetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$List | DELETION | TYPE_REMOVED",
    "original_code": "package com.google.cloud.resourcemanager.testing;\nimport com.sun.net.httpserver.Headers;\nimport com.sun.net.httpserver.HttpExchange;\nimport com.sun.net.httpserver.HttpHandler;\nimport com.sun.net.httpserver.HttpServer;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.zip.GZIPInputStream;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\nimport com.google.cloud.NoCredentials;\nimport com.google.cloud.resourcemanager.ResourceManagerOptions;\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Objects;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.io.ByteStreams;\nimport org.threeten.bp.Instant;\nimport org.threeten.bp.ZoneOffset;\nimport org.threeten.bp.format.DateTimeFormatter;\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static java.net.HttpURLConnection.HTTP_OK;\n@Deprecated\n@SuppressWarnings(\"restriction\")\npublic class LocalResourceManagerHelper {\n    private static final Logger log = Logger.getLogger(LocalResourceManagerHelper.class.getName());\n\n    private static final JsonFactory jsonFactory = GsonFactory.getDefaultInstance();\n\n    private static final Random PROJECT_NUMBER_GENERATOR = new Random();\n\n    private static final String VERSION = \"v1\";\n\n    private static final String CONTEXT = (\"/\" + VERSION) + \"/projects\";\n\n    private static final String OPERATION_CONTEXT = (\"/\" + VERSION) + \"/operations\";\n\n    private static final URI BASE_CONTEXT;\n\n    private static final Set<String> SUPPORTED_COMPRESSION_ENCODINGS = ImmutableSet.of(\"gzip\", \"x-gzip\");\n\n    private static final Pattern LIST_FIELDS_PATTERN = Pattern.compile(\"(.*?)projects\\\\((.*?)\\\\)(.*?)\");\n\n    private static final String[] NO_FIELDS = new String[]{  };\n\n    static {\n        try {\n            BASE_CONTEXT = new URI(CONTEXT);\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(\"Could not initialize LocalResourceManagerHelper due to URISyntaxException.\", e);\n        }\n    }\n\n    private static final Set<Character> PERMISSIBLE_PROJECT_NAME_PUNCTUATION = ImmutableSet.of('-', '\\'', '\"', ' ', '!');\n\n    private final HttpServer server;\n\n    private final ConcurrentSkipListMap<String, Project> projects = new ConcurrentSkipListMap<>();\n\n    private final Map<String, Policy> policies = new HashMap<>();\n\n    private final int port;\n\n    private static class Response {\n        private final int code;\n\n        private final String body;\n\n        Response(int code, String body) {\n            this.code = code;\n            this.body = body;\n        }\n\n        int code() {\n            return code;\n        }\n\n        String body() {\n            return body;\n        }\n    }\n\n    private enum Error {\n\n        ABORTED(409, \"global\", \"aborted\", \"ABORTED\"),\n        ALREADY_EXISTS(409, \"global\", \"alreadyExists\", \"ALREADY_EXISTS\"),\n        PERMISSION_DENIED(403, \"global\", \"forbidden\", \"PERMISSION_DENIED\"),\n        FAILED_PRECONDITION(400, \"global\", \"failedPrecondition\", \"FAILED_PRECONDITION\"),\n        INVALID_ARGUMENT(400, \"global\", \"badRequest\", \"INVALID_ARGUMENT\"),\n        BAD_REQUEST(400, \"global\", \"badRequest\", \"BAD_REQUEST\"),\n        INTERNAL_ERROR(500, \"global\", \"internalError\", \"INTERNAL_ERROR\");\n        private final int code;\n\n        private final String domain;\n\n        private final String reason;\n\n        private final String status;\n\n        Error(int code, String domain, String reason, String status) {\n            this.code = code;\n            this.domain = domain;\n            this.reason = reason;\n            this.status = status;\n        }\n\n        Response response(String message) {\n            try {\n                return new Response(code, toJson(message));\n            } catch (IOException e) {\n                return Error.INTERNAL_ERROR.response(\"Error when generating JSON error response\");\n            }\n        }\n\n        private String toJson(String message) throws IOException {\n            Map<String, Object> errors = new HashMap<>();\n            errors.put(\"domain\", domain);\n            errors.put(\"message\", message);\n            errors.put(\"reason\", reason);\n            Map<String, Object> args = new HashMap<>();\n            args.put(\"errors\", ImmutableList.of(errors));\n            args.put(\"code\", code);\n            args.put(\"message\", message);\n            args.put(\"status\", status);\n            return jsonFactory.toString(ImmutableMap.of(\"error\", args));\n        }\n    }\n\n    private class RequestHandler implements HttpHandler {\n        @Override\n        public void handle(HttpExchange exchange) {\n            Response response;\n            String path = BASE_CONTEXT.relativize(exchange.getRequestURI()).getPath();\n            String requestMethod = exchange.getRequestMethod();\n            try {\n                switch (requestMethod) {\n                    case \"POST\" :\n                        response = handlePost(exchange, path);\n                        break;\n                    case \"DELETE\" :\n                        response = delete(projectIdFromUri(path));\n                        break;\n                    case \"GET\" :\n                        if (!path.isEmpty()) {\n                            response = get(projectIdFromUri(path), parseFields(exchange.getRequestURI().getQuery()));\n                        } else {\n                            response = list(parseListOptions(exchange.getRequestURI().getQuery()));\n                        }\n                        break;\n                    case \"PUT\" :\n                        String requestBody = decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n                        response = replace(projectIdFromUri(path), jsonFactory.fromString(requestBody, Project.class));\n                        break;\n                    default :\n                        response = Error.BAD_REQUEST.response(((\"The server could not understand the following request URI: \" + requestMethod) + \" \") + path);\n                }\n            } catch (IOException e) {\n                response = Error.BAD_REQUEST.response(e.getMessage());\n            }\n            writeResponse(exchange, response);\n        }\n    }\n\n    private Response handlePost(HttpExchange exchange, String path) throws IOException {\n        String requestBody = decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n        if (!path.contains(\":\")) {\n            return create(jsonFactory.fromString(requestBody, Project.class));\n        } else {\n            switch (path.split(\":\", 2)[1]) {\n                case \"undelete\" :\n                    return undelete(projectIdFromUri(path));\n                case \"getIamPolicy\" :\n                    return getPolicy(projectIdFromUri(path));\n                case \"setIamPolicy\" :\n                    return replacePolicy(projectIdFromUri(path), jsonFactory.fromString(requestBody, SetIamPolicyRequest.class).getPolicy());\n                case \"testIamPermissions\" :\n                    return testPermissions(projectIdFromUri(path), jsonFactory.fromString(requestBody, TestIamPermissionsRequest.class).getPermissions());\n                default :\n                    return Error.BAD_REQUEST.response(\"The server could not understand the following request URI: POST \" + path);\n            }\n        }\n    }\n\n    private class OperationRequestHandler implements HttpHandler {\n        @Override\n        public void handle(HttpExchange exchange) {\n            String projectId;\n            try {\n                projectId = new URI(OPERATION_CONTEXT).relativize(exchange.getRequestURI()).getPath();\n            } catch (URISyntaxException e) {\n                throw new IllegalStateException(e);\n            }\n            Response response;\n            String requestMethod = exchange.getRequestMethod();\n            switch (requestMethod) {\n                case \"GET\" :\n                    Project project = projects.get(projectId);\n                    if (project == null) {\n                        response = Error.PERMISSION_DENIED.response((\"Project \" + projectId) + \" not found.\");\n                        break;\n                    }\n                    try {\n                        response = new Response(HTTP_OK, jsonFactory.toString(new Operation().setDone(true).setResponse(project)));\n                    } catch (IOException e) {\n                        response = Error.INTERNAL_ERROR.response(\"Error when serializing project \" + project.getProjectId());\n                    }\n                    break;\n                default :\n                    response = Error.BAD_REQUEST.response(((\"The server could not understand the following request URI: \" + requestMethod) + \" \") + projectId);\n            }\n            writeResponse(exchange, response);\n        }\n    }\n\n    private static void writeResponse(HttpExchange exchange, Response response) {\n        exchange.getResponseHeaders().set(\"Content-type\", \"application/json; charset=UTF-8\");\n        OutputStream outputStream = exchange.getResponseBody();\n        try {\n            exchange.getResponseHeaders().add(\"Connection\", \"close\");\n            exchange.sendResponseHeaders(response.code(), response.body().length());\n            outputStream.write(response.body().getBytes(StandardCharsets.UTF_8));\n            outputStream.close();\n        } catch (IOException e) {\n            log.log(Level.WARNING, \"IOException encountered when sending response.\", e);\n        }\n    }\n\n    private static String decodeContent(Headers headers, InputStream inputStream) throws IOException {\n        List<String> contentEncoding = headers.get(\"Content-encoding\");\n        InputStream input = inputStream;\n        try {\n            if ((contentEncoding != null) && (!contentEncoding.isEmpty())) {\n                String encoding = contentEncoding.get(0);\n                if (SUPPORTED_COMPRESSION_ENCODINGS.contains(encoding)) {\n                    input = new GZIPInputStream(inputStream);\n                } else if (!encoding.equals(\"identity\")) {\n                    throw new IOException(\"The request has the following unsupported HTTP content encoding: \" + encoding);\n                }\n            }\n            return new String(ByteStreams.toByteArray(input), StandardCharsets.UTF_8);\n        } catch (IOException e) {\n            throw new IOException(\"Exception encountered when decoding request content.\", e);\n        }\n    }\n\n    private static String projectIdFromUri(String path) throws IOException {\n        if (path.isEmpty()) {\n            throw new IOException((\"The URI path '\" + path) + \"' doesn't have a project ID.\");\n        }\n        return path.split(\":\")[0];\n    }\n\n    private static String[] parseFields(String query) {\n        if ((query != null) && (!query.isEmpty())) {\n            String[] querySplit = query.split(\"=\");\n            return querySplit.length > 1 ? querySplit[1].split(\",\") : null;\n        }\n        return null;\n    }\n\n    private static Map<String, Object> parseListOptions(String query) throws IOException {\n        Map<String, Object> options = new HashMap<>();\n        if (query != null) {\n            String[] args = query.split(\"&\");\n            for (String arg : args) {\n                String[] argEntry = arg.split(\"=\");\n                switch (argEntry[0]) {\n                    case \"fields\" :\n                        Matcher matcher = LIST_FIELDS_PATTERN.matcher(argEntry[1]);\n                        if (matcher.matches()) {\n                            options.put(\"projectFields\", matcher.group(2).split(\",\"));\n                            options.put(\"listFields\", (matcher.group(1) + matcher.group(3)).split(\",\"));\n                        } else {\n                            options.put(\"projectFields\", NO_FIELDS);\n                            options.put(\"listFields\", argEntry[1].split(\",\"));\n                        }\n                        break;\n                    case \"filter\" :\n                        options.put(\"filter\", argEntry[1].split(\" \"));\n                        break;\n                    case \"pageToken\" :\n                        options.put(\"pageToken\", argEntry[1]);\n                        break;\n                    case \"pageSize\" :\n                        int pageSize = Integer.parseInt(argEntry[1]);\n                        if (pageSize < 1) {\n                            throw new IOException(\"Page size must be greater than 0.\");\n                        }\n                        options.put(\"pageSize\", pageSize);\n                        break;\n                }\n            }\n        }\n        return options;\n    }\n\n    private static String checkForProjectErrors(Project project) {\n        if (project.getProjectId() == null) {\n            return \"Project ID cannot be empty.\";\n        }\n        if (!isValidIdOrLabel(project.getProjectId(), 6, 30)) {\n            return (((((\"Project \" + project.getProjectId()) + \" has an invalid ID.\") + \" See https://cloud.google.com/resource-manager/reference/rest/\") + VERSION) + \"/projects\") + \" for more information.\";\n        }\n        if (project.getName() != null) {\n            for (char c : project.getName().toCharArray()) {\n                if ((!PERMISSIBLE_PROJECT_NAME_PUNCTUATION.contains(c)) && (!Character.isLetterOrDigit(c))) {\n                    return ((((\"Project \" + project.getProjectId()) + \" has an invalid name.\") + \" See https://cloud.google.com/resource-manager/reference/rest/\") + VERSION) + \"/projects for more information.\";\n                }\n            }\n        }\n        if (project.getLabels() != null) {\n            if (project.getLabels().size() > 256) {\n                return (\"Project \" + project.getProjectId()) + \" exceeds the limit of 256 labels.\";\n            }\n            for (Map.Entry<String, String> entry : project.getLabels().entrySet()) {\n                if ((!isValidIdOrLabel(entry.getKey(), 1, 63)) || (!isValidIdOrLabel(entry.getValue(), 0, 63))) {\n                    return ((((\"Project \" + project.getProjectId()) + \" has an invalid label entry.\") + \" See https://cloud.google.com/resource-manager/reference/rest/\") + VERSION) + \"/projects for more information.\";\n                }\n            }\n        }\n        return null;\n    }\n\n    private static boolean isValidIdOrLabel(String value, int minLength, int maxLength) {\n        for (char c : value.toCharArray()) {\n            if (((c != '-') && (!Character.isDigit(c))) && (!Character.isLowerCase(c))) {\n                return false;\n            }\n        }\n        if ((!value.isEmpty()) && ((!Character.isLetter(value.charAt(0))) || value.endsWith(\"-\"))) {\n            return false;\n        }\n        return (value.length() >= minLength) && (value.length() <= maxLength);\n    }\n\n    synchronized Response create(Project project) {\n        String customErrorMessage = checkForProjectErrors(project);\n        if (customErrorMessage != null) {\n            return Error.INVALID_ARGUMENT.response(customErrorMessage);\n        } else {\n            project.setLifecycleState(\"ACTIVE\");\n            project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));\n            project.setCreateTime(DateTimeFormatter.ISO_DATE_TIME.withZone(ZoneOffset.UTC).format(Instant.ofEpochMilli(System.currentTimeMillis())));\n            if (projects.putIfAbsent(project.getProjectId(), project) != null) {\n                return Error.ALREADY_EXISTS.response((\"A project with the same project ID (\" + project.getProjectId()) + \") already exists.\");\n            }\n            Policy emptyPolicy = new Policy().setBindings(Collections.<Binding>emptyList()).setEtag(UUID.randomUUID().toString()).setVersion(0);\n            policies.put(project.getProjectId(), emptyPolicy);\n            try {\n                String createdProjectStr = jsonFactory.toString(new Operation().setDone(false).setName(\"operations/\" + project.getProjectId()));\n                return new Response(HTTP_OK, createdProjectStr);\n            } catch (IOException e) {\n                return Error.INTERNAL_ERROR.response(\"Error serializing project \" + project.getProjectId());\n            }\n        }\n    }\n\n    synchronized Response delete(String projectId) {\n        Project project = projects.get(projectId);\n        if (project == null) {\n            return Error.PERMISSION_DENIED.response((\"Error when deleting \" + projectId) + \" because the project was not found.\");\n        }\n        if (!project.getLifecycleState().equals(\"ACTIVE\")) {\n            return Error.FAILED_PRECONDITION.response((\"Error when deleting \" + projectId) + \" because the lifecycle state was not ACTIVE.\");\n        } else {\n            project.setLifecycleState(\"DELETE_REQUESTED\");\n            return new Response(HTTP_OK, \"{}\");\n        }\n    }\n\n    Response get(String projectId, String[] fields) {\n        Project project = projects.get(projectId);\n        if (project != null) {\n            try {\n                return new Response(HTTP_OK, jsonFactory.toString(extractFields(project, fields)));\n            } catch (IOException e) {\n                return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + project.getProjectId());\n            }\n        } else {\n            return Error.PERMISSION_DENIED.response((\"Project \" + projectId) + \" not found.\");\n        }\n    }\n\n    Response list(Map<String, Object> options) {\n        List<String> projectsSerialized = new ArrayList<>();\n        String[] filters = ((String[]) (options.get(\"filter\")));\n        if ((filters != null) && (!isValidFilter(filters))) {\n            return Error.INVALID_ARGUMENT.response(\"Could not parse the filter.\");\n        }\n        String[] projectFields = ((String[]) (options.get(\"projectFields\")));\n        int count = 0;\n        String pageToken = ((String) (options.get(\"pageToken\")));\n        Integer pageSize = ((Integer) (options.get(\"pageSize\")));\n        String nextPageToken = null;\n        Map<String, Project> projectsToScan = projects;\n        if (pageToken != null) {\n            projectsToScan = projects.tailMap(pageToken);\n        }\n        for (Project p : projectsToScan.values()) {\n            if ((pageSize != null) && (count >= pageSize)) {\n                nextPageToken = p.getProjectId();\n                break;\n            }\n            boolean includeProject = includeProject(p, filters);\n            if (includeProject) {\n                count++;\n                try {\n                    projectsSerialized.add(jsonFactory.toString(extractFields(p, projectFields)));\n                } catch (IOException e) {\n                    return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + p.getProjectId());\n                }\n            }\n        }\n        String[] listFields = ((String[]) (options.get(\"listFields\")));\n        StringBuilder responseBody = new StringBuilder();\n        responseBody.append('{');\n        if (!((projectFields != null) && (projectFields.length == 0))) {\n            responseBody.append(\"\\\"projects\\\": [\");\n            Joiner.on(\",\").appendTo(responseBody, projectsSerialized);\n            responseBody.append(']');\n        }\n        if ((nextPageToken != null) && ((listFields == null) || ImmutableSet.copyOf(listFields).contains(\"nextPageToken\"))) {\n            if (responseBody.length() > 1) {\n                responseBody.append(',');\n            }\n            responseBody.append(\"\\\"nextPageToken\\\": \\\"\");\n            responseBody.append(nextPageToken);\n            responseBody.append('\"');\n        }\n        responseBody.append('}');\n        return new Response(HTTP_OK, responseBody.toString());\n    }\n\n    private static boolean isValidFilter(String[] filters) {\n        for (String filter : filters) {\n            String field = filter.toLowerCase().split(\":\")[0];\n            if (!((\"id\".equals(field) || \"name\".equals(field)) || field.startsWith(\"labels.\"))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean includeProject(Project project, String[] filters) {\n        if (filters == null) {\n            return true;\n        }\n        for (String filter : filters) {\n            String[] filterEntry = filter.toLowerCase().split(\":\");\n            String filterType = filterEntry[0];\n            if (\"id\".equals(filterType)) {\n                if (!satisfiesFilter(project.getProjectId(), filterEntry[1])) {\n                    return false;\n                }\n            } else if (\"name\".equals(filterType)) {\n                if (!satisfiesFilter(project.getName(), filterEntry[1])) {\n                    return false;\n                }\n            } else if (filterType.startsWith(\"labels.\")) {\n                String labelKey = filterType.substring(\"labels.\".length());\n                if (project.getLabels() != null) {\n                    String labelValue = project.getLabels().get(labelKey);\n                    if (!satisfiesFilter(labelValue, filterEntry[1])) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    private static boolean satisfiesFilter(String projectValue, String filterValue) {\n        if (projectValue == null) {\n            return false;\n        }\n        return \"*\".equals(filterValue) || filterValue.equals(projectValue.toLowerCase());\n    }\n\n    private static Project extractFields(Project fullProject, String[] fields) {\n        if (fields == null) {\n            return fullProject;\n        }\n        Project project = new Project();\n        for (String field : fields) {\n            switch (field) {\n                case \"createTime\" :\n                    project.setCreateTime(fullProject.getCreateTime());\n                    break;\n                case \"labels\" :\n                    project.setLabels(fullProject.getLabels());\n                    break;\n                case \"lifecycleState\" :\n                    project.setLifecycleState(fullProject.getLifecycleState());\n                    break;\n                case \"name\" :\n                    project.setName(fullProject.getName());\n                    break;\n                case \"parent\" :\n                    project.setParent(fullProject.getParent());\n                    break;\n                case \"projectId\" :\n                    project.setProjectId(fullProject.getProjectId());\n                    break;\n                case \"projectNumber\" :\n                    project.setProjectNumber(fullProject.getProjectNumber());\n                    break;\n            }\n        }\n        return project;\n    }\n\n    synchronized Response replace(String projectId, Project project) {\n        Project originalProject = projects.get(projectId);\n        if (originalProject == null) {\n            return Error.PERMISSION_DENIED.response((\"Error when replacing \" + projectId) + \" because the project was not found.\");\n        } else if (!originalProject.getLifecycleState().equals(\"ACTIVE\")) {\n            return Error.FAILED_PRECONDITION.response((\"Error when replacing \" + projectId) + \" because the lifecycle state was not ACTIVE.\");\n        } else if (!Objects.equal(originalProject.getParent(), project.getParent())) {\n            return Error.INVALID_ARGUMENT.response(\"The server currently only supports setting the parent once \" + \"and does not allow unsetting it.\");\n        }\n        project.setProjectId(projectId);\n        project.setLifecycleState(originalProject.getLifecycleState());\n        project.setCreateTime(originalProject.getCreateTime());\n        project.setProjectNumber(originalProject.getProjectNumber());\n        projects.replace(projectId, project);\n        try {\n            return new Response(HTTP_OK, jsonFactory.toString(project));\n        } catch (IOException e) {\n            return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + projectId);\n        }\n    }\n\n    synchronized Response undelete(String projectId) {\n        Project project = projects.get(projectId);\n        Response response;\n        if (project == null) {\n            response = Error.PERMISSION_DENIED.response((\"Error when undeleting \" + projectId) + \" because the project was not found.\");\n        } else if (!project.getLifecycleState().equals(\"DELETE_REQUESTED\")) {\n            response = Error.FAILED_PRECONDITION.response((\"Error when undeleting \" + projectId) + \" because the lifecycle state was not DELETE_REQUESTED.\");\n        } else {\n            project.setLifecycleState(\"ACTIVE\");\n            response = new Response(HTTP_OK, \"{}\");\n        }\n        return response;\n    }\n\n    synchronized Response getPolicy(String projectId) {\n        Policy policy = policies.get(projectId);\n        if (policy == null) {\n            return Error.PERMISSION_DENIED.response((\"Project \" + projectId) + \" not found.\");\n        }\n        try {\n            return new Response(HTTP_OK, jsonFactory.toString(policy));\n        } catch (IOException e) {\n            return Error.INTERNAL_ERROR.response(\"Error when serializing the IAM policy for \" + projectId);\n        }\n    }\n\n    synchronized Response replacePolicy(String projectId, Policy policy) {\n        Policy originalPolicy = policies.get(projectId);\n        if (originalPolicy == null) {\n            return Error.PERMISSION_DENIED.response((\"Error when replacing the policy for \" + projectId) + \" because the project was not found.\");\n        }\n        String etag = policy.getEtag();\n        if ((etag != null) && (!originalPolicy.getEtag().equals(etag))) {\n            return Error.ABORTED.response((\"Policy etag mismatch when replacing the policy for project \" + projectId) + \", please retry the read.\");\n        }\n        policy.setEtag(UUID.randomUUID().toString());\n        policy.setVersion(originalPolicy.getVersion());\n        policies.put(projectId, policy);\n        try {\n            return new Response(HTTP_OK, jsonFactory.toString(policy));\n        } catch (IOException e) {\n            return Error.INTERNAL_ERROR.response(\"Error when serializing the policy for project \" + projectId);\n        }\n    }\n\n    synchronized Response testPermissions(String projectId, List<String> permissions) {\n        if (!projects.containsKey(projectId)) {\n            return Error.PERMISSION_DENIED.response((\"Project \" + projectId) + \" not found.\");\n        }\n        try {\n            return new Response(HTTP_OK, jsonFactory.toString(new TestIamPermissionsResponse().setPermissions(permissions)));\n        } catch (IOException e) {\n            return Error.INTERNAL_ERROR.response(\"Error when serializing permissions \" + permissions);\n        }\n    }\n\n    private LocalResourceManagerHelper() {\n        try {\n            server = HttpServer.create(new InetSocketAddress(0), 0);\n            port = server.getAddress().getPort();\n            server.createContext(CONTEXT, new RequestHandler());\n            server.createContext(OPERATION_CONTEXT, new OperationRequestHandler());\n        } catch (IOException e) {\n            throw new RuntimeException(\"Could not bind the mock Resource Manager server.\", e);\n        }\n    }\n\n    public static LocalResourceManagerHelper create() {\n        return new LocalResourceManagerHelper();\n    }\n\n    public ResourceManagerOptions getOptions() {\n        return ResourceManagerOptions.newBuilder().setHost(\"http://localhost:\" + port).setCredentials(NoCredentials.getInstance()).build();\n    }\n\n    public void start() {\n        server.start();\n    }\n\n    public void stop() {\n        server.stop(1);\n    }\n\n    public synchronized boolean changeLifecycleState(String projectId, String lifecycleState) {\n        checkArgument((\"ACTIVE\".equals(lifecycleState) || \"DELETE_REQUESTED\".equals(lifecycleState)) || \"DELETE_IN_PROGRESS\".equals(lifecycleState), \"Lifecycle state must be ACTIVE, DELETE_REQUESTED, or DELETE_IN_PROGRESS\");\n        Project project = projects.get(checkNotNull(projectId));\n        if (project != null) {\n            project.setLifecycleState(lifecycleState);\n            return true;\n        }\n        return false;\n    }\n\n    public synchronized boolean removeProject(String projectId) {\n        policies.remove(checkNotNull(projectId));\n        return projects.remove(projectId) != null;\n    }\n}\n",
    "project": "google-cloud-java",
    "libraryName": "google-api-services-cloudresourcemanager",
    "libraryGroupID": "com.google.apis",
    "newVersion": "v3-rev20220807-2.0.0",
    "previousVersion": "v1-rev20220807-2.0.0",
    "breakingCommit": "471d07e01cd0c79dc9bed5344ed46418f4c078a2",
    "patch": "```java\npackage com.google.cloud.resourcemanager.testing;\nimport com.sun.net.httpserver.Headers;\nimport com.sun.net.httpserver.HttpExchange;\nimport com.sun.net.httpserver.HttpHandler;\nimport com.sun.net.httpserver.HttpServer;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.zip.GZIPInputStream;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\nimport com.google.cloud.NoCredentials;\nimport com.google.cloud.resourcemanager.ResourceManagerOptions;\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Objects;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.io.ByteStreams;\nimport org.threeten.bp.Instant;\nimport org.threeten.bp.ZoneOffset;\nimport org.threeten.bp.format.DateTimeFormatter;\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static java.net.HttpURLConnection.HTTP_OK;\n@Deprecated\n@SuppressWarnings(\"restriction\")\npublic class LocalResourceManagerHelper {\n    private static final Logger log = Logger.getLogger(LocalResourceManagerHelper.class.getName());\n\n    private static final JsonFactory jsonFactory = GsonFactory.getDefaultInstance();\n\n    private static final Random PROJECT_NUMBER_GENERATOR = new Random();\n\n    private static final String VERSION = \"v1\";\n\n    private static final String CONTEXT = (\"/\" + VERSION) + \"/projects\";\n\n    private static final String OPERATION_CONTEXT = (\"/\" + VERSION) + \"/operations\";\n\n    private static final URI BASE_CONTEXT;\n\n    private static final Set<String> SUPPORTED_COMPRESSION_ENCODINGS = ImmutableSet.of(\"gzip\", \"x-gzip\");\n\n    private static final Pattern LIST_FIELDS_PATTERN = Pattern.compile(\"(.*?)projects\\\\((.*?)\\\\)(.*?)\");\n\n    private static final String[] NO_FIELDS = new String[]{  };\n\n    static {\n        try {\n            BASE_CONTEXT = new URI(CONTEXT);\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(\"Could not initialize LocalResourceManagerHelper due to URISyntaxException.\", e);\n        }\n    }\n\n    private static final Set<Character> PERMISSIBLE_PROJECT_NAME_PUNCTUATION = ImmutableSet.of('-', '\\'', '\"', ' ', '!');\n\n    private final HttpServer server;\n\n    private final ConcurrentSkipListMap<String, Project> projects = new ConcurrentSkipListMap<>();\n\n    private final Map<String, Policy> policies = new HashMap<>();\n\n    private final int port;\n\n    private static class Response {\n        private final int code;\n\n        private final String body;\n\n        Response(int code, String body) {\n            this.code = code;\n            this.body = body;\n        }\n\n        int code() {\n            return code;\n        }\n\n        String body() {\n            return body;\n        }\n    }\n\n    private enum Error {\n\n        ABORTED(409, \"global\", \"aborted\", \"ABORTED\"),\n        ALREADY_EXISTS(409, \"global\", \"alreadyExists\", \"ALREADY_EXISTS\"),\n        PERMISSION_DENIED(403, \"global\", \"forbidden\", \"PERMISSION_DENIED\"),\n        FAILED_PRECONDITION(400, \"global\", \"failedPrecondition\", \"FAILED_PRECONDITION\"),\n        INVALID_ARGUMENT(400, \"global\", \"badRequest\", \"INVALID_ARGUMENT\"),\n        BAD_REQUEST(400, \"global\", \"badRequest\", \"BAD_REQUEST\"),\n        INTERNAL_ERROR(500, \"global\", \"internalError\", \"INTERNAL_ERROR\");\n        private final int code;\n\n        private final String domain;\n\n        private final String reason;\n\n        private final String status;\n\n        Error(int code, String domain, String reason, String status) {\n            this.code = code;\n            this.domain = domain;\n            this.reason = reason;\n            this.status = status;\n        }\n\n        Response response(String message) {\n            try {\n                return new Response(code, toJson(message));\n            } catch (IOException e) {\n                return Error.INTERNAL_ERROR.response(\"Error when generating JSON error response\");\n            }\n        }\n\n        private String toJson(String message) throws IOException {\n            Map<String, Object> errors = new HashMap<>();\n            errors.put(\"domain\", domain);\n            errors.put(\"message\", message);\n            errors.put(\"reason\", reason);\n            Map<String, Object> args = new HashMap<>();\n            args.put(\"errors\", ImmutableList.of(errors));\n            args.put(\"code\", code);\n            args.put(\"message\", message);\n            args.put(\"status\", status);\n            return jsonFactory.toString(ImmutableMap.of(\"error\", args));\n        }\n    }\n\n    private class RequestHandler implements HttpHandler {\n        @Override\n        public void handle(HttpExchange exchange) {\n            Response response;\n            String path = BASE_CONTEXT.relativize(exchange.getRequestURI()).getPath();\n            String requestMethod = exchange.getRequestMethod();\n            try {\n                switch (requestMethod) {\n                    case \"POST\" :\n                        response = handlePost(exchange, path);\n                        break;\n                    case \"DELETE\" :\n                        response = delete(projectIdFromUri(path));\n                        break;\n                    case \"GET\" :\n                        if (!path.isEmpty()) {\n                            response = get(projectIdFromUri(path), parseFields(exchange.getRequestURI().getQuery()));\n                        } else {\n                            response = list(parseListOptions(exchange.getRequestURI().getQuery()));\n                        }\n                        break;\n                    case \"PUT\" :\n                        String requestBody = decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n                        response = replace(projectIdFromUri(path), jsonFactory.fromString(requestBody, Project.class));\n                        break;\n                    default :\n                        response = Error.BAD_REQUEST.response(((\"The server could not understand the following request URI: \" + requestMethod) + \" \") + path);\n                }\n            } catch (IOException e) {\n                response = Error.BAD_REQUEST.response(e.getMessage());\n            }\n            writeResponse(exchange, response);\n        }\n    }\n\n    private Response handlePost(HttpExchange exchange, String path) throws IOException {\n        String requestBody = decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n        if (!path.contains(\":\")) {\n            return create(jsonFactory.fromString(requestBody, Project.class));\n        } else {\n            switch (path.split(\":\", 2)[1]) {\n                case \"undelete\" :\n                    return undelete(projectIdFromUri(path));\n                case \"getIamPolicy\" :\n                    return getPolicy(projectIdFromUri(path));\n                case \"setIamPolicy\" :\n                    return replacePolicy(projectIdFromUri(path), jsonFactory.fromString(requestBody, SetIamPolicyRequest.class).getPolicy());\n                case \"testIamPermissions\" :\n                    return testPermissions(projectIdFromUri(path), jsonFactory.fromString(requestBody, TestIamPermissionsRequest.class).getPermissions());\n                default :\n                    return Error.BAD_REQUEST.response(\"The server could not understand the following request URI: POST \" + path);\n            }\n        }\n    }\n\n    private class OperationRequestHandler implements HttpHandler {\n        @Override\n        public void handle(HttpExchange exchange) {\n            String projectId;\n            try {\n                projectId = new URI(OPERATION_CONTEXT).relativize(exchange.getRequestURI()).getPath();\n            } catch (URISyntaxException e) {\n                throw new IllegalStateException(e);\n            }\n            Response response;\n            String requestMethod = exchange.getRequestMethod();\n            switch (requestMethod) {\n                case \"GET\" :\n                    Project project = projects.get(projectId);\n                    if (project == null) {\n                        response = Error.PERMISSION_DENIED.response((\"Project \" + projectId) + \" not found.\");\n                        break;\n                    }\n                    try {\n                        response = new Response(HTTP_OK, jsonFactory.toString(new Operation().setDone(true).setResponse(project)));\n                    } catch (IOException e) {\n                        response = Error.INTERNAL_ERROR.response(\"Error when serializing project \" + project.getProjectId());\n                    }\n                    break;\n                default :\n                    response = Error.BAD_REQUEST.response(((\"The server could not understand the following request URI: \" + requestMethod) + \" \") + projectId);\n            }\n            writeResponse(exchange, response);\n        }\n    }\n\n    private static void writeResponse(HttpExchange exchange, Response response) {\n        exchange.getResponseHeaders().set(\"Content-type\", \"application/json; charset=UTF-8\");\n        OutputStream outputStream = exchange.getResponseBody();\n        try {\n            exchange.getResponseHeaders().add(\"Connection\", \"close\");\n            exchange.sendResponseHeaders(response.code(), response.body().length());\n            outputStream.write(response.body().getBytes(StandardCharsets.UTF_8));\n            outputStream.close();\n        } catch (IOException e) {\n            log.log(Level.WARNING, \"IOException encountered when sending response.\", e);\n        }\n    }\n\n    private static String decodeContent(Headers headers, InputStream inputStream) throws IOException {\n        List<String> contentEncoding = headers.get(\"Content-encoding\");\n        InputStream input = inputStream;\n        try {\n            if ((contentEncoding != null) && (!contentEncoding.isEmpty())) {\n                String encoding = contentEncoding.get(0);\n                if (SUPPORTED_COMPRESSION_ENCODINGS.contains(encoding)) {\n                    input = new GZIPInputStream(inputStream);\n                } else if (!encoding.equals(\"identity\")) {\n                    throw new IOException(\"The request has the following unsupported HTTP content encoding: \" + encoding);\n                }\n            }\n            return new String(ByteStreams.toByteArray(input), StandardCharsets.UTF_8);\n        } catch (IOException e) {\n            throw new IOException(\"Exception encountered when decoding request content.\", e);\n        }\n    }\n\n    private static String projectIdFromUri(String path) throws IOException {\n        if (path.isEmpty()) {\n            throw new IOException((\"The URI path '\" + path) + \"' doesn't have a project ID.\");\n        }\n        return path.split(\":\")[0];\n    }\n\n    private static String[] parseFields(String query) {\n        if (query != null) {\n            String[] querySplit = query.split(\"=\");\n            return querySplit.length > 1 ? querySplit[1].split(\",\") : null;\n        }\n        return null;\n    }\n\n    private static Map<String, Object> parseListOptions(String query) throws IOException {\n        Map<String, Object> options = new HashMap<>();\n        if (query != null) {\n            String[] args = query.split(\"&\");\n            for (String arg : args) {\n                String[] argEntry = arg.split(\"=\");\n                switch (argEntry[0]) {\n                    case \"fields\" :\n                        Matcher matcher = LIST_FIELDS_PATTERN.matcher(argEntry[1]);\n                        if (matcher.matches()) {\n                            options.put(\"projectFields\", matcher.group(2).split(\",\"));\n                            options.put(\"listFields\", (matcher.group(1) + matcher.group(3)).split(\",\"));\n                        } else {\n                            options.put(\"projectFields\", NO_FIELDS);\n                            options.put(\"listFields\", argEntry[1].split(\",\"));\n                        }\n                        break;\n                    case \"filter\" :\n                        options.put(\"filter\", argEntry[1].split(\" \"));\n                        break;\n                    case \"pageToken\" :\n                        options.put(\"pageToken\", argEntry[1]);\n                        break;\n                    case \"pageSize\" :\n                        int pageSize = Integer.parseInt(argEntry[1]);\n                        if (pageSize < 1) {\n                            throw new IOException(\"Page size must be greater than 0.\");\n                        }\n                        options.put(\"pageSize\", pageSize);\n                        break;\n                }\n            }\n        }\n        return options;\n    }\n\n    private static String checkForProjectErrors(Project project) {\n        if (project.getProjectId() == null) {\n            return \"Project ID cannot be empty.\";\n        }\n        if (!isValidIdOrLabel(project.getProjectId(), 6, 30)) {\n            return (((((\"Project \" + project.getProjectId()) + \" has an invalid ID.\") + \" See https://cloud.google.com/resource-manager/reference/rest/\") + VERSION) + \"/projects\") + \" for more information.\";\n        }\n        if (project.getName() != null) {\n            for (char c : project.getName().toCharArray()) {\n                if ((!PERMISSIBLE_PROJECT_NAME_PUNCTUATION.contains(c)) && (!Character.isLetterOrDigit(c))) {\n                    return ((((\"Project \" + project.getProjectId()) + \" has an invalid name.\") + \" See https://cloud.google.com/resource-manager/reference/rest/\") + VERSION) + \"/projects for more information.\";\n                }\n            }\n        }\n        if (project.getLabels() != null) {\n            if (project.getLabels().size() > 256) {\n                return (\"Project \" + project.getProjectId()) + \" exceeds the limit of 256 labels.\";\n            }\n            for (Map.Entry<String, String> entry : project.getLabels().entrySet()) {\n                if ((!isValidIdOrLabel(entry.getKey(), 1, 63)) || (!isValidIdOrLabel(entry.getValue(), 0, 63))) {\n                    return ((((\"Project \" + project.getProjectId()) + \" has an invalid label entry.\") + \" See https://cloud.google.com/resource-manager/reference/rest/\") + VERSION) + \"/projects for more information.\";\n                }\n            }\n        }\n        return null;\n    }\n\n    private static boolean isValidIdOrLabel(String value, int minLength, int maxLength) {\n        for (char c : value.toCharArray()) {\n            if ((!c == '-') && (!Character.isDigit(c)) && (!Character.isLowerCase(c))) {\n                return false;\n            }\n        }\n        if ((!value.isEmpty()) && ((!Character.isLetter(value.charAt(0))) || value.endsWith(\"-\"))) {\n            return false;\n        }\n        return (value.length() >= minLength) && (value.length() <= maxLength);\n    }\n\n    synchronized Response create(Project project) {\n        String customErrorMessage = checkForProjectErrors(project);\n        if (customErrorMessage != null) {\n            return Error.INVALID_ARGUMENT.response(customErrorMessage);\n        } else {\n            project.setLifecycleState(\"ACTIVE\");\n            project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));\n            project.setCreateTime(DateTimeFormatter.ISO_DATE_TIME.withZone(ZoneOffset.UTC).format(Instant.ofEpochMilli(System.currentTimeMillis())));\n            if (projects.putIfAbsent(project.getProjectId(), project) != null) {\n                return Error.ALREADY_EXISTS.response((\"A project with the same project ID (\" + project.getProjectId()) + \") already exists.\");\n            }\n            Policy emptyPolicy = new Policy().setBindings(Collections.<Binding>emptyList()).setEtag(UUID.randomUUID().toString()).setVersion(0);\n            policies.put(project.getProjectId(), emptyPolicy);\n            try {\n                String createdProjectStr = jsonFactory.toString(new Operation().setDone(false).setName(\"operations/\" + project.getProjectId()));\n                return new Response(HTTP_OK, createdProjectStr);\n            } catch (IOException e) {\n                return Error.INTERNAL_ERROR.response(\"Error serializing project \" + project.getProjectId());\n            }\n        }\n    }\n\n    synchronized Response delete(String projectId) {\n        Project project = projects.get(projectId);\n        Response response;\n        if (project == null) {\n            response = Error.PERMISSION_DENIED.response((\"Error when deleting \" + projectId) + \" because the project was not found.\");\n        } else if (!project.getLifecycleState().equals(\"ACTIVE\")) {\n            response = Error.FAILED_PRECONDITION.response((\"Error when deleting \" + projectId) + \" because the lifecycle state was not ACTIVE.\");\n        } else {\n            project.setLifecycleState(\"DELETE_REQUESTED\");\n            response = new Response(HTTP_OK, \"{}\");\n        }\n        return response;\n    }\n\n    Response get(String projectId, String[] fields) {\n        Project project = projects.get(projectId);\n        if (project != null) {\n            try {\n                return new Response(HTTP_OK, jsonFactory.toString(extractFields(project, fields)));\n            } catch (IOException e) {\n                return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + project.getProjectId());\n            }\n        } else {\n            return Error.PERMISSION_DENIED.response((\"Project \" + projectId) + \" not found.\");\n        }\n    }\n\n    Response list(Map<String, Object> options) {\n        List<String> projectsSerialized = new ArrayList<>();\n        String[] filters = ((String[]) (options.get(\"filter\")));\n        if ((filters != null) && (!isValidFilter(filters))) {\n            return Error.INVALID_ARGUMENT.response(\"Could not parse the filter.\");\n        }\n        String[] projectFields = ((String[]) (options.get(\"projectFields\")));\n        int count = 0;\n        String pageToken = ((String) (options.get(\"pageToken\")));\n        Integer pageSize = ((Integer) (options.get(\"pageSize\")));\n        String nextPageToken = null;\n        Map<String, Project> projectsToScan = projects;\n        if (pageToken != null) {\n            projectsToScan = projects.tailMap(pageToken);\n        }\n        for (Project p : projectsToScan.values()) {\n            if ((pageSize != null) && (count >= pageSize)) {\n                nextPageToken = p.getProjectId();\n                break;\n            }\n            boolean includeProject = includeProject(p, filters);\n            if (includeProject) {\n                count++;\n                try {\n                    projectsSerialized.add(jsonFactory.toString(extractFields(p, projectFields)));\n                } catch (IOException e) {\n                    return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + p.getProjectId());\n                }\n            }\n        }\n        String[] listFields = ((String[]) (options.get(\"listFields\")));\n        StringBuilder responseBody = new StringBuilder();\n        responseBody.append('{');\n        if (!((projectFields != null) && (projectFields.length == 0))) {\n            responseBody.append(\"\\\"projects\\\": [\");\n            Joiner.on(\",\").appendTo(responseBody, projectsSerialized);\n            responseBody.append(']');\n        }\n        if ((nextPageToken != null) && ((listFields == null) || ImmutableSet.copyOf(listFields).contains(\"nextPageToken\"))) {\n            if (responseBody.length() > 1) {\n                responseBody.append(',');\n            }\n            responseBody.append(\"\\\"nextPageToken\\\": \\\"\");\n            responseBody.append(nextPageToken);\n            responseBody.append('\"');\n        }\n        responseBody.append('}');\n        return new Response(HTTP_OK, responseBody.toString());\n    }\n\n    private static boolean isValidIdOrLabel(String value, int minLength, int maxLength) {\n        for (char c : value.toCharArray()) {\n            if ((!c == '-') && (!Character.isDigit(c)) && (!Character.isLowerCase(c))) {\n                return false;\n            }\n        }\n        if ((!value.isEmpty()) && ((!Character.isLetter(value.charAt(0))) || value.endsWith(\"-\"))) {\n            return false;\n        }\n        return (value.length() >= minLength) && (value.length() <= maxLength);\n    }\n\n    private static Project extractFields(Project fullProject, String[] fields) {\n        if (fields == null) {\n            return fullProject;\n        }\n        Project project = new Project();\n        for (String field : fields) {\n            switch (field) {\n                case \"createTime\" :\n                    project.setCreateTime(fullProject.getCreateTime());\n                    break;\n                case \"labels\" :\n                    project.setLabels(fullProject.getLabels());\n                    break;\n                case \"lifecycleState\" :\n                    project.setLifecycleState(fullProject.getLifecycleState());\n                    break;\n                case \"name\" :\n                    project.setName(fullProject.getName());\n                    break;\n                case \"parent\" :\n                    project.setParent(fullProject.getParent());\n                    break;\n                case \"projectId\" :\n                    project.setProjectId(fullProject.getProjectId());\n                    break;\n                case \"projectNumber\" :\n                    project.setProjectNumber(fullProject.getProjectNumber());\n                    break;\n            }\n        }\n        return project;\n    }\n\n    synchronized Response replace(String projectId, Project project) {\n        Project originalProject = projects.get(projectId);\n        if (originalProject == null) {\n            return Error.PERMISSION_DENIED.response((\"Error when replacing \" + projectId) + \" because the project was not found.\");\n        } else if (!originalProject.getLifecycleState().equals(\"ACTIVE\")) {\n            return Error.FAILED_PRECONDITION.response((\"Error when replacing \" + projectId) + \" because the lifecycle state was not ACTIVE.\");\n        } else if (!Objects.equal(originalProject.getParent(), project.getParent())) {\n            return Error.INVALID_ARGUMENT.response(\"The server currently only supports setting the parent once \" + \"and does not allow unsetting it.\");\n        }\n        project.setProjectId(projectId);\n        project.setLifecycleState(originalProject.getLifecycleState());\n        project.setCreateTime(originalProject.getCreateTime());\n        project.setProjectNumber(originalProject.getProjectNumber());\n        projects.replace(projectId, project);\n        try {\n            return new Response(HTTP_OK, jsonFactory.toString(project));\n        } catch (IOException e) {\n            return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + projectId);\n        }\n    }\n\n    synchronized Response undelete(String projectId) {\n        Project project = projects.get(projectId);\n        Response response;\n        if (project == null) {\n            response = Error.PERMISSION_DENIED.response((\"Error when undeleting \" + projectId) + \" because the project was not found.\");\n        } else if (!project.getLifecycleState().equals(\"DELETE_REQUESTED\")) {\n            response = Error.FAILED_PRECONDITION.response((\"Error when undeleting \" + projectId) + \" because the lifecycle state was not DELETE_REQUESTED.\");\n        } else {\n            project.setLifecycleState(\"ACTIVE\");\n            response = new Response(HTTP_OK, \"{}\");\n        }\n        return response;\n    }\n\n    Response getPolicy(String projectId) {\n        Policy policy = policies.get(projectId);\n        if (policy == null) {\n            return Error.PERMISSION_DENIED.response((\"Project \" + projectId) + \" not found.\");\n        }\n        try {\n            return new Response(HTTP_OK, jsonFactory.toString(policy));\n        } catch (IOException e) {\n            return Error.INTERNAL_ERROR.response(\"Error when serializing the IAM policy for \" + projectId);\n        }\n    }\n\n    Response replacePolicy(String projectId, Policy policy) {\n        Policy originalPolicy = policies.get(projectId);\n        if (originalPolicy == null) {\n            return Error.PERMISSION_DENIED.response((\"Error when replacing the policy for \" + projectId) + \" because the project was not found.\");\n        }\n        String etag = policy.getEtag();\n        if ((etag != null) && (!originalPolicy.getEtag().equals(etag))) {\n            return Error.ABORTED.response((\"Policy etag mismatch when replacing the policy for project \" + projectId) + \", please retry the read.\");\n        }\n        policy.setEtag(UUID.randomUUID().toString());\n        policy.setVersion(originalPolicy.getVersion());\n        policies.put(projectId, policy);\n        try {\n            return new Response(HTTP_OK, jsonFactory.toString(policy));\n        } catch (IOException e) {\n            return Error.INTERNAL_ERROR.response(\"Error when serializing the policy for project \" + projectId);\n        }\n    }\n\n    Response testIamPermissions(String projectId, List<String> permissions) {\n        if (!projects.containsKey(projectId)) {\n            return Error.PERMISSION_DENIED.response((\"Project \" + projectId) + \" not found.\");\n        }\n        try {\n            return new Response(HTTP_OK, jsonFactory.toString(new TestIamPermissionsResponse().setPermissions(permissions)));\n        } catch (IOException e) {\n            return Error.INTERNAL_ERROR.response(\"Error when serializing permissions \" + permissions);\n        }\n    }\n}\n```<end_of_turn>"
}