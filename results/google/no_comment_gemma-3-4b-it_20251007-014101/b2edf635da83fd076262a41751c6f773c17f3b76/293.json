{
    "absolute_path_to_file_in_container": "/jclouds/apis/byon/src/main/java/org/jclouds/byon/domain/YamlNode.java",
    "errors": [
        {
            "line_number": 114,
            "message": "[ERROR] /jclouds/apis/byon/src/main/java/org/jclouds/byon/domain/YamlNode.java:[114,64] incompatible types: java.lang.Class<org.jclouds.byon.domain.YamlNode> cannot be converted to org.yaml.snakeyaml.LoaderOptions",
            "additional_info": "",
            "file_name": "YamlNode.java",
            "uid": "82e0641f-0956-5f50-b7e0-b65963e0b65d"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: snakeyaml 1.32->2.0\n\nthe following client code fails: \n'''java\npackage org.jclouds.byon.domain;\nimport DumperOptions.FlowStyle;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.List;\nimport java.util.Map;\nimport com.google.common.base.Charsets;\nimport com.google.common.base.Function;\nimport com.google.common.base.Throwables;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableMap.Builder;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.io.ByteSource;\nimport org.jclouds.byon.Node;\nimport org.jclouds.util.Closeables2;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\npublic class YamlNode {\n    public String id;\n\n    public String name;\n\n    public String description;\n\n    public String hostname;\n\n    public String location_id;\n\n    public String os_arch;\n\n    public String os_family;\n\n    public String os_description;\n\n    public String os_version;\n\n    public int login_port = 22;\n\n    public boolean os_64bit;\n\n    public String group;\n\n    public List<String> tags = Lists.newArrayList();\n\n    public Map<String, String> metadata = Maps.newLinkedHashMap();\n\n    public String username;\n\n    public String credential;\n\n    public String credential_url;\n\n    public String sudo_password;\n\n    public static final Function<YamlNode, Node> toNode = new Function<YamlNode, Node>() {\n        @Override\n        public Node apply(YamlNode arg0) {\n            if (arg0 == null)\n                return null;\n\n            return Node.builder().id(arg0.id).name(arg0.name).description(arg0.description).locationId(arg0.location_id).hostname(arg0.hostname).osArch(arg0.os_arch).osFamily(arg0.os_family).osDescription(arg0.os_description).osVersion(arg0.os_version).os64Bit(arg0.os_64bit).group(arg0.group).loginPort(arg0.login_port).tags(arg0.tags).metadata(arg0.metadata).username(arg0.username).credential(arg0.credential).credentialUrl(arg0.credential_url != null ? URI.create(arg0.credential_url) : null).sudoPassword(arg0.sudo_password).build();\n        }\n    };\n\n    public Node toNode() {\n        return toNode.apply(this);\n    }\n\n    public static final Function<ByteSource, YamlNode> byteSourceToYamlNode = new Function<ByteSource, YamlNode>() {\n        @Override\n        public YamlNode apply(ByteSource byteSource) {\n            if (byteSource == null)\n                return null;\n\n            InputStream in = null;\n            try {\n                in = byteSource.openStream();\n                return ((YamlNode) (new Yaml(new Constructor(YamlNode.class)).load(in)));\n            } catch (IOException ioe) {\n                throw Throwables.propagate(ioe);\n            } finally {\n                Closeables2.closeQuietly(in);\n            }\n        }\n    };\n\n    public static YamlNode fromYaml(ByteSource in) {\n        return byteSourceToYamlNode.apply(in);\n    }\n\n    public static final Function<YamlNode, ByteSource> yamlNodeToByteSource = new Function<YamlNode, ByteSource>() {\n        @Override\n        public ByteSource apply(YamlNode in) {\n            if (in == null)\n                return null;\n\n            Builder<String, Object> prettier = ImmutableMap.builder();\n            if (in.id != null)\n                prettier.put(\"id\", in.id);\n\n            if (in.name != null)\n                prettier.put(\"name\", in.name);\n\n            if (in.description != null)\n                prettier.put(\"description\", in.description);\n\n            if (in.hostname != null)\n                prettier.put(\"hostname\", in.hostname);\n\n            if (in.location_id != null)\n                prettier.put(\"location_id\", in.location_id);\n\n            if (in.os_arch != null)\n                prettier.put(\"os_arch\", in.os_arch);\n\n            if (in.os_family != null)\n                prettier.put(\"os_family\", in.os_family);\n\n            if (in.os_description != null)\n                prettier.put(\"os_description\", in.os_description);\n\n            if (in.os_version != null)\n                prettier.put(\"os_version\", in.os_version);\n\n            if (in.os_64bit)\n                prettier.put(\"os_64bit\", in.os_64bit);\n\n            if (in.login_port != 22)\n                prettier.put(\"login_port\", in.login_port);\n\n            if (in.group != null)\n                prettier.put(\"group\", in.group);\n\n            if (in.tags.size() != 0)\n                prettier.put(\"tags\", in.tags);\n\n            if (in.metadata.size() != 0)\n                prettier.put(\"metadata\", in.metadata);\n\n            if (in.username != null)\n                prettier.put(\"username\", in.username);\n\n            if (in.credential != null)\n                prettier.put(\"credential\", in.credential);\n\n            if (in.credential_url != null)\n                prettier.put(\"credential_url\", in.credential_url);\n\n            if (in.sudo_password != null)\n                prettier.put(\"sudo_password\", in.sudo_password);\n\n            DumperOptions options = new DumperOptions();\n            options.setDefaultFlowStyle(FlowStyle.BLOCK);\n            return ByteSource.wrap(new Yaml(options).dump(prettier.build()).getBytes(Charsets.UTF_8));\n        }\n    };\n\n    public ByteSource toYaml() {\n        return yamlNodeToByteSource.apply(this);\n    }\n\n    public static YamlNode fromNode(Node in) {\n        return nodeToYamlNode.apply(in);\n    }\n\n    public static final Function<Node, YamlNode> nodeToYamlNode = new Function<Node, YamlNode>() {\n        @Override\n        public YamlNode apply(Node arg0) {\n            if (arg0 == null)\n                return null;\n\n            YamlNode yaml = new YamlNode();\n            yaml.id = arg0.getId();\n            yaml.name = arg0.getName();\n            yaml.description = arg0.getDescription();\n            yaml.hostname = arg0.getHostname();\n            yaml.location_id = arg0.getLocationId();\n            yaml.os_arch = arg0.getOsArch();\n            yaml.os_family = arg0.getOsFamily();\n            yaml.os_description = arg0.getOsDescription();\n            yaml.os_version = arg0.getOsVersion();\n            yaml.os_64bit = arg0.isOs64Bit();\n            yaml.login_port = arg0.getLoginPort();\n            yaml.group = arg0.getGroup();\n            yaml.tags = ImmutableList.copyOf(arg0.getTags());\n            yaml.metadata = ImmutableMap.copyOf(arg0.getMetadata());\n            yaml.username = arg0.getUsername();\n            yaml.credential = arg0.getCredential();\n            yaml.credential_url = (arg0.getCredentialUrl() != null) ? arg0.getCredentialUrl().toASCIIString() : null;\n            yaml.sudo_password = arg0.getSudoPassword();\n            return yaml;\n        }\n    };\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n            return (YamlNode) new Yaml(new Constructor(YamlNode.class)).load(in);\nwith the following error message:\n[ERROR] /jclouds/apis/byon/src/main/java/org/jclouds/byon/domain/YamlNode.java:[114,64] incompatible types: java.lang.Class<org.jclouds.byon.domain.YamlNode> cannot be converted to org.yaml.snakeyaml.LoaderOptions\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.yaml.snakeyaml.TypeDescription.getMapKeyType | DELETION | METHOD_REMOVED\norg.yaml.snakeyaml.nodes.CollectionNode.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.events.MappingStartEvent.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.Yaml.loadAs | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\norg.yaml.snakeyaml.scanner.ScannerImpl.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.TypeDescription.getListPropertyType | DELETION | METHOD_REMOVED\norg.yaml.snakeyaml.constructor.CustomClassLoaderConstructor.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.nodes.MappingNode.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.nodes.ScalarNode.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.events.CollectionStartEvent.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.constructor.BaseConstructor.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.error.Mark.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.constructor.Constructor.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.TypeDescription.setTag | DELETION | METHOD_REMOVED\norg.yaml.snakeyaml.parser.ParserImpl.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.events.ScalarEvent.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.TypeDescription.getMapValueType | DELETION | METHOD_REMOVED\norg.yaml.snakeyaml.representer.Representer.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.events.SequenceStartEvent.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.nodes.Tag.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.constructor.SafeConstructor.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.nodes.SequenceNode.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.composer.Composer.<init> | DELETION | CONSTRUCTOR_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "            return (YamlNode) new Yaml(new Constructor(YamlNode.class)).load(in);",
    "error_message": "[ERROR] /jclouds/apis/byon/src/main/java/org/jclouds/byon/domain/YamlNode.java:[114,64] incompatible types: java.lang.Class<org.jclouds.byon.domain.YamlNode> cannot be converted to org.yaml.snakeyaml.LoaderOptions",
    "api_diff": "Format: element | nature | kind\norg.yaml.snakeyaml.TypeDescription.getMapKeyType | DELETION | METHOD_REMOVED\norg.yaml.snakeyaml.nodes.CollectionNode.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.events.MappingStartEvent.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.Yaml.loadAs | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\norg.yaml.snakeyaml.scanner.ScannerImpl.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.TypeDescription.getListPropertyType | DELETION | METHOD_REMOVED\norg.yaml.snakeyaml.constructor.CustomClassLoaderConstructor.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.nodes.MappingNode.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.nodes.ScalarNode.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.events.CollectionStartEvent.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.constructor.BaseConstructor.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.error.Mark.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.constructor.Constructor.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.TypeDescription.setTag | DELETION | METHOD_REMOVED\norg.yaml.snakeyaml.parser.ParserImpl.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.events.ScalarEvent.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.TypeDescription.getMapValueType | DELETION | METHOD_REMOVED\norg.yaml.snakeyaml.representer.Representer.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.events.SequenceStartEvent.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.nodes.Tag.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.constructor.SafeConstructor.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.nodes.SequenceNode.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.yaml.snakeyaml.composer.Composer.<init> | DELETION | CONSTRUCTOR_REMOVED",
    "original_code": "package org.jclouds.byon.domain;\nimport DumperOptions.FlowStyle;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.List;\nimport java.util.Map;\nimport com.google.common.base.Charsets;\nimport com.google.common.base.Function;\nimport com.google.common.base.Throwables;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableMap.Builder;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.io.ByteSource;\nimport org.jclouds.byon.Node;\nimport org.jclouds.util.Closeables2;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\npublic class YamlNode {\n    public String id;\n\n    public String name;\n\n    public String description;\n\n    public String hostname;\n\n    public String location_id;\n\n    public String os_arch;\n\n    public String os_family;\n\n    public String os_description;\n\n    public String os_version;\n\n    public int login_port = 22;\n\n    public boolean os_64bit;\n\n    public String group;\n\n    public List<String> tags = Lists.newArrayList();\n\n    public Map<String, String> metadata = Maps.newLinkedHashMap();\n\n    public String username;\n\n    public String credential;\n\n    public String credential_url;\n\n    public String sudo_password;\n\n    public static final Function<YamlNode, Node> toNode = new Function<YamlNode, Node>() {\n        @Override\n        public Node apply(YamlNode arg0) {\n            if (arg0 == null)\n                return null;\n\n            return Node.builder().id(arg0.id).name(arg0.name).description(arg0.description).locationId(arg0.location_id).hostname(arg0.hostname).osArch(arg0.os_arch).osFamily(arg0.os_family).osDescription(arg0.os_description).osVersion(arg0.os_version).os64Bit(arg0.os_64bit).group(arg0.group).loginPort(arg0.login_port).tags(arg0.tags).metadata(arg0.metadata).username(arg0.username).credential(arg0.credential).credentialUrl(arg0.credential_url != null ? URI.create(arg0.credential_url) : null).sudoPassword(arg0.sudo_password).build();\n        }\n    };\n\n    public Node toNode() {\n        return toNode.apply(this);\n    }\n\n    public static final Function<ByteSource, YamlNode> byteSourceToYamlNode = new Function<ByteSource, YamlNode>() {\n        @Override\n        public YamlNode apply(ByteSource byteSource) {\n            if (byteSource == null)\n                return null;\n\n            InputStream in = null;\n            try {\n                in = byteSource.openStream();\n                return ((YamlNode) (new Yaml(new Constructor(YamlNode.class)).load(in)));\n            } catch (IOException ioe) {\n                throw Throwables.propagate(ioe);\n            } finally {\n                Closeables2.closeQuietly(in);\n            }\n        }\n    };\n\n    public static YamlNode fromYaml(ByteSource in) {\n        return byteSourceToYamlNode.apply(in);\n    }\n\n    public static final Function<YamlNode, ByteSource> yamlNodeToByteSource = new Function<YamlNode, ByteSource>() {\n        @Override\n        public ByteSource apply(YamlNode in) {\n            if (in == null)\n                return null;\n\n            Builder<String, Object> prettier = ImmutableMap.builder();\n            if (in.id != null)\n                prettier.put(\"id\", in.id);\n\n            if (in.name != null)\n                prettier.put(\"name\", in.name);\n\n            if (in.description != null)\n                prettier.put(\"description\", in.description);\n\n            if (in.hostname != null)\n                prettier.put(\"hostname\", in.hostname);\n\n            if (in.location_id != null)\n                prettier.put(\"location_id\", in.location_id);\n\n            if (in.os_arch != null)\n                prettier.put(\"os_arch\", in.os_arch);\n\n            if (in.os_family != null)\n                prettier.put(\"os_family\", in.os_family);\n\n            if (in.os_description != null)\n                prettier.put(\"os_description\", in.os_description);\n\n            if (in.os_version != null)\n                prettier.put(\"os_version\", in.os_version);\n\n            if (in.os_64bit)\n                prettier.put(\"os_64bit\", in.os_64bit);\n\n            if (in.login_port != 22)\n                prettier.put(\"login_port\", in.login_port);\n\n            if (in.group != null)\n                prettier.put(\"group\", in.group);\n\n            if (in.tags.size() != 0)\n                prettier.put(\"tags\", in.tags);\n\n            if (in.metadata.size() != 0)\n                prettier.put(\"metadata\", in.metadata);\n\n            if (in.username != null)\n                prettier.put(\"username\", in.username);\n\n            if (in.credential != null)\n                prettier.put(\"credential\", in.credential);\n\n            if (in.credential_url != null)\n                prettier.put(\"credential_url\", in.credential_url);\n\n            if (in.sudo_password != null)\n                prettier.put(\"sudo_password\", in.sudo_password);\n\n            DumperOptions options = new DumperOptions();\n            options.setDefaultFlowStyle(FlowStyle.BLOCK);\n            return ByteSource.wrap(new Yaml(options).dump(prettier.build()).getBytes(Charsets.UTF_8));\n        }\n    };\n\n    public ByteSource toYaml() {\n        return yamlNodeToByteSource.apply(this);\n    }\n\n    public static YamlNode fromNode(Node in) {\n        return nodeToYamlNode.apply(in);\n    }\n\n    public static final Function<Node, YamlNode> nodeToYamlNode = new Function<Node, YamlNode>() {\n        @Override\n        public YamlNode apply(Node arg0) {\n            if (arg0 == null)\n                return null;\n\n            YamlNode yaml = new YamlNode();\n            yaml.id = arg0.getId();\n            yaml.name = arg0.getName();\n            yaml.description = arg0.getDescription();\n            yaml.hostname = arg0.getHostname();\n            yaml.location_id = arg0.getLocationId();\n            yaml.os_arch = arg0.getOsArch();\n            yaml.os_family = arg0.getOsFamily();\n            yaml.os_description = arg0.getOsDescription();\n            yaml.os_version = arg0.getOsVersion();\n            yaml.os_64bit = arg0.isOs64Bit();\n            yaml.login_port = arg0.getLoginPort();\n            yaml.group = arg0.getGroup();\n            yaml.tags = ImmutableList.copyOf(arg0.getTags());\n            yaml.metadata = ImmutableMap.copyOf(arg0.getMetadata());\n            yaml.username = arg0.getUsername();\n            yaml.credential = arg0.getCredential();\n            yaml.credential_url = (arg0.getCredentialUrl() != null) ? arg0.getCredentialUrl().toASCIIString() : null;\n            yaml.sudo_password = arg0.getSudoPassword();\n            return yaml;\n        }\n    };\n}\n",
    "project": "jclouds",
    "libraryName": "snakeyaml",
    "libraryGroupID": "org.yaml",
    "newVersion": "2.0",
    "previousVersion": "1.32",
    "breakingCommit": "b2edf635da83fd076262a41751c6f773c17f3b76",
    "patch": "```java\npackage org.jclouds.byon.domain;\nimport DumperOptions.FlowStyle;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.List;\nimport java.util.Map;\nimport com.google.common.base.Charsets;\nimport com.google.common.base.Function;\nimport com.google.common.base.Throwables;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Maps;\nimport com.google.common.io.ByteSource;\nimport org.jclouds.byon.Node;\nimport org.jclouds.util.Closeables2;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\npublic class YamlNode {\n    public String id;\n\n    public String name;\n\n    public String description;\n\n    public String hostname;\n\n    public String location_id;\n\n    public String os_arch;\n\n    public String os_family;\n\n    public String os_description;\n\n    public String os_version;\n\n    public int login_port = 22;\n\n    public boolean os_64bit;\n\n    public String group;\n\n    public List<String> tags = Lists.newArrayList();\n\n    public Map<String, String> metadata = Maps.newLinkedHashMap();\n\n    public String username;\n\n    public String credential;\n\n    public String credential_url;\n\n    public String sudo_password;\n\n    public static final Function<YamlNode, Node> toNode = new Function<YamlNode, Node>() {\n        @Override\n        public Node apply(YamlNode arg0) {\n            if (arg0 == null)\n                return null;\n\n            return Node.builder().id(arg0.id).name(arg0.name).description(arg0.description).locationId(arg0.location_id).hostname(arg0.hostname).osArch(arg0.os_arch).osFamily(arg0.os_family).osDescription(arg0.os_description).osVersion(arg0.os_version).os64Bit(arg0.os_64bit).group(arg0.group).loginPort(arg0.login_port).tags(arg0.tags).metadata(arg0.metadata).username(arg0.username).credential(arg0.credential).credentialUrl(arg0.credential_url != null ? URI.create(arg0.credential_url) : null).sudoPassword(arg0.sudo_password).build();\n        }\n    };\n\n    public Node toNode() {\n        return toNode.apply(this);\n    }\n\n    public static final Function<ByteSource, YamlNode> byteSourceToYamlNode = new Function<ByteSource, YamlNode>() {\n        @Override\n        public YamlNode apply(ByteSource byteSource) {\n            if (byteSource == null)\n                return null;\n\n            InputStream in = null;\n            try {\n                in = byteSource.openStream();\n                return (YamlNode) new Yaml(new Constructor()).load(in);\n            } catch (IOException ioe) {\n                throw Throwables.propagate(ioe);\n            } finally {\n                Closeables2.closeQuietly(in);\n            }\n        }\n    };\n\n    public static YamlNode fromYaml(ByteSource in) {\n        return byteSourceToYamlNode.apply(in);\n    }\n\n    public static final Function<YamlNode, ByteSource> yamlNodeToByteSource = new Function<YamlNode, ByteSource>() {\n        @Override\n        public ByteSource apply(YamlNode in) {\n            if (in == null)\n                return null;\n\n            Yaml yaml = new Yaml();\n            return ByteSource.wrap(yaml.dump(in).getBytes(Charsets.UTF_8));\n        }\n    };\n\n    public ByteSource toYaml() {\n        return yamlNodeToByteSource.apply(this);\n    }\n\n    public static YamlNode fromNode(Node in) {\n        return nodeToYamlNode.apply(in);\n    }\n\n    public static final Function<Node, YamlNode> nodeToYamlNode = new Function<Node, YamlNode>() {\n        @Override\n        public YamlNode apply(Node arg0) {\n            if (arg0 == null)\n                return null;\n\n            YamlNode yaml = new YamlNode();\n            yaml.id = arg0.getId();\n            yaml.name = arg0.getName();\n            yaml.description = arg0.getDescription();\n            yaml.hostname = arg0.getHostname();\n            yaml.location_id = arg0.getLocationId();\n            yaml.os_arch = arg0.getOsArch();\n            yaml.os_family = arg0.getOsFamily();\n            yaml.os_description = arg0.getOsDescription();\n            yaml.os_version = arg0.getOsVersion();\n            yaml.os_64bit = arg0.isOs64Bit();\n            yaml.login_port = arg0.getLoginPort();\n            yaml.group = arg0.getGroup();\n            yaml.tags = ImmutableList.copyOf(arg0.getTags());\n            yaml.metadata = ImmutableMap.copyOf(arg0.getMetadata());\n            yaml.username = arg0.getUsername();\n            yaml.credential = arg0.getCredential();\n            yaml.credential_url = (arg0.getCredentialUrl() != null) ? arg0.getCredentialUrl().toASCIIString() : null;\n            yaml.sudo_password = arg0.getSudoPassword();\n            return yaml;\n        }\n    };\n}\n```<end_of_turn>"
}