{
    "absolute_path_to_file_in_container": "/license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java",
    "errors": [
        {
            "line_number": 20,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[20,45] package org.apache.maven.plugin.testing.stubs does not exist",
            "additional_info": "",
            "file_name": "RemoveMojoTest.java",
            "uid": "9d2a3462-9c5e-58f7-b1c4-0115d377857b"
        },
        {
            "line_number": 42,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[42,26] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest",
            "file_name": "RemoveMojoTest.java",
            "uid": "9e2b4377-c167-5b8d-8f19-7d271fedd716"
        },
        {
            "line_number": 59,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[59,26] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest",
            "file_name": "RemoveMojoTest.java",
            "uid": "9e2b4377-c167-5b8d-8f19-7d271fedd716"
        },
        {
            "line_number": 83,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[83,26] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest",
            "file_name": "RemoveMojoTest.java",
            "uid": "9e2b4377-c167-5b8d-8f19-7d271fedd716"
        },
        {
            "line_number": 100,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[100,26] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest",
            "file_name": "RemoveMojoTest.java",
            "uid": "9e2b4377-c167-5b8d-8f19-7d271fedd716"
        },
        {
            "line_number": 117,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[117,26] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest",
            "file_name": "RemoveMojoTest.java",
            "uid": "9e2b4377-c167-5b8d-8f19-7d271fedd716"
        },
        {
            "line_number": 136,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[136,26] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest",
            "file_name": "RemoveMojoTest.java",
            "uid": "9e2b4377-c167-5b8d-8f19-7d271fedd716"
        },
        {
            "line_number": 156,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[156,26] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest",
            "file_name": "RemoveMojoTest.java",
            "uid": "9e2b4377-c167-5b8d-8f19-7d271fedd716"
        },
        {
            "line_number": 176,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[176,26] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest",
            "file_name": "RemoveMojoTest.java",
            "uid": "9e2b4377-c167-5b8d-8f19-7d271fedd716"
        },
        {
            "line_number": 183,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[183,26] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest",
            "file_name": "RemoveMojoTest.java",
            "uid": "9e2b4377-c167-5b8d-8f19-7d271fedd716"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: maven-plugin-testing-harness 4.0.0-alpha-2->4.0.0-beta-3\n\nthe following client code fails: \n'''java\npackage com.mycila.maven.plugin.license;\nimport java.io.File;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\nimport org.assertj.core.api;\nimport com.google.common.io.Files;\nimport com.mycila.maven.plugin.license.util.FileUtils;\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nfinal class RemoveMojoTest {\n    public static final String LS = \"\\n\";\n\n    @Test\n    void test_remove() throws Exception {\n        File tmp = new File(\"target/test/remove/txt\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/doc1.txt\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/doc2.txt\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals(\"some data\\r\\nand other data\\r\\n\", FileUtils.read(new File(tmp, \"doc1.txt\"), Charset.defaultCharset()));\n        Assertions.assertEquals(\"some data\\r\\nand other data\\r\\n\", FileUtils.read(new File(tmp, \"doc2.txt\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_remove_xml_txt() throws Exception {\n        File tmp = new File(\"target/test/remove/other\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/doc/doc9.xml\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/doc/doc3.txt\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((((\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" + \"\\r\\n\") + \"\\r\\n\") + \"\\r\\n\") + \"<web-app>\\r\\n\") + \"\\r\\n\") + \"</web-app>\\r\\n\", FileUtils.read(new File(tmp, \"doc9.xml\"), Charset.defaultCharset()));\n        Assertions.assertEquals(\"some data\\r\\nand other data\\r\\n\", FileUtils.read(new File(tmp, \"doc3.txt\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_remove_script_style() throws Exception {\n        File tmp = new File(\"target/test/remove/issue44\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue44.rb\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue44-2.rb\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue44-3.rb\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((\"ruby code here\" + LS) + \"and other data\") + LS) + \"\", FileUtils.read(new File(tmp, \"issue44.rb\"), Charset.defaultCharset()));\n        Assertions.assertEquals((((((\"# code comment\" + LS) + \"ruby code here\") + LS) + \"and other data\") + LS) + \"\", FileUtils.read(new File(tmp, \"issue44-2.rb\"), Charset.defaultCharset()));\n        Assertions.assertEquals((((((\"# code comment\" + LS) + \"ruby code here\") + LS) + \"and other data\") + LS) + \"\", FileUtils.read(new File(tmp, \"issue44-3.rb\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_remove_multiline() throws Exception {\n        File tmp = new File(\"target/test/remove/multi\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/test.xml\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((((((\"<assembly>\" + LS) + \"\") + \"  <id>project</id>\") + LS) + \"\") + \"</assembly>\") + LS) + \"\", FileUtils.read(new File(tmp, \"test.xml\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_js_1() throws Exception {\n        File tmp = new File(\"target/test/remove/js\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/test1.js\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((((((((((\"/**\" + LS) + \"\") + \" * jrunscript JavaScript built-in functions and objects.\") + LS) + \"\") + \" */\") + LS) + \"\") + \"\") + LS) + \"\") + \"function a(){}\", FileUtils.read(new File(tmp, \"test1.js\"), Charset.defaultCharset()).trim());\n    }\n\n    @Test\n    void test_js_2() throws Exception {\n        File tmp = new File(\"target/test/remove/js\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/test2.js\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((((((((((\"/**\" + LS) + \"\") + \" * jrunscript JavaScript built-in functions and objects.\") + LS) + \"\") + \" */\") + LS) + \"\") + \"\") + LS) + \"\") + \"function a(){}\", FileUtils.read(new File(tmp, \"test2.js\"), Charset.defaultCharset()).trim());\n    }\n\n    @Test\n    void test_issue30_RemoveSucceedsOnAOneLineCommentFile() throws Exception {\n        File tmp = new File(\"target/test/remove/issue30\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue-30/one-line-comment.java\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue-30/one-line-comment.ftl\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n    }\n\n    @Test\n    void test_issue41_cannotRemoveEmptyHeader() throws Exception {\n        File tmp = new File(\"target/test/remove/issue41\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue-41/ASimpleClass.java\"), tmp);\n        final File destFile = new File(tmp, \"ASimpleClass.java\");\n        List<String> initialLines = Files.readLines(destFile, StandardCharsets.UTF_8);\n        api.Assertions.assertThat(initialLines).hasSize(2);\n        LicenseFormatMojo format = new LicenseFormatMojo();\n        format.defaultBasedir = tmp;\n        format.legacyConfigHeader = \"com/mycila/maven/plugin/license/templates/GPL-3.txt\";\n        format.project = new MavenProjectStub();\n        format.execute();\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"com/mycila/maven/plugin/license/templates/GPL-3.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        List<String> linesAfterRemove = Files.readLines(destFile, StandardCharsets.UTF_8);\n        api.Assertions.assertThat(linesAfterRemove).hasSize(2);\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\n    remove.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\n    format.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\nwith the following error message:\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[20,45] package org.apache.maven.plugin.testing.stubs does not exist\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[42,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[59,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[83,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[100,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[117,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[136,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[156,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[176,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[183,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.apache.maven.plugin.testing.stubs.MavenProjectStub | DELETION | TYPE_REMOVED\norg.apache.maven.plugin.testing.stubs.ArtifactStub | DELETION | TYPE_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifactId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setGroupId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setVersion | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.MojoExecutionStub.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifact | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import org.apache.maven.plugin.testing.stubs.MavenProjectStub;\n    remove.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();\n    format.project = new MavenProjectStub();\n    remove.project = new MavenProjectStub();",
    "error_message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[20,45] package org.apache.maven.plugin.testing.stubs does not exist\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[42,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[59,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[83,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[100,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[117,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[136,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[156,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[176,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/RemoveMojoTest.java:[183,26] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.RemoveMojoTest",
    "api_diff": "Format: element | nature | kind\norg.apache.maven.plugin.testing.stubs.MavenProjectStub | DELETION | TYPE_REMOVED\norg.apache.maven.plugin.testing.stubs.ArtifactStub | DELETION | TYPE_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifactId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setGroupId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setVersion | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.MojoExecutionStub.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifact | DELETION | METHOD_REMOVED",
    "original_code": "package com.mycila.maven.plugin.license;\nimport java.io.File;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\nimport org.assertj.core.api;\nimport com.google.common.io.Files;\nimport com.mycila.maven.plugin.license.util.FileUtils;\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nfinal class RemoveMojoTest {\n    public static final String LS = \"\\n\";\n\n    @Test\n    void test_remove() throws Exception {\n        File tmp = new File(\"target/test/remove/txt\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/doc1.txt\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/doc2.txt\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals(\"some data\\r\\nand other data\\r\\n\", FileUtils.read(new File(tmp, \"doc1.txt\"), Charset.defaultCharset()));\n        Assertions.assertEquals(\"some data\\r\\nand other data\\r\\n\", FileUtils.read(new File(tmp, \"doc2.txt\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_remove_xml_txt() throws Exception {\n        File tmp = new File(\"target/test/remove/other\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/doc/doc9.xml\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/doc/doc3.txt\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((((\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" + \"\\r\\n\") + \"\\r\\n\") + \"\\r\\n\") + \"<web-app>\\r\\n\") + \"\\r\\n\") + \"</web-app>\\r\\n\", FileUtils.read(new File(tmp, \"doc9.xml\"), Charset.defaultCharset()));\n        Assertions.assertEquals(\"some data\\r\\nand other data\\r\\n\", FileUtils.read(new File(tmp, \"doc3.txt\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_remove_script_style() throws Exception {\n        File tmp = new File(\"target/test/remove/issue44\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue44.rb\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue44-2.rb\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue44-3.rb\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((\"ruby code here\" + LS) + \"and other data\") + LS) + \"\", FileUtils.read(new File(tmp, \"issue44.rb\"), Charset.defaultCharset()));\n        Assertions.assertEquals((((((\"# code comment\" + LS) + \"ruby code here\") + LS) + \"and other data\") + LS) + \"\", FileUtils.read(new File(tmp, \"issue44-2.rb\"), Charset.defaultCharset()));\n        Assertions.assertEquals((((((\"# code comment\" + LS) + \"ruby code here\") + LS) + \"and other data\") + LS) + \"\", FileUtils.read(new File(tmp, \"issue44-3.rb\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_remove_multiline() throws Exception {\n        File tmp = new File(\"target/test/remove/multi\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/test.xml\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((((((\"<assembly>\" + LS) + \"\") + \"  <id>project</id>\") + LS) + \"\") + \"</assembly>\") + LS) + \"\", FileUtils.read(new File(tmp, \"test.xml\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_js_1() throws Exception {\n        File tmp = new File(\"target/test/remove/js\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/test1.js\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((((((((((\"/**\" + LS) + \"\") + \" * jrunscript JavaScript built-in functions and objects.\") + LS) + \"\") + \" */\") + LS) + \"\") + \"\") + LS) + \"\") + \"function a(){}\", FileUtils.read(new File(tmp, \"test1.js\"), Charset.defaultCharset()).trim());\n    }\n\n    @Test\n    void test_js_2() throws Exception {\n        File tmp = new File(\"target/test/remove/js\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/test2.js\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((((((((((\"/**\" + LS) + \"\") + \" * jrunscript JavaScript built-in functions and objects.\") + LS) + \"\") + \" */\") + LS) + \"\") + \"\") + LS) + \"\") + \"function a(){}\", FileUtils.read(new File(tmp, \"test2.js\"), Charset.defaultCharset()).trim());\n    }\n\n    @Test\n    void test_issue30_RemoveSucceedsOnAOneLineCommentFile() throws Exception {\n        File tmp = new File(\"target/test/remove/issue30\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue-30/one-line-comment.java\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue-30/one-line-comment.ftl\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n    }\n\n    @Test\n    void test_issue41_cannotRemoveEmptyHeader() throws Exception {\n        File tmp = new File(\"target/test/remove/issue41\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue-41/ASimpleClass.java\"), tmp);\n        final File destFile = new File(tmp, \"ASimpleClass.java\");\n        List<String> initialLines = Files.readLines(destFile, StandardCharsets.UTF_8);\n        api.Assertions.assertThat(initialLines).hasSize(2);\n        LicenseFormatMojo format = new LicenseFormatMojo();\n        format.defaultBasedir = tmp;\n        format.legacyConfigHeader = \"com/mycila/maven/plugin/license/templates/GPL-3.txt\";\n        format.project = new MavenProjectStub();\n        format.execute();\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"com/mycila/maven/plugin/license/templates/GPL-3.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        List<String> linesAfterRemove = Files.readLines(destFile, StandardCharsets.UTF_8);\n        api.Assertions.assertThat(linesAfterRemove).hasSize(2);\n    }\n}\n",
    "project": "license-maven-plugin",
    "libraryName": "maven-plugin-testing-harness",
    "libraryGroupID": "org.apache.maven.plugin-testing",
    "newVersion": "4.0.0-beta-3",
    "previousVersion": "4.0.0-alpha-2",
    "breakingCommit": "f3c21936175d1aada8ae02617b66d32a748953f4",
    "patch": "```java\npackage com.mycila.maven.plugin.license;\nimport java.io.File;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\nimport org.assertj.core.api;\nimport com.google.common.io.Files;\nimport com.mycila.maven.plugin.license.util.FileUtils;\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nfinal class RemoveMojoTest {\n    public static final String LS = \"\\n\";\n\n    @Test\n    void test_remove() throws Exception {\n        File tmp = new File(\"target/test/remove/txt\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/doc1.txt\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/doc2.txt\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals(\"some data\\r\\nand other data\\r\\n\", FileUtils.read(new File(tmp, \"doc1.txt\"), Charset.defaultCharset()));\n        Assertions.assertEquals(\"some data\\r\\nand other data\\r\\n\", FileUtils.read(new File(tmp, \"doc2.txt\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_remove_xml_txt() throws Exception {\n        File tmp = new File(\"target/test/remove/other\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/doc/doc9.xml\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/doc/doc3.txt\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((((\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" + \"\\r\\n\") + \"\\r\\n\") + \"\\r\\n\") + \"<web-app>\\r\\n\") + \"\\r\\n\") + \"</web-app>\\r\\n\", FileUtils.read(new File(tmp, \"doc9.xml\"), Charset.defaultCharset()));\n        Assertions.assertEquals(\"some data\\r\\nand other data\\r\\n\", FileUtils.read(new File(tmp, \"doc3.txt\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_remove_script_style() throws Exception {\n        File tmp = new File(\"target/test/remove/issue44\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue44.rb\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue44-2.rb\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue44-3.rb\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((\"ruby code here\" + LS) + \"and other data\") + LS) + \"\", FileUtils.read(new File(tmp, \"issue44.rb\"), Charset.defaultCharset()));\n        Assertions.assertEquals((((((\"# code comment\" + LS) + \"ruby code here\") + LS) + \"and other data\") + LS) + \"\", FileUtils.read(new File(tmp, \"issue44-2.rb\"), Charset.defaultCharset()));\n        Assertions.assertEquals((((((\"# code comment\" + LS) + \"ruby code here\") + LS) + \"and other data\") + LS) + \"\", FileUtils.read(new File(tmp, \"issue44-3.rb\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_remove_multiline() throws Exception {\n        File tmp = new File(\"target/test/remove/multi\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/test.xml\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((((((\"<assembly>\" + LS) + \"\") + \"  <id>project</id>\") + LS) + \"\") + \"</assembly>\") + LS) + \"\", FileUtils.read(new File(tmp, \"test.xml\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_js_1() throws Exception {\n        File tmp = new File(\"target/test/remove/js\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/test1.js\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((((((((((\"/**\" + LS) + \"\") + \" * jrunscript JavaScript built-in functions and objects.\") + LS) + \"\") + \" */\") + LS) + \"\") + \"\") + LS) + \"\") + \"function a(){}\", FileUtils.read(new File(tmp, \"test1.js\"), Charset.defaultCharset()).trim());\n    }\n\n    @Test\n    void test_js_2() throws Exception {\n        File tmp = new File(\"target/test/remove/js\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/test2.js\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        Assertions.assertEquals((((((((((((\"/**\" + LS) + \"\") + \" * jrunscript JavaScript built-in functions and objects.\") + LS) + \"\") + \" */\") + LS) + \"\") + \"\") + LS) + \"\") + \"function a(){}\", FileUtils.read(new File(tmp, \"test2.js\"), Charset.defaultCharset()).trim());\n    }\n\n    @Test\n    void test_issue30_RemoveSucceedsOnAOneLineCommentFile() throws Exception {\n        File tmp = new File(\"target/test/remove/issue30\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue-30/one-line-comment.java\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue-30/one-line-comment.ftl\"), tmp);\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"src/test/resources/remove/header.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n    }\n\n    @Test\n    void test_issue41_cannotRemoveEmptyHeader() throws Exception {\n        File tmp = new File(\"target/test/remove/issue41\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/remove/issue-41/ASimpleClass.java\"), tmp);\n        final File destFile = new File(tmp, \"ASimpleClass.java\");\n        List<String> initialLines = Files.readLines(destFile, StandardCharsets.UTF_8);\n        Assertions.assertThat(initialLines).hasSize(2);\n        LicenseFormatMojo format = new LicenseFormatMojo();\n        format.defaultBasedir = tmp;\n        format.legacyConfigHeader = \"com/mycila/maven/plugin/license/templates/GPL-3.txt\";\n        format.project = new MavenProjectStub();\n        format.execute();\n        LicenseRemoveMojo remove = new LicenseRemoveMojo();\n        remove.defaultBasedir = tmp;\n        remove.legacyConfigHeader = \"com/mycila/maven/plugin/license/templates/GPL-3.txt\";\n        remove.project = new MavenProjectStub();\n        remove.execute();\n        List<String> linesAfterRemove = Files.readLines(destFile, StandardCharsets.UTF_8);\n        Assertions.assertThat(linesAfterRemove).hasSize(2);\n    }\n}\n```<end_of_turn>"
}