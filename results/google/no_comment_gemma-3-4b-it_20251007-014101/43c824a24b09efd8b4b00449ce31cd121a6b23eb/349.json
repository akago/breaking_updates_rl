{
    "absolute_path_to_file_in_container": "/qa-catalogue/src/main/java/de/gwdg/metadataqa/marc/MarcFactory.java",
    "errors": [
        {
            "line_number": 3,
            "message": "[ERROR] /qa-catalogue/src/main/java/de/gwdg/metadataqa/marc/MarcFactory.java:[3,35] cannot find symbol",
            "additional_info": "  symbol:   class JsonBranch\n  location: package de.gwdg.metadataqa.api.json",
            "file_name": "MarcFactory.java",
            "uid": "6b9bab4f-2bfd-5c2f-abf4-708ab6a7e2cf"
        },
        {
            "line_number": 313,
            "message": "[ERROR] /qa-catalogue/src/main/java/de/gwdg/metadataqa/marc/MarcFactory.java:[313,64] cannot find symbol",
            "additional_info": "  symbol:   class JsonBranch\n  location: class de.gwdg.metadataqa.marc.MarcFactory",
            "file_name": "MarcFactory.java",
            "uid": "6df1380a-70dd-5cef-ac13-eaa4ab04aa95"
        },
        {
            "line_number": 322,
            "message": "[ERROR] /qa-catalogue/src/main/java/de/gwdg/metadataqa/marc/MarcFactory.java:[322,59] cannot find symbol",
            "additional_info": "  symbol:   class JsonBranch\n  location: class de.gwdg.metadataqa.marc.MarcFactory",
            "file_name": "MarcFactory.java",
            "uid": "6df1380a-70dd-5cef-ac13-eaa4ab04aa95"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: metadata-qa-api 0.8.1->0.9.0\n\nthe following client code fails: \n'''java\npackage de.gwdg.metadataqa.marc;\nimport ControlFieldImpl;\nimport DataFieldImpl;\nimport LeaderImpl;\nimport MarcSubfield;\nimport RecordImpl;\nimport SubfieldImpl;\nimport java.security.InvalidParameterException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.logging.Logger;\nimport org.marc4j.marc.DataField;\nimport var;\nimport de.gwdg.metadataqa.api.json.JsonBranch;\nimport de.gwdg.metadataqa.api.model.XmlFieldInstance;\nimport de.gwdg.metadataqa.api.model.pathcache.JsonPathCache;\nimport de.gwdg.metadataqa.api.schema.MarcJsonSchema;\nimport de.gwdg.metadataqa.api.schema.Schema;\nimport de.gwdg.metadataqa.marc.dao.Control001;\nimport de.gwdg.metadataqa.marc.dao.Control003;\nimport de.gwdg.metadataqa.marc.dao.Control005;\nimport de.gwdg.metadataqa.marc.dao.Control006;\nimport de.gwdg.metadataqa.marc.dao.Control007;\nimport de.gwdg.metadataqa.marc.dao.Control008;\nimport de.gwdg.metadataqa.marc.dao.DataField;\nimport de.gwdg.metadataqa.marc.dao.Leader;\nimport de.gwdg.metadataqa.marc.dao.record.BibliographicRecord;\nimport de.gwdg.metadataqa.marc.dao.record.Marc21Record;\nimport de.gwdg.metadataqa.marc.dao.record.PicaRecord;\nimport de.gwdg.metadataqa.marc.definition.MarcVersion;\nimport de.gwdg.metadataqa.marc.definition.TagDefinitionLoader;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.SubfieldDefinition;\nimport de.gwdg.metadataqa.marc.utils.MapToDatafield;\nimport de.gwdg.metadataqa.marc.utils.alephseq.AlephseqLine;\nimport de.gwdg.metadataqa.marc.utils.alephseq.MarcMakerLine;\nimport de.gwdg.metadataqa.marc.utils.alephseq.MarclineLine;\nimport de.gwdg.metadataqa.marc.utils.pica.PicaFieldDefinition;\nimport de.gwdg.metadataqa.marc.utils.pica.PicaLine;\nimport de.gwdg.metadataqa.marc.utils.pica.PicaSchemaManager;\nimport de.gwdg.metadataqa.marc.utils.pica.PicaSubfield;\nimport net.minidev.json.JSONArray;\nimport org.marc4j.marc.ControlField;\nimport org.marc4j.marc.Record;\nimport org.marc4j.marc.Subfield;\nimport org.marc4j.marc.impl.*;\npublic class MarcFactory {\n    private static final Logger logger = Logger.getLogger(MarcFactory.class.getCanonicalName());\n\n    private static final List<String> fixableControlFields = Arrays.asList(\"006\", \"007\", \"008\");\n\n    private static Schema schema = new MarcJsonSchema();\n\n    private MarcFactory() {\n        throw new IllegalStateException(\"This is a utility class, can not be instantiated\");\n    }\n\n    public static BibliographicRecord create(JsonPathCache cache) {\n        return create(cache, MarcVersion.MARC21);\n    }\n\n    public static BibliographicRecord create(JsonPathCache cache, MarcVersion version) {\n        var marcRecord = new Marc21Record();\n        for (JsonBranch branch : schema.getPaths()) {\n            if (branch.getParent() != null)\n                continue;\n\n            switch (branch.getLabel()) {\n                case \"leader\" :\n                    marcRecord.setLeader(new Leader(extractFirst(cache, branch)));\n                    break;\n                case \"001\" :\n                    marcRecord.setControl001(new Control001(extractFirst(cache, branch)));\n                    break;\n                case \"003\" :\n                    marcRecord.setControl003(new Control003(extractFirst(cache, branch)));\n                    break;\n                case \"005\" :\n                    marcRecord.setControl005(new Control005(extractFirst(cache, branch), marcRecord));\n                    break;\n                case \"006\" :\n                    marcRecord.setControl006(new Control006(extractFirst(cache, branch), marcRecord));\n                    break;\n                case \"007\" :\n                    marcRecord.setControl007(new Control007(extractFirst(cache, branch), marcRecord));\n                    break;\n                case \"008\" :\n                    marcRecord.setControl008(new Control008(extractFirst(cache, branch), marcRecord));\n                    break;\n                default :\n                    JSONArray fieldInstances = ((JSONArray) (cache.getFragment(branch.getJsonPath())));\n                    for (var fieldInsanceNr = 0; fieldInsanceNr < fieldInstances.size(); fieldInsanceNr++) {\n                        var fieldInstance = ((Map) (fieldInstances.get(fieldInsanceNr)));\n                        var field = MapToDatafield.parse(fieldInstance, version);\n                        if (field != null) {\n                            marcRecord.addDataField(field);\n                            field.setMarcRecord(marcRecord);\n                        } else {\n                            marcRecord.addUnhandledTags(branch.getLabel());\n                        }\n                    }\n                    break;\n            }\n        }\n        return marcRecord;\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord) {\n        return createFromMarc4j(marc4jRecord, null, MarcVersion.MARC21);\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord, Leader.Type defaultType) {\n        return createFromMarc4j(marc4jRecord, defaultType, MarcVersion.MARC21);\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord, MarcVersion marcVersion) {\n        return createFromMarc4j(marc4jRecord, null, marcVersion);\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord, Leader.Type defaultType, MarcVersion marcVersion) {\n        return createFromMarc4j(marc4jRecord, defaultType, marcVersion, null);\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord, Leader.Type defaultType, MarcVersion marcVersion, String replecementInControlFields) {\n        var marcRecord = new Marc21Record();\n        if (marc4jRecord.getLeader() != null) {\n            String data = marc4jRecord.getLeader().marshal();\n            if (replecementInControlFields != null)\n                data = data.replace(replecementInControlFields, \" \");\n\n            marcRecord.setLeader(new Leader(data, defaultType));\n            if (marcRecord.getType() == null) {\n                throw new InvalidParameterException(String.format(\"Error in '%s': no type has been detected. Leader: '%s'.\", marc4jRecord.getControlNumberField(), marcRecord.getLeader().getLeaderString()));\n            }\n        }\n        importMarc4jControlFields(marc4jRecord, marcRecord, replecementInControlFields);\n        importMarc4jDataFields(marc4jRecord, marcRecord, marcVersion);\n        return marcRecord;\n    }\n\n    public static BibliographicRecord createPicaFromMarc4j(Record marc4jRecord, PicaSchemaManager picaSchemaManager) {\n        var marcRecord = new PicaRecord();\n        importMarc4jControlFields(marc4jRecord, marcRecord, null);\n        importMarc4jDataFields(marc4jRecord, marcRecord, picaSchemaManager);\n        return marcRecord;\n    }\n\n    private static void importMarc4jControlFields(Record marc4jRecord, BibliographicRecord marcRecord, String replecementInControlFields) {\n        for (ControlField controlField : marc4jRecord.getControlFields()) {\n            String data = controlField.getData();\n            if ((replecementInControlFields != null) && isFixable(controlField.getTag()))\n                data = data.replace(replecementInControlFields, \" \");\n\n            switch (controlField.getTag()) {\n                case \"001\" :\n                    marcRecord.setControl001(new Control001(data));\n                    break;\n                case \"003\" :\n                    marcRecord.setControl003(new Control003(data));\n                    break;\n                case \"005\" :\n                    marcRecord.setControl005(new Control005(data, marcRecord));\n                    break;\n                case \"006\" :\n                    marcRecord.setControl006(new Control006(data, marcRecord));\n                    break;\n                case \"007\" :\n                    marcRecord.setControl007(new Control007(data, marcRecord));\n                    break;\n                case \"008\" :\n                    marcRecord.setControl008(new Control008(data, marcRecord));\n                    break;\n                default :\n                    break;\n            }\n        }\n    }\n\n    private static boolean isFixable(String tag) {\n        return fixableControlFields.contains(tag);\n    }\n\n    private static void importMarc4jDataFields(Record marc4jRecord, BibliographicRecord marcRecord, MarcVersion marcVersion) {\n        for (DataField dataField : marc4jRecord.getDataFields()) {\n            var definition = getDataFieldDefinition(dataField, marcVersion);\n            if (definition == null) {\n                marcRecord.addUnhandledTags(dataField.getTag());\n            }\n            var field = extractDataField(dataField, definition, marcVersion);\n            marcRecord.addDataField(field);\n        }\n    }\n\n    private static void importMarc4jDataFields(Record marc4jRecord, BibliographicRecord marcRecord, PicaSchemaManager schema) {\n        for (DataField dataField : marc4jRecord.getDataFields()) {\n            var definition = schema.lookup(dataField.getTag());\n            if (definition == null) {\n                marcRecord.addUnhandledTags(dataField.getTag());\n            }\n            var field = extractPicaDataField(dataField, definition, MarcVersion.MARC21);\n            marcRecord.addDataField(field);\n        }\n    }\n\n    public static DataFieldDefinition getDataFieldDefinition(DataField dataField, MarcVersion marcVersion) {\n        return getDataFieldDefinition(dataField.getTag(), marcVersion);\n    }\n\n    public static DataFieldDefinition getDataFieldDefinition(String tag, MarcVersion marcVersion) {\n        return TagDefinitionLoader.load(tag, marcVersion);\n    }\n\n    private static de.gwdg.metadataqa.marc.dao.DataField extractDataField(DataField dataField, DataFieldDefinition definition, MarcVersion marcVersion) {\n        de.gwdg.metadataqa.marc.dao.DataField field;\n        if (definition == null) {\n            field = new de.gwdg.metadataqa.marc.dao.DataField(dataField.getTag(), Character.toString(dataField.getIndicator1()), Character.toString(dataField.getIndicator2()), marcVersion);\n        } else {\n            field = new de.gwdg.metadataqa.marc.dao.DataField(definition, Character.toString(dataField.getIndicator1()), Character.toString(dataField.getIndicator2()));\n        }\n        for (Subfield subfield : dataField.getSubfields()) {\n            var code = Character.toString(subfield.getCode());\n            SubfieldDefinition subfieldDefinition = (definition == null) ? null : definition.getSubfield(code);\n            MarcSubfield marcSubfield = null;\n            if (subfieldDefinition == null) {\n                marcSubfield = new MarcSubfield(null, code, subfield.getData());\n            } else {\n                marcSubfield = new MarcSubfield(subfieldDefinition, code, subfield.getData());\n            }\n            marcSubfield.setField(field);\n            field.getSubfields().add(marcSubfield);\n        }\n        field.indexSubfields();\n        return field;\n    }\n\n    private static de.gwdg.metadataqa.marc.dao.DataField extractPicaDataField(DataField dataField, PicaFieldDefinition definition, MarcVersion marcVersion) {\n        de.gwdg.metadataqa.marc.dao.DataField field = null;\n        if (definition == null) {\n            field = new de.gwdg.metadataqa.marc.dao.DataField(dataField.getTag(), Character.toString(dataField.getIndicator1()), Character.toString(dataField.getIndicator2()), marcVersion);\n        } else {\n            field = new de.gwdg.metadataqa.marc.dao.DataField(definition, Character.toString(dataField.getIndicator1()), Character.toString(dataField.getIndicator2()));\n        }\n        for (Subfield subfield : dataField.getSubfields()) {\n            var code = Character.toString(subfield.getCode());\n            SubfieldDefinition subfieldDefinition = (definition == null) ? null : definition.getSubfield(code);\n            MarcSubfield marcSubfield = null;\n            if (subfieldDefinition == null) {\n                marcSubfield = new MarcSubfield(null, code, subfield.getData());\n            } else {\n                marcSubfield = new MarcSubfield(subfieldDefinition, code, subfield.getData());\n            }\n            marcSubfield.setField(field);\n            field.getSubfields().add(marcSubfield);\n        }\n        field.indexSubfields();\n        return field;\n    }\n\n    private static List<String> extractList(JsonPathCache cache, JsonBranch branch) {\n        List<XmlFieldInstance> instances = cache.get(branch.getJsonPath());\n        List<String> values = new ArrayList<>();\n        if (instances != null)\n            for (XmlFieldInstance instance : instances)\n                values.add(instance.getValue());\n\n\n        return values;\n    }\n\n    private static String extractFirst(JsonPathCache cache, JsonBranch branch) {\n        List<String> list = extractList(cache, branch);\n        if (!list.isEmpty())\n            return list.get(0);\n\n        return null;\n    }\n\n    public static BibliographicRecord createFromFormattedText(String marcRecordAsText) {\n        return createFromFormattedText(Arrays.asList(marcRecordAsText.split(\"\\n\")));\n    }\n\n    public static BibliographicRecord createFromFormattedText(String marcRecordAsText, MarcVersion marcVersion) {\n        return createFromFormattedText(Arrays.asList(marcRecordAsText.split(\"\\n\")), marcVersion);\n    }\n\n    public static BibliographicRecord createFromFormattedText(List<String> lines) {\n        return createFromFormattedText(lines, MarcVersion.MARC21);\n    }\n\n    public static BibliographicRecord createFromFormattedText(List<String> lines, MarcVersion marcVersion) {\n        if (marcVersion == null)\n            marcVersion = MarcVersion.MARC21;\n\n        var marcRecord = new Marc21Record();\n        for (String line : lines) {\n            if (line.startsWith(\"LEADER \")) {\n                marcRecord.setLeader(line.replace(\"LEADER \", \"\"), marcVersion);\n            } else {\n                var tag = line.substring(0, 3);\n                var content = line.substring(4);\n                marcRecord.setField(tag, content, marcVersion);\n            }\n        }\n        return marcRecord;\n    }\n\n    public static BibliographicRecord createFromAlephseq(List<AlephseqLine> lines, MarcVersion marcVersion) {\n        if (marcVersion == null)\n            marcVersion = MarcVersion.MARC21;\n\n        var marcRecord = new Marc21Record();\n        for (AlephseqLine line : lines) {\n            if (line.isLeader()) {\n                marcRecord.setLeader(line.getContent());\n            } else if (line.isNumericTag()) {\n                marcRecord.setField(line.getTag(), line.getInd1(), line.getInd2(), line.getContent(), marcVersion);\n            }\n        }\n        return marcRecord;\n    }\n\n    public static Record createRecordFromAlephseq(List<AlephseqLine> lines) {\n        Record marc4jRecord = new RecordImpl();\n        for (AlephseqLine line : lines) {\n            if (line.isLeader()) {\n                marc4jRecord.setLeader(new LeaderImpl(line.getContent()));\n            } else if (line.isNumericTag()) {\n                if (line.isControlField()) {\n                    marc4jRecord.addVariableField(new ControlFieldImpl(line.getTag(), line.getContent()));\n                } else {\n                    var df = new DataFieldImpl(line.getTag(), line.getInd1().charAt(0), line.getInd2().charAt(0));\n                    for (String[] pair : line.parseSubfields()) {\n                        if (((pair.length == 2) && (pair[0] != null)) && (pair[1] != null)) {\n                            df.addSubfield(new SubfieldImpl(pair[0].charAt(0), pair[1]));\n                        } else {\n                            logger.warning(String.format(\"parse error in record #%s) tag %s: '%s'\", line.getRecordID(), line.getTag(), line.getRawContent()));\n                        }\n                    }\n                    marc4jRecord.addVariableField(df);\n                }\n            }\n        }\n        return marc4jRecord;\n    }\n\n    public static Record createRecordFromMarcline(List<MarclineLine> lines) {\n        Record marc4jRecord = new RecordImpl();\n        for (MarclineLine line : lines) {\n            if (line.isLeader()) {\n                try {\n                    marc4jRecord.setLeader(new LeaderImpl(line.getContent()));\n                } catch (StringIndexOutOfBoundsException e) {\n                    logger.severe(\"Error at creating leader: \" + e.getMessage());\n                }\n            } else if (line.isNumericTag()) {\n                if (line.isControlField()) {\n                    marc4jRecord.addVariableField(new ControlFieldImpl(line.getTag(), line.getContent()));\n                } else {\n                    var df = new DataFieldImpl(line.getTag(), line.getInd1().charAt(0), line.getInd2().charAt(0));\n                    for (String[] pair : line.parseSubfields()) {\n                        if (((pair.length == 2) && (pair[0] != null)) && (pair[1] != null)) {\n                            df.addSubfield(new SubfieldImpl(pair[0].charAt(0), pair[1]));\n                        } else {\n                            logger.warning(String.format(\"parse error in record #%s) tag %s: '%s'\", line.getRecordID(), line.getTag(), line.getRawContent()));\n                        }\n                    }\n                    marc4jRecord.addVariableField(df);\n                }\n            }\n        }\n        return marc4jRecord;\n    }\n\n    public static Record createRecordFromMarcMaker(List<MarcMakerLine> lines) {\n        Record marc4jRecord = new RecordImpl();\n        for (MarcMakerLine line : lines) {\n            if (line.isLeader()) {\n                try {\n                    marc4jRecord.setLeader(new LeaderImpl(line.getContent()));\n                } catch (StringIndexOutOfBoundsException e) {\n                    logger.severe(\"Error at creating leader: \" + e.getMessage());\n                }\n            } else if (line.isNumericTag()) {\n                if (line.isControlField()) {\n                    marc4jRecord.addVariableField(new ControlFieldImpl(line.getTag(), line.getContent()));\n                } else {\n                    var df = new DataFieldImpl(line.getTag(), line.getInd1().charAt(0), line.getInd2().charAt(0));\n                    for (String[] pair : line.parseSubfields()) {\n                        if (((pair.length == 2) && (pair[0] != null)) && (pair[1] != null)) {\n                            df.addSubfield(new SubfieldImpl(pair[0].charAt(0), pair[1]));\n                        } else {\n                            logger.warning(String.format(\"parse error in record #%s) tag %s: '%s'\", line.getRecordID(), line.getTag(), line.getRawContent()));\n                        }\n                    }\n                    marc4jRecord.addVariableField(df);\n                }\n            }\n        }\n        return marc4jRecord;\n    }\n\n    public static Record createRecordFromPica(List<PicaLine> lines, String idField, String idCode, PicaSchemaManager schema) {\n        Record marc4jRecord = new RecordImpl();\n        String id = null;\n        for (PicaLine line : lines) {\n            DataFieldImpl df = new DataFieldImpl(line.getQualifiedTag(), ' ', ' ');\n            for (PicaSubfield picaSubfield : line.getSubfields()) {\n                df.addSubfield(new SubfieldImpl(picaSubfield.getCode().charAt(0), picaSubfield.getValue()));\n                if (line.getTag().equals(idField) && picaSubfield.getCode().equals(idCode))\n                    id = picaSubfield.getValue();\n\n            }\n            marc4jRecord.addVariableField(df);\n        }\n        if (id != null)\n            marc4jRecord.addVariableField(new ControlFieldImpl(\"001\", id));\n\n        return marc4jRecord;\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport de.gwdg.metadataqa.api.json.JsonBranch;\n  private static List<String> extractList(JsonPathCache cache, JsonBranch branch) {\n  private static String extractFirst(JsonPathCache cache, JsonBranch branch) {\nwith the following error message:\n[ERROR] /qa-catalogue/src/main/java/de/gwdg/metadataqa/marc/MarcFactory.java:[3,35] cannot find symbol  symbol:   class JsonBranch\n  location: package de.gwdg.metadataqa.api.json\n[ERROR] /qa-catalogue/src/main/java/de/gwdg/metadataqa/marc/MarcFactory.java:[313,64] cannot find symbol  symbol:   class JsonBranch\n  location: class de.gwdg.metadataqa.marc.MarcFactory\n[ERROR] /qa-catalogue/src/main/java/de/gwdg/metadataqa/marc/MarcFactory.java:[322,59] cannot find symbol  symbol:   class JsonBranch\n  location: class de.gwdg.metadataqa.marc.MarcFactory\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\nde.gwdg.metadataqa.api.rule.logical.NotChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.pairchecker.DisjointChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.util.InstanceCounter.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.NumericValueChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.MinCountChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.json.JsonBranch | DELETION | TYPE_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.MaxCountChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.pairchecker.EqualityChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.logical.LogicalChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.EnumerationChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.MaxWordsChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.pairchecker.LessThanPairChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.uniqueness.UniquenessField.getJsonPath | DELETION | METHOD_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.HasValueChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.SingleFieldChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.calculator.LanguageCalculator.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.pairchecker.PropertyPairChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.ContentTypeChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.logical.OrChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.PatternChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.logical.AndChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.MinWordsChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.MinLengthChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.MaxLengthChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import de.gwdg.metadataqa.api.json.JsonBranch;\n  private static List<String> extractList(JsonPathCache cache, JsonBranch branch) {\n  private static String extractFirst(JsonPathCache cache, JsonBranch branch) {",
    "error_message": "[ERROR] /qa-catalogue/src/main/java/de/gwdg/metadataqa/marc/MarcFactory.java:[3,35] cannot find symbol  symbol:   class JsonBranch\n  location: package de.gwdg.metadataqa.api.json\n[ERROR] /qa-catalogue/src/main/java/de/gwdg/metadataqa/marc/MarcFactory.java:[313,64] cannot find symbol  symbol:   class JsonBranch\n  location: class de.gwdg.metadataqa.marc.MarcFactory\n[ERROR] /qa-catalogue/src/main/java/de/gwdg/metadataqa/marc/MarcFactory.java:[322,59] cannot find symbol  symbol:   class JsonBranch\n  location: class de.gwdg.metadataqa.marc.MarcFactory",
    "api_diff": "Format: element | nature | kind\nde.gwdg.metadataqa.api.rule.logical.NotChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.pairchecker.DisjointChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.util.InstanceCounter.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.NumericValueChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.MinCountChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.json.JsonBranch | DELETION | TYPE_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.MaxCountChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.pairchecker.EqualityChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.logical.LogicalChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.EnumerationChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.MaxWordsChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.pairchecker.LessThanPairChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.uniqueness.UniquenessField.getJsonPath | DELETION | METHOD_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.HasValueChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.SingleFieldChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.calculator.LanguageCalculator.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.pairchecker.PropertyPairChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.ContentTypeChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.logical.OrChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.PatternChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.logical.AndChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.MinWordsChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.MinLengthChecker.<init> | DELETION | CONSTRUCTOR_REMOVED\nde.gwdg.metadataqa.api.rule.singlefieldchecker.MaxLengthChecker.<init> | DELETION | CONSTRUCTOR_REMOVED",
    "original_code": "package de.gwdg.metadataqa.marc;\nimport ControlFieldImpl;\nimport DataFieldImpl;\nimport LeaderImpl;\nimport MarcSubfield;\nimport RecordImpl;\nimport SubfieldImpl;\nimport java.security.InvalidParameterException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.logging.Logger;\nimport org.marc4j.marc.DataField;\nimport var;\nimport de.gwdg.metadataqa.api.json.JsonBranch;\nimport de.gwdg.metadataqa.api.model.XmlFieldInstance;\nimport de.gwdg.metadataqa.api.model.pathcache.JsonPathCache;\nimport de.gwdg.metadataqa.api.schema.MarcJsonSchema;\nimport de.gwdg.metadataqa.api.schema.Schema;\nimport de.gwdg.metadataqa.marc.dao.Control001;\nimport de.gwdg.metadataqa.marc.dao.Control003;\nimport de.gwdg.metadataqa.marc.dao.Control005;\nimport de.gwdg.metadataqa.marc.dao.Control006;\nimport de.gwdg.metadataqa.marc.dao.Control007;\nimport de.gwdg.metadataqa.marc.dao.Control008;\nimport de.gwdg.metadataqa.marc.dao.DataField;\nimport de.gwdg.metadataqa.marc.dao.Leader;\nimport de.gwdg.metadataqa.marc.dao.record.BibliographicRecord;\nimport de.gwdg.metadataqa.marc.dao.record.Marc21Record;\nimport de.gwdg.metadataqa.marc.dao.record.PicaRecord;\nimport de.gwdg.metadataqa.marc.definition.MarcVersion;\nimport de.gwdg.metadataqa.marc.definition.TagDefinitionLoader;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.SubfieldDefinition;\nimport de.gwdg.metadataqa.marc.utils.MapToDatafield;\nimport de.gwdg.metadataqa.marc.utils.alephseq.AlephseqLine;\nimport de.gwdg.metadataqa.marc.utils.alephseq.MarcMakerLine;\nimport de.gwdg.metadataqa.marc.utils.alephseq.MarclineLine;\nimport de.gwdg.metadataqa.marc.utils.pica.PicaFieldDefinition;\nimport de.gwdg.metadataqa.marc.utils.pica.PicaLine;\nimport de.gwdg.metadataqa.marc.utils.pica.PicaSchemaManager;\nimport de.gwdg.metadataqa.marc.utils.pica.PicaSubfield;\nimport net.minidev.json.JSONArray;\nimport org.marc4j.marc.ControlField;\nimport org.marc4j.marc.Record;\nimport org.marc4j.marc.Subfield;\nimport org.marc4j.marc.impl.*;\npublic class MarcFactory {\n    private static final Logger logger = Logger.getLogger(MarcFactory.class.getCanonicalName());\n\n    private static final List<String> fixableControlFields = Arrays.asList(\"006\", \"007\", \"008\");\n\n    private static Schema schema = new MarcJsonSchema();\n\n    private MarcFactory() {\n        throw new IllegalStateException(\"This is a utility class, can not be instantiated\");\n    }\n\n    public static BibliographicRecord create(JsonPathCache cache) {\n        return create(cache, MarcVersion.MARC21);\n    }\n\n    public static BibliographicRecord create(JsonPathCache cache, MarcVersion version) {\n        var marcRecord = new Marc21Record();\n        for (JsonBranch branch : schema.getPaths()) {\n            if (branch.getParent() != null)\n                continue;\n\n            switch (branch.getLabel()) {\n                case \"leader\" :\n                    marcRecord.setLeader(new Leader(extractFirst(cache, branch)));\n                    break;\n                case \"001\" :\n                    marcRecord.setControl001(new Control001(extractFirst(cache, branch)));\n                    break;\n                case \"003\" :\n                    marcRecord.setControl003(new Control003(extractFirst(cache, branch)));\n                    break;\n                case \"005\" :\n                    marcRecord.setControl005(new Control005(extractFirst(cache, branch), marcRecord));\n                    break;\n                case \"006\" :\n                    marcRecord.setControl006(new Control006(extractFirst(cache, branch), marcRecord));\n                    break;\n                case \"007\" :\n                    marcRecord.setControl007(new Control007(extractFirst(cache, branch), marcRecord));\n                    break;\n                case \"008\" :\n                    marcRecord.setControl008(new Control008(extractFirst(cache, branch), marcRecord));\n                    break;\n                default :\n                    JSONArray fieldInstances = ((JSONArray) (cache.getFragment(branch.getJsonPath())));\n                    for (var fieldInsanceNr = 0; fieldInsanceNr < fieldInstances.size(); fieldInsanceNr++) {\n                        var fieldInstance = ((Map) (fieldInstances.get(fieldInsanceNr)));\n                        var field = MapToDatafield.parse(fieldInstance, version);\n                        if (field != null) {\n                            marcRecord.addDataField(field);\n                            field.setMarcRecord(marcRecord);\n                        } else {\n                            marcRecord.addUnhandledTags(branch.getLabel());\n                        }\n                    }\n                    break;\n            }\n        }\n        return marcRecord;\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord) {\n        return createFromMarc4j(marc4jRecord, null, MarcVersion.MARC21);\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord, Leader.Type defaultType) {\n        return createFromMarc4j(marc4jRecord, defaultType, MarcVersion.MARC21);\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord, MarcVersion marcVersion) {\n        return createFromMarc4j(marc4jRecord, null, marcVersion);\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord, Leader.Type defaultType, MarcVersion marcVersion) {\n        return createFromMarc4j(marc4jRecord, defaultType, marcVersion, null);\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord, Leader.Type defaultType, MarcVersion marcVersion, String replecementInControlFields) {\n        var marcRecord = new Marc21Record();\n        if (marc4jRecord.getLeader() != null) {\n            String data = marc4jRecord.getLeader().marshal();\n            if (replecementInControlFields != null)\n                data = data.replace(replecementInControlFields, \" \");\n\n            marcRecord.setLeader(new Leader(data, defaultType));\n            if (marcRecord.getType() == null) {\n                throw new InvalidParameterException(String.format(\"Error in '%s': no type has been detected. Leader: '%s'.\", marc4jRecord.getControlNumberField(), marcRecord.getLeader().getLeaderString()));\n            }\n        }\n        importMarc4jControlFields(marc4jRecord, marcRecord, replecementInControlFields);\n        importMarc4jDataFields(marc4jRecord, marcRecord, marcVersion);\n        return marcRecord;\n    }\n\n    public static BibliographicRecord createPicaFromMarc4j(Record marc4jRecord, PicaSchemaManager picaSchemaManager) {\n        var marcRecord = new PicaRecord();\n        importMarc4jControlFields(marc4jRecord, marcRecord, null);\n        importMarc4jDataFields(marc4jRecord, marcRecord, picaSchemaManager);\n        return marcRecord;\n    }\n\n    private static void importMarc4jControlFields(Record marc4jRecord, BibliographicRecord marcRecord, String replecementInControlFields) {\n        for (ControlField controlField : marc4jRecord.getControlFields()) {\n            String data = controlField.getData();\n            if ((replecementInControlFields != null) && isFixable(controlField.getTag()))\n                data = data.replace(replecementInControlFields, \" \");\n\n            switch (controlField.getTag()) {\n                case \"001\" :\n                    marcRecord.setControl001(new Control001(data));\n                    break;\n                case \"003\" :\n                    marcRecord.setControl003(new Control003(data));\n                    break;\n                case \"005\" :\n                    marcRecord.setControl005(new Control005(data, marcRecord));\n                    break;\n                case \"006\" :\n                    marcRecord.setControl006(new Control006(data, marcRecord));\n                    break;\n                case \"007\" :\n                    marcRecord.setControl007(new Control007(data, marcRecord));\n                    break;\n                case \"008\" :\n                    marcRecord.setControl008(new Control008(data, marcRecord));\n                    break;\n                default :\n                    break;\n            }\n        }\n    }\n\n    private static boolean isFixable(String tag) {\n        return fixableControlFields.contains(tag);\n    }\n\n    private static void importMarc4jDataFields(Record marc4jRecord, BibliographicRecord marcRecord, MarcVersion marcVersion) {\n        for (DataField dataField : marc4jRecord.getDataFields()) {\n            var definition = getDataFieldDefinition(dataField, marcVersion);\n            if (definition == null) {\n                marcRecord.addUnhandledTags(dataField.getTag());\n            }\n            var field = extractDataField(dataField, definition, marcVersion);\n            marcRecord.addDataField(field);\n        }\n    }\n\n    private static void importMarc4jDataFields(Record marc4jRecord, BibliographicRecord marcRecord, PicaSchemaManager schema) {\n        for (DataField dataField : marc4jRecord.getDataFields()) {\n            var definition = schema.lookup(dataField.getTag());\n            if (definition == null) {\n                marcRecord.addUnhandledTags(dataField.getTag());\n            }\n            var field = extractPicaDataField(dataField, definition, MarcVersion.MARC21);\n            marcRecord.addDataField(field);\n        }\n    }\n\n    public static DataFieldDefinition getDataFieldDefinition(DataField dataField, MarcVersion marcVersion) {\n        return getDataFieldDefinition(dataField.getTag(), marcVersion);\n    }\n\n    public static DataFieldDefinition getDataFieldDefinition(String tag, MarcVersion marcVersion) {\n        return TagDefinitionLoader.load(tag, marcVersion);\n    }\n\n    private static de.gwdg.metadataqa.marc.dao.DataField extractDataField(DataField dataField, DataFieldDefinition definition, MarcVersion marcVersion) {\n        de.gwdg.metadataqa.marc.dao.DataField field;\n        if (definition == null) {\n            field = new de.gwdg.metadataqa.marc.dao.DataField(dataField.getTag(), Character.toString(dataField.getIndicator1()), Character.toString(dataField.getIndicator2()), marcVersion);\n        } else {\n            field = new de.gwdg.metadataqa.marc.dao.DataField(definition, Character.toString(dataField.getIndicator1()), Character.toString(dataField.getIndicator2()));\n        }\n        for (Subfield subfield : dataField.getSubfields()) {\n            var code = Character.toString(subfield.getCode());\n            SubfieldDefinition subfieldDefinition = (definition == null) ? null : definition.getSubfield(code);\n            MarcSubfield marcSubfield = null;\n            if (subfieldDefinition == null) {\n                marcSubfield = new MarcSubfield(null, code, subfield.getData());\n            } else {\n                marcSubfield = new MarcSubfield(subfieldDefinition, code, subfield.getData());\n            }\n            marcSubfield.setField(field);\n            field.getSubfields().add(marcSubfield);\n        }\n        field.indexSubfields();\n        return field;\n    }\n\n    private static de.gwdg.metadataqa.marc.dao.DataField extractPicaDataField(DataField dataField, PicaFieldDefinition definition, MarcVersion marcVersion) {\n        de.gwdg.metadataqa.marc.dao.DataField field = null;\n        if (definition == null) {\n            field = new de.gwdg.metadataqa.marc.dao.DataField(dataField.getTag(), Character.toString(dataField.getIndicator1()), Character.toString(dataField.getIndicator2()), marcVersion);\n        } else {\n            field = new de.gwdg.metadataqa.marc.dao.DataField(definition, Character.toString(dataField.getIndicator1()), Character.toString(dataField.getIndicator2()));\n        }\n        for (Subfield subfield : dataField.getSubfields()) {\n            var code = Character.toString(subfield.getCode());\n            SubfieldDefinition subfieldDefinition = (definition == null) ? null : definition.getSubfield(code);\n            MarcSubfield marcSubfield = null;\n            if (subfieldDefinition == null) {\n                marcSubfield = new MarcSubfield(null, code, subfield.getData());\n            } else {\n                marcSubfield = new MarcSubfield(subfieldDefinition, code, subfield.getData());\n            }\n            marcSubfield.setField(field);\n            field.getSubfields().add(marcSubfield);\n        }\n        field.indexSubfields();\n        return field;\n    }\n\n    private static List<String> extractList(JsonPathCache cache, JsonBranch branch) {\n        List<XmlFieldInstance> instances = cache.get(branch.getJsonPath());\n        List<String> values = new ArrayList<>();\n        if (instances != null)\n            for (XmlFieldInstance instance : instances)\n                values.add(instance.getValue());\n\n\n        return values;\n    }\n\n    private static String extractFirst(JsonPathCache cache, JsonBranch branch) {\n        List<String> list = extractList(cache, branch);\n        if (!list.isEmpty())\n            return list.get(0);\n\n        return null;\n    }\n\n    public static BibliographicRecord createFromFormattedText(String marcRecordAsText) {\n        return createFromFormattedText(Arrays.asList(marcRecordAsText.split(\"\\n\")));\n    }\n\n    public static BibliographicRecord createFromFormattedText(String marcRecordAsText, MarcVersion marcVersion) {\n        return createFromFormattedText(Arrays.asList(marcRecordAsText.split(\"\\n\")), marcVersion);\n    }\n\n    public static BibliographicRecord createFromFormattedText(List<String> lines) {\n        return createFromFormattedText(lines, MarcVersion.MARC21);\n    }\n\n    public static BibliographicRecord createFromFormattedText(List<String> lines, MarcVersion marcVersion) {\n        if (marcVersion == null)\n            marcVersion = MarcVersion.MARC21;\n\n        var marcRecord = new Marc21Record();\n        for (String line : lines) {\n            if (line.startsWith(\"LEADER \")) {\n                marcRecord.setLeader(line.replace(\"LEADER \", \"\"), marcVersion);\n            } else {\n                var tag = line.substring(0, 3);\n                var content = line.substring(4);\n                marcRecord.setField(tag, content, marcVersion);\n            }\n        }\n        return marcRecord;\n    }\n\n    public static BibliographicRecord createFromAlephseq(List<AlephseqLine> lines, MarcVersion marcVersion) {\n        if (marcVersion == null)\n            marcVersion = MarcVersion.MARC21;\n\n        var marcRecord = new Marc21Record();\n        for (AlephseqLine line : lines) {\n            if (line.isLeader()) {\n                marcRecord.setLeader(line.getContent());\n            } else if (line.isNumericTag()) {\n                marcRecord.setField(line.getTag(), line.getInd1(), line.getInd2(), line.getContent(), marcVersion);\n            }\n        }\n        return marcRecord;\n    }\n\n    public static Record createRecordFromAlephseq(List<AlephseqLine> lines) {\n        Record marc4jRecord = new RecordImpl();\n        for (AlephseqLine line : lines) {\n            if (line.isLeader()) {\n                marc4jRecord.setLeader(new LeaderImpl(line.getContent()));\n            } else if (line.isNumericTag()) {\n                if (line.isControlField()) {\n                    marc4jRecord.addVariableField(new ControlFieldImpl(line.getTag(), line.getContent()));\n                } else {\n                    var df = new DataFieldImpl(line.getTag(), line.getInd1().charAt(0), line.getInd2().charAt(0));\n                    for (String[] pair : line.parseSubfields()) {\n                        if (((pair.length == 2) && (pair[0] != null)) && (pair[1] != null)) {\n                            df.addSubfield(new SubfieldImpl(pair[0].charAt(0), pair[1]));\n                        } else {\n                            logger.warning(String.format(\"parse error in record #%s) tag %s: '%s'\", line.getRecordID(), line.getTag(), line.getRawContent()));\n                        }\n                    }\n                    marc4jRecord.addVariableField(df);\n                }\n            }\n        }\n        return marc4jRecord;\n    }\n\n    public static Record createRecordFromMarcline(List<MarclineLine> lines) {\n        Record marc4jRecord = new RecordImpl();\n        for (MarclineLine line : lines) {\n            if (line.isLeader()) {\n                try {\n                    marc4jRecord.setLeader(new LeaderImpl(line.getContent()));\n                } catch (StringIndexOutOfBoundsException e) {\n                    logger.severe(\"Error at creating leader: \" + e.getMessage());\n                }\n            } else if (line.isNumericTag()) {\n                if (line.isControlField()) {\n                    marc4jRecord.addVariableField(new ControlFieldImpl(line.getTag(), line.getContent()));\n                } else {\n                    var df = new DataFieldImpl(line.getTag(), line.getInd1().charAt(0), line.getInd2().charAt(0));\n                    for (String[] pair : line.parseSubfields()) {\n                        if (((pair.length == 2) && (pair[0] != null)) && (pair[1] != null)) {\n                            df.addSubfield(new SubfieldImpl(pair[0].charAt(0), pair[1]));\n                        } else {\n                            logger.warning(String.format(\"parse error in record #%s) tag %s: '%s'\", line.getRecordID(), line.getTag(), line.getRawContent()));\n                        }\n                    }\n                    marc4jRecord.addVariableField(df);\n                }\n            }\n        }\n        return marc4jRecord;\n    }\n\n    public static Record createRecordFromMarcMaker(List<MarcMakerLine> lines) {\n        Record marc4jRecord = new RecordImpl();\n        for (MarcMakerLine line : lines) {\n            if (line.isLeader()) {\n                try {\n                    marc4jRecord.setLeader(new LeaderImpl(line.getContent()));\n                } catch (StringIndexOutOfBoundsException e) {\n                    logger.severe(\"Error at creating leader: \" + e.getMessage());\n                }\n            } else if (line.isNumericTag()) {\n                if (line.isControlField()) {\n                    marc4jRecord.addVariableField(new ControlFieldImpl(line.getTag(), line.getContent()));\n                } else {\n                    var df = new DataFieldImpl(line.getTag(), line.getInd1().charAt(0), line.getInd2().charAt(0));\n                    for (String[] pair : line.parseSubfields()) {\n                        if (((pair.length == 2) && (pair[0] != null)) && (pair[1] != null)) {\n                            df.addSubfield(new SubfieldImpl(pair[0].charAt(0), pair[1]));\n                        } else {\n                            logger.warning(String.format(\"parse error in record #%s) tag %s: '%s'\", line.getRecordID(), line.getTag(), line.getRawContent()));\n                        }\n                    }\n                    marc4jRecord.addVariableField(df);\n                }\n            }\n        }\n        return marc4jRecord;\n    }\n\n    public static Record createRecordFromPica(List<PicaLine> lines, String idField, String idCode, PicaSchemaManager schema) {\n        Record marc4jRecord = new RecordImpl();\n        String id = null;\n        for (PicaLine line : lines) {\n            DataFieldImpl df = new DataFieldImpl(line.getQualifiedTag(), ' ', ' ');\n            for (PicaSubfield picaSubfield : line.getSubfields()) {\n                df.addSubfield(new SubfieldImpl(picaSubfield.getCode().charAt(0), picaSubfield.getValue()));\n                if (line.getTag().equals(idField) && picaSubfield.getCode().equals(idCode))\n                    id = picaSubfield.getValue();\n\n            }\n            marc4jRecord.addVariableField(df);\n        }\n        if (id != null)\n            marc4jRecord.addVariableField(new ControlFieldImpl(\"001\", id));\n\n        return marc4jRecord;\n    }\n}\n",
    "project": "qa-catalogue",
    "libraryName": "metadata-qa-api",
    "libraryGroupID": "de.gwdg.metadataqa",
    "newVersion": "0.9.0",
    "previousVersion": "0.8.1",
    "breakingCommit": "43c824a24b09efd8b4b00449ce31cd121a6b23eb",
    "patch": "```java\npackage de.gwdg.metadataqa.marc;\n\nimport ControlFieldImpl;\nimport DataFieldImpl;\nimport LeaderImpl;\nimport MarcSubfield;\nimport RecordImpl;\nimport SubfieldImpl;\nimport java.security.InvalidParameterException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.logging.Logger;\nimport org.marc4j.marc.DataField;\nimport var;\nimport de.gwdg.metadataqa.api.json.JsonBranch;\nimport de.gwdg.metadataqa.api.model.XmlFieldInstance;\nimport de.gwdg.metadataqa.api.model.pathcache.JsonPathCache;\nimport de.gwdg.metadataqa.api.schema.MarcJsonSchema;\nimport de.gwdg.metadataqa.api.schema.Schema;\nimport de.gwdg.metadataqa.marc.dao.Control001;\nimport de.gwdg.metadataqa.marc.dao.Control003;\nimport de.gwdg.metadataqa.marc.dao.Control005;\nimport de.gwdg.metadataqa.marc.dao.Control006;\nimport de.gwdg.metadataqa.marc.dao.Control007;\nimport de.gwdg.metadataqa.marc.dao.Control008;\nimport de.gwdg.metadataqa.marc.dao.DataField;\nimport de.gwdg.metadataqa.marc.dao.Leader;\nimport de.gwdg.metadataqa.marc.dao.record.BibliographicRecord;\nimport de.gwdg.metadataqa.marc.dao.record.Marc21Record;\nimport de.gwdg.metadataqa.marc.dao.record.PicaRecord;\nimport de.gwdg.metadataqa.marc.definition.MarcVersion;\nimport de.gwdg.metadataqa.marc.definition.TagDefinitionLoader;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.SubfieldDefinition;\nimport de.gwdg.metadataqa.marc.utils.MapToDatafield;\nimport de.gwdg.metadataqa.marc.utils.alephseq.AlephseqLine;\nimport de.gwdg.metadataqa.marc.utils.alephseq.MarcMakerLine;\nimport de.gwdg.metadataqa.marc.utils.alephseq.MarclineLine;\nimport de.gwdg.metadataqa.marc.utils.pica.PicaFieldDefinition;\nimport de.gwdg.metadataqa.marc.utils.pica.PicaLine;\nimport de.gwdg.metadataqa.marc.utils.pica.PicaSchemaManager;\nimport de.gwdg.metadataqa.marc.utils.pica.PicaSubfield;\nimport net.minidev.json.JSONArray;\nimport org.marc4j.marc.ControlField;\nimport org.marc4j.marc.Record;\nimport org.marc4j.marc.Subfield;\nimport org.marc4j.marc.impl.*;\n\npublic class MarcFactory {\n    private static final Logger logger = Logger.getLogger(MarcFactory.class.getCanonicalName());\n\n    private static final List<String> fixableControlFields = Arrays.asList(\"006\", \"007\", \"008\");\n\n    private static Schema schema = new MarcJsonSchema();\n\n    private MarcFactory() {\n        throw new IllegalStateException(\"This is a utility class, can not be instantiated\");\n    }\n\n    public static BibliographicRecord create(JsonPathCache cache) {\n        return create(cache, MarcVersion.MARC21);\n    }\n\n    public static BibliographicRecord create(JsonPathCache cache, MarcVersion version) {\n        var marcRecord = new Marc21Record();\n        for (JsonBranch branch : schema.getPaths()) {\n            if (branch.getParent() != null)\n                continue;\n\n            switch (branch.getLabel()) {\n                case \"leader\" :\n                    marcRecord.setLeader(new Leader(extractFirst(cache, branch)));\n                    break;\n                case \"001\" :\n                    marcRecord.setControl001(new Control001(extractFirst(cache, branch)));\n                    break;\n                case \"003\" :\n                    marcRecord.setControl003(new Control003(extractFirst(cache, branch)));\n                    break;\n                case \"005\" :\n                    marcRecord.setControl005(new Control005(extractFirst(cache, branch), marcRecord));\n                    break;\n                case \"006\" :\n                    marcRecord.setControl006(new Control006(extractFirst(cache, branch), marcRecord));\n                    break;\n                case \"007\" :\n                    marcRecord.setControl007(new Control007(extractFirst(cache, branch), marcRecord));\n                    break;\n                case \"008\" :\n                    marcRecord.setControl008(new Control008(extractFirst(cache, branch), marcRecord));\n                    break;\n                default :\n                    JSONArray fieldInstances = ((JSONArray) (cache.getFragment(branch.getJsonPath())));\n                    for (var fieldInsanceNr = 0; fieldInsanceNr < fieldInstances.size(); fieldInsanceNr++) {\n                        var fieldInstance = ((Map) (fieldInstances.get(fieldInsanceNr)));\n                        var field = MapToDatafield.parse(fieldInstance, version);\n                        if (field != null) {\n                            marcRecord.addDataField(field);\n                            field.setMarcRecord(marcRecord);\n                        } else {\n                            marcRecord.addUnhandledTags(branch.getLabel());\n                        }\n                    }\n                    break;\n            }\n        }\n        return marcRecord;\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord) {\n        return createFromMarc4j(marc4jRecord, null, MarcVersion.MARC21);\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord, Leader.Type defaultType) {\n        return createFromMarc4j(marc4jRecord, defaultType, MarcVersion.MARC21);\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord, MarcVersion marcVersion) {\n        return createFromMarc4j(marc4jRecord, null, marcVersion);\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord, Leader.Type defaultType, MarcVersion marcVersion) {\n        return createFromMarc4j(marc4jRecord, defaultType, marcVersion, null);\n    }\n\n    public static BibliographicRecord createFromMarc4j(Record marc4jRecord, Leader.Type defaultType, MarcVersion marcVersion, String replecementInControlFields) {\n        var marcRecord = new Marc21Record();\n        if (marc4jRecord.getLeader() != null) {\n            String data = marc4jRecord.getLeader().marshal();\n            if (replecementInControlFields != null)\n                data = data.replace(replecementInControlFields, \" \");\n\n            marcRecord.setLeader(new Leader(data, defaultType));\n            if (marcRecord.getType() == null) {\n                throw new InvalidParameterException(String.format(\"Error in '%s': no type has been detected. Leader: '%s'.\", marc4jRecord.getControlNumberField(), marcRecord.getLeader().getLeaderString()));\n            }\n        }\n        importMarc4jControlFields(marc4jRecord, marcRecord, replecementInControlFields);\n        importMarc4jDataFields(marc4jRecord, marcRecord, marcVersion);\n        return marcRecord;\n    }\n\n    public static BibliographicRecord createFromAlephseq(List<AlephseqLine> lines, MarcVersion marcVersion) {\n        return createFromAlephseq(lines, MarcVersion.MARC21);\n    }\n\n    public static Record createRecordFromAlephseq(List<AlephseqLine> lines) {\n        Record marc4jRecord = new RecordImpl();\n        for (AlephseqLine line : lines) {\n            if (line.isLeader()) {\n                try {\n                    marc4jRecord.setLeader(new LeaderImpl(line.getContent()));\n                } catch (StringIndexOutOfBoundsException e) {\n                    logger.severe(\"Error at creating leader: \" + e.getMessage());\n                }\n            } else if (line.isNumericTag()) {\n                if (line.isControlField()) {\n                    marc4jRecord.addVariableField(new ControlFieldImpl(line.getTag(), line.getContent()));\n                } else {\n                    var df = new DataFieldImpl(line.getTag(), line.getInd1().charAt(0), line.getInd2().charAt(0));\n                    for (String[] pair : line.parseSubfields()) {\n                        if (((pair.length == 2) && (pair[0] != null)) && (pair[1] != null)) {\n                            df.addSubfield(new SubfieldImpl(pair[0].charAt(0), pair[1]));\n                        } else {\n                            logger.warning(String.format(\"parse error in record #%s) tag %s: '%s'\", line.getRecordID(), line.getTag(), line.getRawContent()));\n                        }\n                    }\n                    marc4jRecord.addVariableField(df);\n                }\n            }\n        }\n        return marc4jRecord;\n    }\n\n    public static Record createRecordFromMarcline(List<MarclineLine> lines) {\n        Record marc4jRecord = new RecordImpl();\n        for (MarclineLine line : lines) {\n            if (line.isLeader()) {\n                try {\n                    marc4jRecord.setLeader(new LeaderImpl(line.getContent()));\n                } catch (StringIndexOutOfBoundsException e) {\n                    logger.severe(\"Error at creating leader: \" + e.getMessage());\n                }\n            } else if (line.isNumericTag()) {\n                if (line.isControlField()) {\n                    marc4jRecord.addVariableField(new ControlFieldImpl(line.getTag(), line.getContent()));\n                } else {\n                    var df = new DataFieldImpl(line.getTag(), line.getInd1().charAt(0), line.getInd2().charAt(0));\n                    for (String[] pair : line.parseSubfields()) {\n                        if (((pair.length == 2) && (pair[0] != null)) && (pair[1] != null)) {\n                            df.addSubfield(new SubfieldImpl(pair[0].charAt(0), pair[1]));\n                        } else {\n                            logger.warning(String.format(\"parse error in record #%s) tag %s: '%s'\", line.getRecordID(), line.getTag(), line.getRawContent()));\n                        }\n                    }\n                    marc4jRecord.addVariableField(df);\n                }\n            }\n        }\n        return marc4jRecord;\n    }\n\n    public static Record createRecordFromMarcMaker(List<MarcMakerLine> lines) {\n        Record marc4jRecord = new RecordImpl();\n        for (MarcMakerLine line : lines) {\n            if (line.isLeader()) {\n                try {\n                    marc4jRecord.setLeader(new LeaderImpl(line.getContent()));\n                } catch (StringIndexOutOfBoundsException e) {\n                    logger.severe(\"Error at creating leader: \" + e.getMessage());\n                }\n            } else if (line.isNumericTag()) {\n                if (line.isControlField()) {\n                    marc4jRecord.addVariableField(new ControlFieldImpl(line.getTag(), line.getContent()));\n                } else {\n                    var df = new DataFieldImpl(line.getTag(), line.getInd1().charAt(0), line.getInd2().charAt(0));\n                    for (String[] pair : line.parseSubfields()) {\n                        if (((pair.length == 2) && (pair[0] != null)) && (pair[1] != null)) {\n                            df.addSubfield(new SubfieldImpl(pair[0].charAt(0), pair[1]));\n                        } else {\n                            logger.warning(String.format(\"parse error in record #%s) tag %s: '%s'\", line.getRecordID(), line.getTag(), line.getRawContent()));\n                        }\n                    }\n                    marc4jRecord.addVariableField(df);\n                }\n            }\n        }\n        return marc4jRecord;\n    }\n\n    private static void importMarc4jControlFields(Record marc4jRecord, BibliographicRecord marcRecord, String replecementInControlFields) {\n        for (ControlField controlField : marc4jRecord.getControlFields()) {\n            String data = controlField.getData();\n            if ((replecementInControlFields != null) && isFixable(controlField.getTag()))\n                data = data.replace(replecementInControlFields, \" \");\n\n            switch (controlField.getTag()) {\n                case \"001\" :\n                    marcRecord.setControl001(new Control001(data));\n                    break;\n                case \"003\" :\n                    marcRecord.setControl003(new Control003(data));\n                    break;\n                case \"005\" :\n                    marcRecord.setControl005(new Control005(data, marcRecord));\n                    break;\n                case \"006\" :\n                    marcRecord.setControl006(new Control006(data, marcRecord));\n                    break;\n                case \"007\" :\n                    marcRecord.setControl007(new Control007(data, marcRecord));\n                    break;\n                case \"008\" :\n                    marcRecord.setControl008(new Control008(data, marcRecord));\n                    break;\n                default :\n                    break;\n            }\n        }\n    }\n\n    private static boolean isFixable(String tag) {\n        return fixableControlFields.contains(tag);\n    }\n\n    private static void importMarc4jDataFields(Record marc4jRecord, BibliographicRecord marcRecord, MarcVersion marcVersion) {\n        for (DataField dataField : marc4jRecord.getDataFields()) {\n            var definition = getDataFieldDefinition(dataField, marcVersion);\n            if (definition == null) {\n                marcRecord.addUnhandledTags(dataField.getTag());\n            }\n            var field = extractDataField(dataField, definition, marcVersion);\n            marcRecord.addDataField(field);\n        }\n    }\n\n    private static void importMarc4jDataFields(Record marc4jRecord, BibliographicRecord marcRecord, PicaSchemaManager schema) {\n        for (DataField dataField : marc4jRecord.getDataFields()) {\n            var definition = schema.lookup(dataField.getTag());\n            if (definition == null) {\n                marcRecord.addUnhandledTags(dataField.getTag());\n            }\n            var field = extractPicaDataField(dataField, definition, MarcVersion.MARC21);\n            marcRecord.addDataField(field);\n        }\n    }\n\n    public static DataFieldDefinition getDataFieldDefinition(DataField dataField, MarcVersion marcVersion) {\n        return getDataFieldDefinition(dataField.getTag(), marcVersion);\n    }\n\n    public static DataFieldDefinition getDataFieldDefinition(String tag, MarcVersion marcVersion) {\n        return TagDefinitionLoader.load(tag, marcVersion);\n    }\n\n    private static de.gwdg.metadataqa.marc.dao.DataField extractDataField(DataField dataField, DataFieldDefinition definition, MarcVersion marcVersion) {\n        de.gwdg.metadataqa.marc.dao.DataField field;\n        if (definition == null) {\n            field = new de.gwdg.metadataqa.marc.dao.DataField(dataField.getTag(), Character.toString(dataField.getIndicator1()), Character.toString(dataField.getIndicator2()), marcVersion);\n        } else {\n            field = new de.gwdg.metadataqa.marc.dao.DataField(definition, Character.toString(dataField.getIndicator1()), Character.toString(dataField.getIndicator2()));\n        }\n        for (Subfield subfield : dataField.getSubfields()) {\n            var code = Character.toString(subfield.getCode());\n            SubfieldDefinition subfieldDefinition = (definition == null) ? null : definition.getSubfield(code);\n            MarcSubfield marcSubfield = null;\n            if (subfieldDefinition == null) {\n                marcSubfield = new MarcSubfield(null, code, subfield.getData());\n            } else {\n                marcSubfield = new MarcSubfield(subfieldDefinition, code, subfield.getData());\n            }\n            marcSubfield.setField(field);\n            field.getSubfields().add(marcSubfield);\n        }\n        field.indexSubfields();\n        return field;\n    }\n\n    private static de.gwdg.metadataqa.marc.dao.DataField extractPicaDataField(DataField dataField, PicaFieldDefinition definition, MarcVersion marcVersion) {\n        de.gwdg.metadataqa.marc.dao.DataField field = null;\n        if (definition == null) {\n            field = new de.gwdg.metadataqa.marc.dao.DataField(dataField.getTag(), Character.toString(dataField.getIndicator1()), Character.toString(dataField.getIndicator2()), marcVersion);\n        } else {\n            field = new de.gwdg.metadataqa.marc.dao.DataField(definition, Character.toString(dataField.getIndicator1()), Character.toString(dataField.getIndicator2()));\n        }\n        for (Subfield subfield : dataField.getSubfields()) {\n            var code = Character.toString(subfield.getCode());\n            SubfieldDefinition subfieldDefinition = (definition == null) ? null : definition.getSubfield(code);\n            MarcSubfield marcSubfield = null;\n            if (subfieldDefinition == null) {\n                marcSubfield = new MarcSubfield(null, code, subfield.getData());\n            } else {\n                marcSubfield = new MarcSubfield(subfieldDefinition, code, subfield.getData());\n            }\n            marcSubfield.setField(field);\n            field.getSubfields().add(marcSubfield);\n        }\n        field.indexSubfields();\n        return field;\n    }\n}\n```<end_of_turn>"
}