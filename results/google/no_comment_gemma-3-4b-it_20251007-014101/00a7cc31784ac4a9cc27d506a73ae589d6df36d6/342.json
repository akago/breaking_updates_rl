{
    "absolute_path_to_file_in_container": "/quickfixj/quickfixj-core/src/main/java/quickfix/mina/initiator/IoSessionInitiator.java",
    "errors": [
        {
            "line_number": 195,
            "message": "[ERROR] /quickfixj/quickfixj-core/src/main/java/quickfix/mina/initiator/IoSessionInitiator.java:[195,22] cannot find symbol",
            "additional_info": "  symbol:   method setUseClientMode(boolean)\n  location: variable sslFilter of type quickfix.mina.ssl.SSLFilter",
            "file_name": "IoSessionInitiator.java",
            "uid": "9dd8ffe4-0414-5d34-b786-1db71c988186"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: mina-core 2.1.5->2.2.1\n\nthe following client code fails: \n'''java\npackage quickfix.mina.initiator;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.security.GeneralSecurityException;\nimport java.util.Arrays;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport javax.net.ssl.SSLContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.mina.core.filterchain.IoFilterChainBuilder;\nimport org.apache.mina.core.future.ConnectFuture;\nimport org.apache.mina.core.service.IoConnector;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport org.apache.mina.proxy.ProxyConnector;\nimport org.apache.mina.transport.socket.SocketConnector;\nimport quickfix.ConfigError;\nimport quickfix.LogUtil;\nimport quickfix.Session;\nimport quickfix.SessionID;\nimport quickfix.SessionSettings;\nimport quickfix.SystemTime;\nimport quickfix.mina.CompositeIoFilterChainBuilder;\nimport quickfix.mina.EventHandlingStrategy;\nimport quickfix.mina.NetworkingOptions;\nimport quickfix.mina.ProtocolFactory;\nimport quickfix.mina.SessionConnector;\nimport quickfix.mina.message.FIXProtocolCodecFactory;\nimport quickfix.mina.ssl.SSLConfig;\nimport quickfix.mina.ssl.SSLContextFactory;\nimport quickfix.mina.ssl.SSLFilter;\nimport quickfix.mina.ssl.SSLSupport;\npublic class IoSessionInitiator {\n    private static final long CONNECT_POLL_TIMEOUT = 2000L;\n\n    private final ScheduledExecutorService executor;\n\n    private final ConnectTask reconnectTask;\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n\n    private Future<?> reconnectFuture;\n\n    public IoSessionInitiator(Session fixSession, SocketAddress[] socketAddresses, SocketAddress localAddress, int[] reconnectIntervalInSeconds, ScheduledExecutorService executor, SessionSettings sessionSettings, NetworkingOptions networkingOptions, EventHandlingStrategy eventHandlingStrategy, IoFilterChainBuilder userIoFilterChainBuilder, boolean sslEnabled, SSLConfig sslConfig, String proxyType, String proxyVersion, String proxyHost, int proxyPort, String proxyUser, String proxyPassword, String proxyDomain, String proxyWorkstation) throws ConfigError {\n        this.executor = executor;\n        final long[] reconnectIntervalInMillis = new long[reconnectIntervalInSeconds.length];\n        for (int ii = 0; ii != reconnectIntervalInSeconds.length; ++ii) {\n            reconnectIntervalInMillis[ii] = reconnectIntervalInSeconds[ii] * 1000L;\n        }\n        try {\n            reconnectTask = new ConnectTask(sslEnabled, socketAddresses, localAddress, userIoFilterChainBuilder, fixSession, reconnectIntervalInMillis, sessionSettings, networkingOptions, eventHandlingStrategy, sslConfig, proxyType, proxyVersion, proxyHost, proxyPort, proxyUser, proxyPassword, proxyDomain, proxyWorkstation, log);\n        } catch (GeneralSecurityException e) {\n            throw new ConfigError(e);\n        }\n        fixSession.getLog().onEvent(\"Configured socket addresses for session: \" + Arrays.asList(socketAddresses));\n    }\n\n    private static class ConnectTask implements Runnable {\n        private final boolean sslEnabled;\n\n        private final SocketAddress[] socketAddresses;\n\n        private final SocketAddress localAddress;\n\n        private final IoFilterChainBuilder userIoFilterChainBuilder;\n\n        private IoConnector ioConnector;\n\n        private final Session fixSession;\n\n        private final long[] reconnectIntervalInMillis;\n\n        private final SessionSettings sessionSettings;\n\n        private final NetworkingOptions networkingOptions;\n\n        private final EventHandlingStrategy eventHandlingStrategy;\n\n        private final SSLConfig sslConfig;\n\n        private final Logger log;\n\n        private IoSession ioSession;\n\n        private long lastReconnectAttemptTime;\n\n        private long lastConnectTime;\n\n        private int nextSocketAddressIndex;\n\n        private int connectionFailureCount;\n\n        private ConnectFuture connectFuture;\n\n        private final String proxyType;\n\n        private final String proxyVersion;\n\n        private final String proxyHost;\n\n        private final int proxyPort;\n\n        private final String proxyUser;\n\n        private final String proxyPassword;\n\n        private final String proxyDomain;\n\n        private final String proxyWorkstation;\n\n        public ConnectTask(boolean sslEnabled, SocketAddress[] socketAddresses, SocketAddress localAddress, IoFilterChainBuilder userIoFilterChainBuilder, Session fixSession, long[] reconnectIntervalInMillis, SessionSettings sessionSettings, NetworkingOptions networkingOptions, EventHandlingStrategy eventHandlingStrategy, SSLConfig sslConfig, String proxyType, String proxyVersion, String proxyHost, int proxyPort, String proxyUser, String proxyPassword, String proxyDomain, String proxyWorkstation, Logger log) throws ConfigError, GeneralSecurityException {\n            this.sslEnabled = sslEnabled;\n            this.socketAddresses = socketAddresses;\n            this.localAddress = localAddress;\n            this.userIoFilterChainBuilder = userIoFilterChainBuilder;\n            this.fixSession = fixSession;\n            this.reconnectIntervalInMillis = reconnectIntervalInMillis;\n            this.sessionSettings = sessionSettings;\n            this.networkingOptions = networkingOptions;\n            this.eventHandlingStrategy = eventHandlingStrategy;\n            this.sslConfig = sslConfig;\n            this.log = log;\n            this.proxyType = proxyType;\n            this.proxyVersion = proxyVersion;\n            this.proxyHost = proxyHost;\n            this.proxyPort = proxyPort;\n            this.proxyUser = proxyUser;\n            this.proxyPassword = proxyPassword;\n            this.proxyDomain = proxyDomain;\n            this.proxyWorkstation = proxyWorkstation;\n            setupIoConnector();\n        }\n\n        private void setupIoConnector() throws ConfigError, GeneralSecurityException {\n            final CompositeIoFilterChainBuilder ioFilterChainBuilder = new CompositeIoFilterChainBuilder(userIoFilterChainBuilder);\n            boolean hasProxy = ((proxyType != null) && (proxyPort > 0)) && (socketAddresses[nextSocketAddressIndex] instanceof InetSocketAddress);\n            SSLFilter sslFilter = null;\n            if (sslEnabled) {\n                sslFilter = installSslFilter(ioFilterChainBuilder, !hasProxy);\n            }\n            ioFilterChainBuilder.addLast(FIXProtocolCodecFactory.FILTER_NAME, new ProtocolCodecFilter(new FIXProtocolCodecFactory()));\n            IoConnector newConnector;\n            newConnector = ProtocolFactory.createIoConnector(socketAddresses[nextSocketAddressIndex]);\n            networkingOptions.apply(newConnector);\n            newConnector.setHandler(new InitiatorIoHandler(fixSession, sessionSettings, networkingOptions, eventHandlingStrategy));\n            newConnector.setFilterChainBuilder(ioFilterChainBuilder);\n            if (hasProxy) {\n                ProxyConnector proxyConnector = ProtocolFactory.createIoProxyConnector(((SocketConnector) (newConnector)), ((InetSocketAddress) (socketAddresses[nextSocketAddressIndex])), new InetSocketAddress(proxyHost, proxyPort), proxyType, proxyVersion, proxyUser, proxyPassword, proxyDomain, proxyWorkstation);\n                proxyConnector.setHandler(new InitiatorProxyIoHandler(new InitiatorIoHandler(fixSession, sessionSettings, networkingOptions, eventHandlingStrategy), sslFilter));\n                newConnector = proxyConnector;\n            }\n            if (ioConnector != null) {\n                SessionConnector.closeManagedSessionsAndDispose(ioConnector, true, log);\n            }\n            ioConnector = newConnector;\n        }\n\n        private SSLFilter installSslFilter(CompositeIoFilterChainBuilder ioFilterChainBuilder, boolean autoStart) throws GeneralSecurityException {\n            final SSLContext sslContext = SSLContextFactory.getInstance(sslConfig);\n            final SSLFilter sslFilter = new SSLFilter(sslContext, autoStart);\n            sslFilter.setUseClientMode(true);\n            sslFilter.setCipherSuites(sslConfig.getEnabledCipherSuites() != null ? sslConfig.getEnabledCipherSuites() : SSLSupport.getDefaultCipherSuites(sslContext));\n            sslFilter.setEnabledProtocols(sslConfig.getEnabledProtocols() != null ? sslConfig.getEnabledProtocols() : SSLSupport.getSupportedProtocols(sslContext));\n            sslFilter.setUseSNI(sslConfig.isUseSNI());\n            ioFilterChainBuilder.addLast(SSLSupport.FILTER_NAME, sslFilter);\n            return sslFilter;\n        }\n\n        @Override\n        public void run() {\n            resetIoConnector();\n            try {\n                if (connectFuture == null) {\n                    if (shouldReconnect()) {\n                        connect();\n                    }\n                } else {\n                    pollConnectFuture();\n                }\n            } catch (Throwable e) {\n                LogUtil.logThrowable(fixSession.getLog(), \"Exception during ConnectTask run\", e);\n            }\n        }\n\n        private void connect() {\n            try {\n                lastReconnectAttemptTime = SystemTime.currentTimeMillis();\n                SocketAddress nextSocketAddress = getNextSocketAddress();\n                if (localAddress == null) {\n                    connectFuture = ioConnector.connect(nextSocketAddress);\n                } else {\n                    connectFuture = ioConnector.connect(nextSocketAddress, localAddress);\n                }\n                pollConnectFuture();\n            } catch (Throwable e) {\n                handleConnectException(e);\n            }\n        }\n\n        private void pollConnectFuture() {\n            try {\n                connectFuture.awaitUninterruptibly(CONNECT_POLL_TIMEOUT);\n                if (connectFuture.getSession() != null) {\n                    ioSession = connectFuture.getSession();\n                    connectionFailureCount = 0;\n                    nextSocketAddressIndex = 0;\n                    lastConnectTime = System.currentTimeMillis();\n                    connectFuture = null;\n                } else {\n                    fixSession.getLog().onEvent((\"Pending connection not established after \" + (System.currentTimeMillis() - lastReconnectAttemptTime)) + \" ms.\");\n                }\n            } catch (Throwable e) {\n                handleConnectException(e);\n            }\n        }\n\n        private void handleConnectException(Throwable e) {\n            ++connectionFailureCount;\n            SocketAddress socketAddress = socketAddresses[getCurrentSocketAddressIndex()];\n            while (e.getCause() != null) {\n                e = e.getCause();\n            } \n            final String nextRetryMsg = (\" (Next retry in \" + computeNextRetryConnectDelay()) + \" milliseconds)\";\n            if (e instanceof IOException) {\n                fixSession.getLog().onErrorEvent(((((e.getClass().getName() + \" during connection to \") + socketAddress) + \": \") + e) + nextRetryMsg);\n                fixSession.getStateListener().onConnectException(fixSession.getSessionID(), ((IOException) (e)));\n            } else {\n                LogUtil.logThrowable(fixSession.getLog(), (\"Exception during connection to \" + socketAddress) + nextRetryMsg, e);\n                fixSession.getStateListener().onConnectException(fixSession.getSessionID(), new Exception(e));\n            }\n            connectFuture = null;\n        }\n\n        private SocketAddress getNextSocketAddress() {\n            SocketAddress socketAddress = socketAddresses[nextSocketAddressIndex];\n            if (socketAddress instanceof InetSocketAddress) {\n                InetSocketAddress inetAddr = ((InetSocketAddress) (socketAddress));\n                socketAddress = new InetSocketAddress(inetAddr.getHostName(), inetAddr.getPort());\n                socketAddresses[nextSocketAddressIndex] = socketAddress;\n            }\n            nextSocketAddressIndex = (nextSocketAddressIndex + 1) % socketAddresses.length;\n            return socketAddress;\n        }\n\n        private int getCurrentSocketAddressIndex() {\n            return ((nextSocketAddressIndex + socketAddresses.length) - 1) % socketAddresses.length;\n        }\n\n        private boolean shouldReconnect() {\n            return (((ioSession == null) || (!ioSession.isConnected())) && isTimeForReconnect()) && (fixSession.isEnabled() && fixSession.isSessionTime());\n        }\n\n        private long computeNextRetryConnectDelay() {\n            int index = connectionFailureCount - 1;\n            if (index < 0)\n                index = 0;\n\n            long millis;\n            if (index >= reconnectIntervalInMillis.length) {\n                millis = reconnectIntervalInMillis[reconnectIntervalInMillis.length - 1];\n            } else {\n                millis = reconnectIntervalInMillis[index];\n            }\n            return millis;\n        }\n\n        private boolean isTimeForReconnect() {\n            return (SystemTime.currentTimeMillis() - lastReconnectAttemptTime) >= computeNextRetryConnectDelay();\n        }\n\n        @SuppressWarnings(\"unused\")\n        public synchronized int getConnectionFailureCount() {\n            return connectionFailureCount;\n        }\n\n        @SuppressWarnings(\"unused\")\n        public synchronized long getLastReconnectAttemptTime() {\n            return lastReconnectAttemptTime;\n        }\n\n        @SuppressWarnings(\"unused\")\n        public synchronized long getLastConnectTime() {\n            return lastConnectTime;\n        }\n\n        public Session getFixSession() {\n            return fixSession;\n        }\n\n        private void resetIoConnector() {\n            if ((ioSession != null) && Boolean.TRUE.equals(ioSession.getAttribute(SessionConnector.QFJ_RESET_IO_CONNECTOR))) {\n                try {\n                    setupIoConnector();\n                    if (connectFuture != null) {\n                        connectFuture.cancel();\n                    }\n                    connectFuture = null;\n                    if (!ioSession.isClosing()) {\n                        ioSession.closeNow();\n                    }\n                    ioSession = null;\n                } catch (Throwable e) {\n                    LogUtil.logThrowable(fixSession.getLog(), \"Exception during resetIoConnector call\", e);\n                }\n            }\n        }\n    }\n\n    synchronized void start() {\n        if (reconnectFuture == null) {\n            reconnectTask.getFixSession().logon();\n            reconnectFuture = executor.scheduleWithFixedDelay(reconnectTask, 0, 1, TimeUnit.SECONDS);\n        }\n    }\n\n    synchronized void stop() {\n        if (reconnectFuture != null) {\n            reconnectFuture.cancel(true);\n            reconnectFuture = null;\n        }\n        SessionConnector.closeManagedSessionsAndDispose(reconnectTask.ioConnector, true, log);\n    }\n\n    public SessionID getSessionID() {\n        return reconnectTask.fixSession.getSessionID();\n    }\n\n    public SocketAddress getLocalAddress() {\n        return reconnectTask.localAddress;\n    }\n\n    public SocketAddress[] getSocketAddresses() {\n        return Arrays.copyOf(reconnectTask.socketAddresses, reconnectTask.socketAddresses.length);\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n            sslFilter.setUseClientMode(true);\nwith the following error message:\n[ERROR] /quickfixj/quickfixj-core/src/main/java/quickfix/mina/initiator/IoSessionInitiator.java:[195,22] cannot find symbol  symbol:   method setUseClientMode(boolean)\n  location: variable sslFilter of type quickfix.mina.ssl.SSLFilter\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.apache.mina.filter.ssl.SslFilter.filterClose | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.PEER_ADDRESS | DELETION | FIELD_REMOVED\norg.apache.mina.filter.ssl.SslFilter$SslFilterMessage | DELETION | TYPE_REMOVED\norg.apache.mina.filter.ssl.SslFilter.isSslStarted | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.onPreRemove | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.onPreAdd | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.sessionClosed | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.START_HANDSHAKE | DELETION | FIELD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.onPostAdd | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.isUseClientMode | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.DISABLE_ENCRYPTION_ONCE | DELETION | FIELD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.getSslSession | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.isSecured | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.messageReceived | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.USE_NOTIFICATION | DELETION | FIELD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.CLIENT_HANDSHAKE | DELETION | FIELD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.stopSsl | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.onPreAdd | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.messageSent | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.filterWrite | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.core.session.IoSession | ADDITION | METHOD_ADDED_TO_INTERFACE\norg.apache.mina.filter.ssl.SslFilter.messageReceived | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.mina.filter.ssl.SslFilter.filterClose | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.onPreRemove | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.sessionClosed | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.filterWrite | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.setUseClientMode | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.startSsl | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.onPostAdd | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.initiateHandshake | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.SSL_SESSION | DELETION | FIELD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "            sslFilter.setUseClientMode(true);",
    "error_message": "[ERROR] /quickfixj/quickfixj-core/src/main/java/quickfix/mina/initiator/IoSessionInitiator.java:[195,22] cannot find symbol  symbol:   method setUseClientMode(boolean)\n  location: variable sslFilter of type quickfix.mina.ssl.SSLFilter",
    "api_diff": "Format: element | nature | kind\norg.apache.mina.filter.ssl.SslFilter.filterClose | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.PEER_ADDRESS | DELETION | FIELD_REMOVED\norg.apache.mina.filter.ssl.SslFilter$SslFilterMessage | DELETION | TYPE_REMOVED\norg.apache.mina.filter.ssl.SslFilter.isSslStarted | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.onPreRemove | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.onPreAdd | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.sessionClosed | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.START_HANDSHAKE | DELETION | FIELD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.onPostAdd | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.isUseClientMode | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.DISABLE_ENCRYPTION_ONCE | DELETION | FIELD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.getSslSession | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.isSecured | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.messageReceived | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.USE_NOTIFICATION | DELETION | FIELD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.CLIENT_HANDSHAKE | DELETION | FIELD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.stopSsl | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.onPreAdd | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.messageSent | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.filterWrite | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.core.session.IoSession | ADDITION | METHOD_ADDED_TO_INTERFACE\norg.apache.mina.filter.ssl.SslFilter.messageReceived | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.mina.filter.ssl.SslFilter.filterClose | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.onPreRemove | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.sessionClosed | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.filterWrite | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.setUseClientMode | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.startSsl | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.onPostAdd | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.apache.mina.filter.ssl.SslFilter.initiateHandshake | DELETION | METHOD_REMOVED\norg.apache.mina.filter.ssl.SslFilter.SSL_SESSION | DELETION | FIELD_REMOVED",
    "original_code": "package quickfix.mina.initiator;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.security.GeneralSecurityException;\nimport java.util.Arrays;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport javax.net.ssl.SSLContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.mina.core.filterchain.IoFilterChainBuilder;\nimport org.apache.mina.core.future.ConnectFuture;\nimport org.apache.mina.core.service.IoConnector;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport org.apache.mina.proxy.ProxyConnector;\nimport org.apache.mina.transport.socket.SocketConnector;\nimport quickfix.ConfigError;\nimport quickfix.LogUtil;\nimport quickfix.Session;\nimport quickfix.SessionID;\nimport quickfix.SessionSettings;\nimport quickfix.SystemTime;\nimport quickfix.mina.CompositeIoFilterChainBuilder;\nimport quickfix.mina.EventHandlingStrategy;\nimport quickfix.mina.NetworkingOptions;\nimport quickfix.mina.ProtocolFactory;\nimport quickfix.mina.SessionConnector;\nimport quickfix.mina.message.FIXProtocolCodecFactory;\nimport quickfix.mina.ssl.SSLConfig;\nimport quickfix.mina.ssl.SSLContextFactory;\nimport quickfix.mina.ssl.SSLFilter;\nimport quickfix.mina.ssl.SSLSupport;\npublic class IoSessionInitiator {\n    private static final long CONNECT_POLL_TIMEOUT = 2000L;\n\n    private final ScheduledExecutorService executor;\n\n    private final ConnectTask reconnectTask;\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n\n    private Future<?> reconnectFuture;\n\n    public IoSessionInitiator(Session fixSession, SocketAddress[] socketAddresses, SocketAddress localAddress, int[] reconnectIntervalInSeconds, ScheduledExecutorService executor, SessionSettings sessionSettings, NetworkingOptions networkingOptions, EventHandlingStrategy eventHandlingStrategy, IoFilterChainBuilder userIoFilterChainBuilder, boolean sslEnabled, SSLConfig sslConfig, String proxyType, String proxyVersion, String proxyHost, int proxyPort, String proxyUser, String proxyPassword, String proxyDomain, String proxyWorkstation) throws ConfigError {\n        this.executor = executor;\n        final long[] reconnectIntervalInMillis = new long[reconnectIntervalInSeconds.length];\n        for (int ii = 0; ii != reconnectIntervalInSeconds.length; ++ii) {\n            reconnectIntervalInMillis[ii] = reconnectIntervalInSeconds[ii] * 1000L;\n        }\n        try {\n            reconnectTask = new ConnectTask(sslEnabled, socketAddresses, localAddress, userIoFilterChainBuilder, fixSession, reconnectIntervalInMillis, sessionSettings, networkingOptions, eventHandlingStrategy, sslConfig, proxyType, proxyVersion, proxyHost, proxyPort, proxyUser, proxyPassword, proxyDomain, proxyWorkstation, log);\n        } catch (GeneralSecurityException e) {\n            throw new ConfigError(e);\n        }\n        fixSession.getLog().onEvent(\"Configured socket addresses for session: \" + Arrays.asList(socketAddresses));\n    }\n\n    private static class ConnectTask implements Runnable {\n        private final boolean sslEnabled;\n\n        private final SocketAddress[] socketAddresses;\n\n        private final SocketAddress localAddress;\n\n        private final IoFilterChainBuilder userIoFilterChainBuilder;\n\n        private IoConnector ioConnector;\n\n        private final Session fixSession;\n\n        private final long[] reconnectIntervalInMillis;\n\n        private final SessionSettings sessionSettings;\n\n        private final NetworkingOptions networkingOptions;\n\n        private final EventHandlingStrategy eventHandlingStrategy;\n\n        private final SSLConfig sslConfig;\n\n        private final Logger log;\n\n        private IoSession ioSession;\n\n        private long lastReconnectAttemptTime;\n\n        private long lastConnectTime;\n\n        private int nextSocketAddressIndex;\n\n        private int connectionFailureCount;\n\n        private ConnectFuture connectFuture;\n\n        private final String proxyType;\n\n        private final String proxyVersion;\n\n        private final String proxyHost;\n\n        private final int proxyPort;\n\n        private final String proxyUser;\n\n        private final String proxyPassword;\n\n        private final String proxyDomain;\n\n        private final String proxyWorkstation;\n\n        public ConnectTask(boolean sslEnabled, SocketAddress[] socketAddresses, SocketAddress localAddress, IoFilterChainBuilder userIoFilterChainBuilder, Session fixSession, long[] reconnectIntervalInMillis, SessionSettings sessionSettings, NetworkingOptions networkingOptions, EventHandlingStrategy eventHandlingStrategy, SSLConfig sslConfig, String proxyType, String proxyVersion, String proxyHost, int proxyPort, String proxyUser, String proxyPassword, String proxyDomain, String proxyWorkstation, Logger log) throws ConfigError, GeneralSecurityException {\n            this.sslEnabled = sslEnabled;\n            this.socketAddresses = socketAddresses;\n            this.localAddress = localAddress;\n            this.userIoFilterChainBuilder = userIoFilterChainBuilder;\n            this.fixSession = fixSession;\n            this.reconnectIntervalInMillis = reconnectIntervalInMillis;\n            this.sessionSettings = sessionSettings;\n            this.networkingOptions = networkingOptions;\n            this.eventHandlingStrategy = eventHandlingStrategy;\n            this.sslConfig = sslConfig;\n            this.log = log;\n            this.proxyType = proxyType;\n            this.proxyVersion = proxyVersion;\n            this.proxyHost = proxyHost;\n            this.proxyPort = proxyPort;\n            this.proxyUser = proxyUser;\n            this.proxyPassword = proxyPassword;\n            this.proxyDomain = proxyDomain;\n            this.proxyWorkstation = proxyWorkstation;\n            setupIoConnector();\n        }\n\n        private void setupIoConnector() throws ConfigError, GeneralSecurityException {\n            final CompositeIoFilterChainBuilder ioFilterChainBuilder = new CompositeIoFilterChainBuilder(userIoFilterChainBuilder);\n            boolean hasProxy = ((proxyType != null) && (proxyPort > 0)) && (socketAddresses[nextSocketAddressIndex] instanceof InetSocketAddress);\n            SSLFilter sslFilter = null;\n            if (sslEnabled) {\n                sslFilter = installSslFilter(ioFilterChainBuilder, !hasProxy);\n            }\n            ioFilterChainBuilder.addLast(FIXProtocolCodecFactory.FILTER_NAME, new ProtocolCodecFilter(new FIXProtocolCodecFactory()));\n            IoConnector newConnector;\n            newConnector = ProtocolFactory.createIoConnector(socketAddresses[nextSocketAddressIndex]);\n            networkingOptions.apply(newConnector);\n            newConnector.setHandler(new InitiatorIoHandler(fixSession, sessionSettings, networkingOptions, eventHandlingStrategy));\n            newConnector.setFilterChainBuilder(ioFilterChainBuilder);\n            if (hasProxy) {\n                ProxyConnector proxyConnector = ProtocolFactory.createIoProxyConnector(((SocketConnector) (newConnector)), ((InetSocketAddress) (socketAddresses[nextSocketAddressIndex])), new InetSocketAddress(proxyHost, proxyPort), proxyType, proxyVersion, proxyUser, proxyPassword, proxyDomain, proxyWorkstation);\n                proxyConnector.setHandler(new InitiatorProxyIoHandler(new InitiatorIoHandler(fixSession, sessionSettings, networkingOptions, eventHandlingStrategy), sslFilter));\n                newConnector = proxyConnector;\n            }\n            if (ioConnector != null) {\n                SessionConnector.closeManagedSessionsAndDispose(ioConnector, true, log);\n            }\n            ioConnector = newConnector;\n        }\n\n        private SSLFilter installSslFilter(CompositeIoFilterChainBuilder ioFilterChainBuilder, boolean autoStart) throws GeneralSecurityException {\n            final SSLContext sslContext = SSLContextFactory.getInstance(sslConfig);\n            final SSLFilter sslFilter = new SSLFilter(sslContext, autoStart);\n            sslFilter.setUseClientMode(true);\n            sslFilter.setCipherSuites(sslConfig.getEnabledCipherSuites() != null ? sslConfig.getEnabledCipherSuites() : SSLSupport.getDefaultCipherSuites(sslContext));\n            sslFilter.setEnabledProtocols(sslConfig.getEnabledProtocols() != null ? sslConfig.getEnabledProtocols() : SSLSupport.getSupportedProtocols(sslContext));\n            sslFilter.setUseSNI(sslConfig.isUseSNI());\n            ioFilterChainBuilder.addLast(SSLSupport.FILTER_NAME, sslFilter);\n            return sslFilter;\n        }\n\n        @Override\n        public void run() {\n            resetIoConnector();\n            try {\n                if (connectFuture == null) {\n                    if (shouldReconnect()) {\n                        connect();\n                    }\n                } else {\n                    pollConnectFuture();\n                }\n            } catch (Throwable e) {\n                LogUtil.logThrowable(fixSession.getLog(), \"Exception during ConnectTask run\", e);\n            }\n        }\n\n        private void connect() {\n            try {\n                lastReconnectAttemptTime = SystemTime.currentTimeMillis();\n                SocketAddress nextSocketAddress = getNextSocketAddress();\n                if (localAddress == null) {\n                    connectFuture = ioConnector.connect(nextSocketAddress);\n                } else {\n                    connectFuture = ioConnector.connect(nextSocketAddress, localAddress);\n                }\n                pollConnectFuture();\n            } catch (Throwable e) {\n                handleConnectException(e);\n            }\n        }\n\n        private void pollConnectFuture() {\n            try {\n                connectFuture.awaitUninterruptibly(CONNECT_POLL_TIMEOUT);\n                if (connectFuture.getSession() != null) {\n                    ioSession = connectFuture.getSession();\n                    connectionFailureCount = 0;\n                    nextSocketAddressIndex = 0;\n                    lastConnectTime = System.currentTimeMillis();\n                    connectFuture = null;\n                } else {\n                    fixSession.getLog().onEvent((\"Pending connection not established after \" + (System.currentTimeMillis() - lastReconnectAttemptTime)) + \" ms.\");\n                }\n            } catch (Throwable e) {\n                handleConnectException(e);\n            }\n        }\n\n        private void handleConnectException(Throwable e) {\n            ++connectionFailureCount;\n            SocketAddress socketAddress = socketAddresses[getCurrentSocketAddressIndex()];\n            while (e.getCause() != null) {\n                e = e.getCause();\n            } \n            final String nextRetryMsg = (\" (Next retry in \" + computeNextRetryConnectDelay()) + \" milliseconds)\";\n            if (e instanceof IOException) {\n                fixSession.getLog().onErrorEvent(((((e.getClass().getName() + \" during connection to \") + socketAddress) + \": \") + e) + nextRetryMsg);\n                fixSession.getStateListener().onConnectException(fixSession.getSessionID(), ((IOException) (e)));\n            } else {\n                LogUtil.logThrowable(fixSession.getLog(), (\"Exception during connection to \" + socketAddress) + nextRetryMsg, e);\n                fixSession.getStateListener().onConnectException(fixSession.getSessionID(), new Exception(e));\n            }\n            connectFuture = null;\n        }\n\n        private SocketAddress getNextSocketAddress() {\n            SocketAddress socketAddress = socketAddresses[nextSocketAddressIndex];\n            if (socketAddress instanceof InetSocketAddress) {\n                InetSocketAddress inetAddr = ((InetSocketAddress) (socketAddress));\n                socketAddress = new InetSocketAddress(inetAddr.getHostName(), inetAddr.getPort());\n                socketAddresses[nextSocketAddressIndex] = socketAddress;\n            }\n            nextSocketAddressIndex = (nextSocketAddressIndex + 1) % socketAddresses.length;\n            return socketAddress;\n        }\n\n        private int getCurrentSocketAddressIndex() {\n            return ((nextSocketAddressIndex + socketAddresses.length) - 1) % socketAddresses.length;\n        }\n\n        private boolean shouldReconnect() {\n            return (((ioSession == null) || (!ioSession.isConnected())) && isTimeForReconnect()) && (fixSession.isEnabled() && fixSession.isSessionTime());\n        }\n\n        private long computeNextRetryConnectDelay() {\n            int index = connectionFailureCount - 1;\n            if (index < 0)\n                index = 0;\n\n            long millis;\n            if (index >= reconnectIntervalInMillis.length) {\n                millis = reconnectIntervalInMillis[reconnectIntervalInMillis.length - 1];\n            } else {\n                millis = reconnectIntervalInMillis[index];\n            }\n            return millis;\n        }\n\n        private boolean isTimeForReconnect() {\n            return (SystemTime.currentTimeMillis() - lastReconnectAttemptTime) >= computeNextRetryConnectDelay();\n        }\n\n        @SuppressWarnings(\"unused\")\n        public synchronized int getConnectionFailureCount() {\n            return connectionFailureCount;\n        }\n\n        @SuppressWarnings(\"unused\")\n        public synchronized long getLastReconnectAttemptTime() {\n            return lastReconnectAttemptTime;\n        }\n\n        @SuppressWarnings(\"unused\")\n        public synchronized long getLastConnectTime() {\n            return lastConnectTime;\n        }\n\n        public Session getFixSession() {\n            return fixSession;\n        }\n\n        private void resetIoConnector() {\n            if ((ioSession != null) && Boolean.TRUE.equals(ioSession.getAttribute(SessionConnector.QFJ_RESET_IO_CONNECTOR))) {\n                try {\n                    setupIoConnector();\n                    if (connectFuture != null) {\n                        connectFuture.cancel();\n                    }\n                    connectFuture = null;\n                    if (!ioSession.isClosing()) {\n                        ioSession.closeNow();\n                    }\n                    ioSession = null;\n                } catch (Throwable e) {\n                    LogUtil.logThrowable(fixSession.getLog(), \"Exception during resetIoConnector call\", e);\n                }\n            }\n        }\n    }\n\n    synchronized void start() {\n        if (reconnectFuture == null) {\n            reconnectTask.getFixSession().logon();\n            reconnectFuture = executor.scheduleWithFixedDelay(reconnectTask, 0, 1, TimeUnit.SECONDS);\n        }\n    }\n\n    synchronized void stop() {\n        if (reconnectFuture != null) {\n            reconnectFuture.cancel(true);\n            reconnectFuture = null;\n        }\n        SessionConnector.closeManagedSessionsAndDispose(reconnectTask.ioConnector, true, log);\n    }\n\n    public SessionID getSessionID() {\n        return reconnectTask.fixSession.getSessionID();\n    }\n\n    public SocketAddress getLocalAddress() {\n        return reconnectTask.localAddress;\n    }\n\n    public SocketAddress[] getSocketAddresses() {\n        return Arrays.copyOf(reconnectTask.socketAddresses, reconnectTask.socketAddresses.length);\n    }\n}\n",
    "project": "quickfixj",
    "libraryName": "mina-core",
    "libraryGroupID": "org.apache.mina",
    "newVersion": "2.2.1",
    "previousVersion": "2.1.5",
    "breakingCommit": "00a7cc31784ac4a9cc27d506a73ae589d6df36d6",
    "patch": "```java\npackage quickfix.mina.initiator;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.security.GeneralSecurityException;\nimport java.util.Arrays;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport javax.net.ssl.SSLContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.mina.core.filterchain.IoFilterChainBuilder;\nimport org.apache.mina.core.future.ConnectFuture;\nimport org.apache.mina.core.service.IoConnector;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport org.apache.mina.proxy.ProxyConnector;\nimport org.apache.mina.transport.socket.SocketConnector;\nimport quickfix.ConfigError;\nimport quickfix.LogUtil;\nimport quickfix.Session;\nimport quickfix.SessionID;\nimport quickfix.SessionSettings;\nimport quickfix.SystemTime;\nimport quickfix.mina.CompositeIoFilterChainBuilder;\nimport quickfix.mina.EventHandlingStrategy;\nimport quickfix.mina.NetworkingOptions;\nimport quickfix.mina.ProtocolFactory;\nimport quickfix.mina.SessionConnector;\nimport quickfix.mina.message.FIXProtocolCodecFactory;\nimport quickfix.mina.ssl.SSLConfig;\nimport quickfix.mina.ssl.SSLContextFactory;\nimport quickfix.mina.ssl.SSLFilter;\nimport quickfix.mina.ssl.SSLSupport;\n\npublic class IoSessionInitiator {\n\n    private static final long CONNECT_POLL_TIMEOUT = 2000L;\n\n    private final ScheduledExecutorService executor;\n\n    private final ConnectTask reconnectTask;\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n\n    private Future<?> reconnectFuture;\n\n    public IoSessionInitiator(Session fixSession, SocketAddress[] socketAddresses, SocketAddress localAddress, int[] reconnectIntervalInSeconds, ScheduledExecutorService executor, SessionSettings sessionSettings, NetworkingOptions networkingOptions, EventHandlingStrategy eventHandlingStrategy, IoFilterChainBuilder userIoFilterChainBuilder, boolean sslEnabled, SSLConfig sslConfig, String proxyType, String proxyVersion, String proxyHost, int proxyPort, String proxyUser, String proxyPassword, String proxyDomain, String proxyWorkstation) throws ConfigError {\n        this.executor = executor;\n        this.reconnectTask = new ConnectTask(sslEnabled, socketAddresses, localAddress, userIoFilterChainBuilder, fixSession, reconnectIntervalInSeconds, sessionSettings, networkingOptions, eventHandlingStrategy, sslConfig, proxyType, proxyVersion, proxyHost, proxyPort, proxyUser, proxyPassword, proxyDomain, proxyWorkstation, log);\n    }\n\n    private static class ConnectTask implements Runnable {\n        private final boolean sslEnabled;\n\n        private final SocketAddress[] socketAddresses;\n\n        private final SocketAddress localAddress;\n\n        private final IoFilterChainBuilder userIoFilterChainBuilder;\n\n        private IoConnector ioConnector;\n\n        private final Session fixSession;\n\n        private final long[] reconnectIntervalInMillis;\n\n        private final SessionSettings sessionSettings;\n\n        private final NetworkingOptions networkingOptions;\n\n        private final EventHandlingStrategy eventHandlingStrategy;\n\n        private final SSLConfig sslConfig;\n\n        private final Logger log;\n\n        private IoSession ioSession;\n\n        private long lastReconnectAttemptTime;\n\n        private long lastConnectTime;\n\n        private int nextSocketAddressIndex;\n\n        private int connectionFailureCount;\n\n        private ConnectFuture connectFuture;\n\n        private final String proxyType;\n\n        private final String proxyVersion;\n\n        private final String proxyHost;\n\n        private final int proxyPort;\n\n        private final String proxyUser;\n\n        private final String proxyPassword;\n\n        private final String proxyDomain;\n\n        private final String proxyWorkstation;\n\n        public ConnectTask(boolean sslEnabled, SocketAddress[] socketAddresses, SocketAddress localAddress, IoFilterChainBuilder userIoFilterChainBuilder, Session fixSession, long[] reconnectIntervalInMillis, SessionSettings sessionSettings, NetworkingOptions networkingOptions, EventHandlingStrategy eventHandlingStrategy, SSLConfig sslConfig, String proxyType, String proxyVersion, String proxyHost, int proxyPort, String proxyUser, String proxyPassword, String proxyDomain, String proxyWorkstation, Logger log) {\n            this.sslEnabled = sslEnabled;\n            this.socketAddresses = socketAddresses;\n            this.localAddress = localAddress;\n            this.userIoFilterChainBuilder = userIoFilterChainBuilder;\n            this.fixSession = fixSession;\n            this.reconnectIntervalInMillis = reconnectIntervalInMillis;\n            this.sessionSettings = sessionSettings;\n            this.networkingOptions = networkingOptions;\n            this.eventHandlingStrategy = eventHandlingStrategy;\n            this.sslConfig = sslConfig;\n            this.log = log;\n            this.proxyType = proxyType;\n            this.proxyVersion = proxyVersion;\n            this.proxyHost = proxyHost;\n            this.proxyPort = proxyPort;\n            this.proxyUser = proxyUser;\n            this.proxyPassword = proxyPassword;\n            this.proxyDomain = proxyDomain;\n            this.proxyWorkstation = proxyWorkstation;\n        }\n\n        private void setupIoConnector() {\n            final CompositeIoFilterChainBuilder ioFilterChainBuilder = new CompositeIoFilterChainBuilder(userIoFilterChainBuilder);\n            boolean hasProxy = ((proxyType != null) && (proxyPort > 0)) && (socketAddresses[nextSocketAddressIndex] instanceof InetSocketAddress);\n            SSLFilter sslFilter = null;\n            if (sslEnabled) {\n                sslFilter = installSslFilter(ioFilterChainBuilder, !hasProxy);\n            }\n            ioFilterChainBuilder.addLast(FIXProtocolCodecFactory.FILTER_NAME, new ProtocolCodecFilter(new FIXProtocolCodecFactory()));\n            IoConnector newConnector;\n            newConnector = ProtocolFactory.createIoConnector(socketAddresses[nextSocketAddressIndex]);\n            networkingOptions.apply(newConnector);\n            newConnector.setHandler(new InitiatorIoHandler(fixSession, sessionSettings, networkingOptions, eventHandlingStrategy));\n            newConnector.setFilterChainBuilder(ioFilterChainBuilder);\n            if (hasProxy) {\n                ProxyConnector proxyConnector = ProtocolFactory.createIoProxyConnector(((SocketConnector) (newConnector)), ((InetSocketAddress) (socketAddresses[nextSocketAddressIndex])), new InetSocketAddress(proxyHost, proxyPort), proxyType, proxyVersion, proxyUser, proxyPassword, proxyDomain, proxyWorkstation);\n                proxyConnector.setHandler(new InitiatorProxyIoHandler(new InitiatorIoHandler(fixSession, sessionSettings, networkingOptions, eventHandlingStrategy), sslFilter));\n                newConnector = proxyConnector;\n            }\n        }\n\n        private SSLFilter installSslFilter(CompositeIoFilterChainBuilder ioFilterChainBuilder, boolean autoStart) {\n            final SSLContext sslContext = SSLContextFactory.getInstance(sslConfig);\n            final SSLFilter sslFilter = new SSLFilter(sslContext, autoStart);\n            sslFilter.setUseClientMode(true);\n            sslFilter.setCipherSuites(sslConfig.getEnabledCipherSuites() != null ? sslConfig.getEnabledCipherSuites() : SSLSupport.getDefaultCipherSuites(sslContext));\n            sslFilter.setEnabledProtocols(sslConfig.getEnabledProtocols() != null ? sslConfig.getEnabledProtocols() : SSLSupport.getSupportedProtocols(sslContext));\n            sslFilter.setUseSNI(sslConfig.isUseSNI());\n            ioFilterChainBuilder.addLast(SSLSupport.FILTER_NAME, sslFilter);\n            return sslFilter;\n        }\n\n        @Override\n        public void run() {\n            resetIoConnector();\n            try {\n                if (connectFuture == null) {\n                    if (shouldReconnect()) {\n                        connect();\n                    }\n                } else {\n                    pollConnectFuture();\n                }\n            } catch (Throwable e) {\n                LogUtil.logThrowable(fixSession.getLog(), \"Exception during ConnectTask run\", e);\n            }\n        }\n\n        private void connect() {\n            try {\n                lastReconnectAttemptTime = SystemTime.currentTimeMillis();\n                SocketAddress nextSocketAddress = getNextSocketAddress();\n                if (localAddress == null) {\n                    connectFuture = ioConnector.connect(nextSocketAddress);\n                } else {\n                    connectFuture = ioConnector.connect(nextSocketAddress, localAddress);\n                }\n                pollConnectFuture();\n            } catch (Throwable e) {\n                handleConnectException(e);\n            }\n        }\n\n        private void pollConnectFuture() {\n            try {\n                connectFuture.awaitUninterruptibly(CONNECT_POLL_TIMEOUT);\n                if (connectFuture.getSession() != null) {\n                    ioSession = connectFuture.getSession();\n                    connectionFailureCount = 0;\n                    nextSocketAddressIndex = 0;\n                    lastConnectTime = System.currentTimeMillis();\n                    connectFuture = null;\n                } else {\n                    fixSession.getLog().onEvent((\"Pending connection not established after \" + (System.currentTimeMillis() - lastReconnectAttemptTime)) + \" ms.\");\n                }\n            } catch (Throwable e) {\n                handleConnectException(e);\n            }\n        }\n\n        private void handleConnectException(Throwable e) {\n            ++connectionFailureCount;\n            SocketAddress socketAddress = socketAddresses[getCurrentSocketAddressIndex()];\n            while (e.getCause() != null) {\n                e = e.getCause();\n            }\n            final String nextRetryMsg = (\" (Next retry in \" + computeNextRetryConnectDelay() + \" milliseconds)\");\n            if (e instanceof IOException) {\n                fixSession.getLog().onErrorEvent(((((e.getClass().getName() + \" during connection to \") + socketAddress) + \": \") + e) + nextRetryMsg);\n                fixSession.getStateListener().onConnectException(fixSession.getSessionID(), ((IOException) (e)));\n            } else {\n                LogUtil.logThrowable(fixSession.getLog(), (\"Exception during connection to \" + socketAddress) + nextRetryMsg, e);\n                fixSession.getStateListener().onConnectException(fixSession.getSessionID(), new Exception(e));\n            }\n            connectFuture = null;\n        }\n\n        private SocketAddress getNextSocketAddress() {\n            SocketAddress socketAddress = socketAddresses[nextSocketAddressIndex];\n            if (socketAddress instanceof InetSocketAddress) {\n                InetSocketAddress inetAddr = ((InetSocketAddress) (socketAddress));\n                socketAddress = new InetSocketAddress(inetAddr.getHostName(), inetAddr.getPort());\n                socketAddresses[nextSocketAddressIndex] = socketAddress;\n            }\n            nextSocketAddressIndex = (nextSocketAddressIndex + 1) % socketAddresses.length;\n            return socketAddress;\n        }\n\n        private int getCurrentSocketAddressIndex() {\n            return ((nextSocketAddressIndex + socketAddresses.length) - 1) % socketAddresses.length;\n        }\n\n        private boolean shouldReconnect() {\n            return (((ioSession == null) || (!ioSession.isConnected())) && isTimeForReconnect()) && (fixSession.isEnabled() && fixSession.isSessionTime());\n        }\n\n        private long computeNextRetryConnectDelay() {\n            int index = connectionFailureCount - 1;\n            if (index < 0)\n                index = 0;\n\n            long millis;\n            if (index >= reconnectIntervalInMillis.length) {\n                millis = reconnectIntervalInMillis[reconnectIntervalInMillis.length - 1];\n            } else {\n                millis = reconnectIntervalInMillis[index];\n            }\n            return millis;\n        }\n\n        private boolean isTimeForReconnect() {\n            return (SystemTime.currentTimeMillis() - lastReconnectAttemptTime) >= computeNextRetryConnectDelay();\n        }\n\n        public Session getFixSession() {\n            return fixSession;\n        }\n\n        private void resetIoConnector() {\n            if ((ioSession != null) && Boolean.TRUE.equals(ioSession.getAttribute(SessionConnector.QFJ_RESET_IO_CONNECTOR))) {\n                try {\n                    setupIoConnector();\n                    if (connectFuture != null) {\n                        connectFuture.cancel(true);\n                    }\n                    connectFuture = null;\n                    if (!ioSession.isClosing()) {\n                        ioSession.closeNow();\n                    }\n                    ioSession = null;\n                } catch (Throwable e) {\n                    LogUtil.logThrowable(fixSession.getLog(), \"Exception during resetIoConnector call\", e);\n                }\n            }\n        }\n    }\n}\n```<end_of_turn>"
}