{
    "absolute_path_to_file_in_container": "/license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/UpdateMojoTest.java",
    "errors": [
        {
            "line_number": 22,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/UpdateMojoTest.java:[22,45] package org.apache.maven.plugin.testing.stubs does not exist",
            "additional_info": "",
            "file_name": "UpdateMojoTest.java",
            "uid": "97bd4564-2f03-51d2-9a2d-afd2b18e14aa"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: maven-plugin-testing-harness 4.0.0-alpha-2->4.0.0-beta-4\n\nthe following client code fails: \n'''java\npackage com.mycila.maven.plugin.license;\nimport java.io.File;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.io.Files;\nimport com.mycila.maven.plugin.license.util.FileUtils;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nclass UpdateMojoTest {\n    public static final String LS = \"\\n\";\n\n    @Test\n    void test_update() throws Exception {\n        File tmp = new File(\"target/test/update\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc1.txt\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc2.txt\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.execute();\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"doc1.txt\"), Charset.defaultCharset()), \"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc1.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\");\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"doc2.txt\"), Charset.defaultCharset()), \"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc2.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\");\n    }\n\n    @Test\n    void test_update_inlineHeader() throws Exception {\n        File tmp = new File(\"target/test/update-inlineHeader\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc1.txt\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc2.txt\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigInlineHeader = FileUtils.read(new File(\"src/test/resources/update/header.txt\"), StandardCharsets.UTF_8);\n        updater.project = new MavenProjectStub();\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.execute();\n        Assertions.assertEquals(\"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc1.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\", FileUtils.read(new File(tmp, \"doc1.txt\"), Charset.defaultCharset()));\n        Assertions.assertEquals(\"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc2.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\", FileUtils.read(new File(tmp, \"doc2.txt\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_skipExistingHeaders() throws Exception {\n        File tmp = new File(\"target/test/test_skipExistingHeaders\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc1.txt\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc2.txt\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.skipExistingHeaders = true;\n        updater.execute();\n        Assertions.assertEquals(\"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc1.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\", FileUtils.read(new File(tmp, \"doc1.txt\"), Charset.defaultCharset()));\n        Assertions.assertEquals(\"====\\r\\n    Copyright license\\r\\n====\\r\\n\\r\\nsome data\\r\\n\", FileUtils.read(new File(tmp, \"doc2.txt\"), Charset.defaultCharset()));\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = tmp;\n        check.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        check.project = new MavenProjectStub();\n        check.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        check.skipExistingHeaders = false;\n        try {\n            check.execute();\n            Assertions.fail();\n        } catch (MojoExecutionException e) {\n            Assertions.assertEquals(\"Some files do not have the expected license header. Run license:format to update them.\", e.getMessage());\n            Assertions.assertEquals(1, check.missingHeaders.size());\n        }\n        check.skipExistingHeaders = true;\n        check.execute();\n    }\n\n    @Test\n    void test_issue50() throws Exception {\n        File tmp = new File(\"target/test/update/issue50\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue50/test1.properties\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue50/test2.properties\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue50/test3.properties\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"properties\", \"SCRIPT_STYLE\");\n            }\n        };\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        String test1 = FileUtils.read(new File(tmp, \"test1.properties\"), Charset.defaultCharset()).replaceAll(\"\\\\n\", LS);\n        String test2 = FileUtils.read(new File(tmp, \"test2.properties\"), Charset.defaultCharset());\n        String test3 = FileUtils.read(new File(tmp, \"test3.properties\"), Charset.defaultCharset());\n        Assertions.assertEquals(test1, test2.replace(\"test2.properties\", \"test1.properties\"));\n        Assertions.assertEquals(test1, test3.replace(\"test3.properties\", \"test1.properties\"));\n    }\n\n    @Test\n    void test_issue48() throws Exception {\n        File tmp = new File(\"target/test/update/issue48\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue48/test1.php\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue48/test2.php\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"properties\", \"SCRIPT_STYLE\");\n            }\n        };\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"test1.php\"), Charset.defaultCharset()), ((((((((\"\\r\\n\" + \"\\r\\n\") + \"<?php\\r\\n\") + \"/*\\r\\n\") + \" * My @Copyright license 2 with my-custom-value and 2008 and test1.php\\r\\n\") + \" */\\r\\n\") + \"\\r\\n\") + \"class Conference extends Service {}\\r\\n\") + \"\\r\\n\") + \"?>\\r\\n\");\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"test2.php\"), Charset.defaultCharset()), ((((((((\"\\r\\n\" + \"\\r\\n\") + \"<?php\\r\\n\") + \"/*\\r\\n\") + \" * My @Copyright license 2 with my-custom-value and 2008 and test2.php\\r\\n\") + \" */\\r\\n\") + \"\\r\\n\") + \"class Conference extends Service {}\\r\\n\") + \"\\r\\n\") + \"?>\\r\\n\");\n    }\n\n    @Test\n    void test_issue44() throws Exception {\n        File tmp = new File(\"target/test/update/issue44\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue44/issue44-3.rb\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue44/test.asp\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"issue44-3.rb\"), Charset.defaultCharset()), ((((((((((((((((\"#\" + LS) + \"\") + \"# My @Copyright license 2 with my-custom-value and 2008 and issue44-3.rb\") + LS) + \"\") + \"#\") + LS) + \"\") + \"\") + LS) + \"\") + \"# code comment\") + LS) + \"\") + \"ruby code here\") + LS) + \"\");\n        Assertions.assertEquals((((\"<%\\n\" + \"' My @Copyright license 2 with my-custom-value and 2008 and test.asp\\n\") + \"%>\") + \"\\n\") + \"asp code\", FileUtils.read(new File(tmp, \"test.asp\"), Charset.defaultCharset()).trim());\n    }\n\n    @Test\n    void test_issue_14() throws Exception {\n        File tmp = new File(\"target/test/update/issue14\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue14/test.properties\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/issue14/header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        final String expectedString = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\"#\" + LS) + \"\") + \"# Copyright (C) 2013 Salzburg Research.\") + LS) + \"\") + \"#\") + LS) + \"\") + \"# Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\") + LS) + \"\") + \"# you may not use this file except in compliance with the License.\") + LS) + \"\") + \"# You may obtain a copy of the License at\") + LS) + \"\") + \"#\") + LS) + \"\") + \"#         http://www.apache.org/licenses/LICENSE-2.0\") + LS) + \"\") + \"#\") + LS) + \"\") + \"# Unless required by applicable law or agreed to in writing, software\") + LS) + \"\") + \"# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\") + LS) + \"\") + \"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\") + LS) + \"\") + \"# See the License for the specific language governing permissions and\") + LS) + \"\") + \"# limitations under the License.\") + LS) + \"\") + \"#\") + LS) + \"\") + \"\") + LS) + \"\") + \"meta.tables=SHOW TABLES;\") + LS) + \"\") + \"meta.version=SELECT mvalue FROM metadata WHERE mkey = 'version';\") + LS) + \"\") + \"# get sequence numbers\") + LS) + \"\") + \"seq.nodes=SELECT nextval('seq_nodes')\") + LS) + \"\") + \"seq.triples=SELECT nextval('seq_triples')\") + LS) + \"\") + \"seq.namespaces=SELECT nextval('seq_namespaces')\") + LS) + \"\";\n        final String readModifiedContent = FileUtils.read(new File(tmp, \"test.properties\"), Charset.defaultCharset());\n        Assertions.assertEquals(expectedString, readModifiedContent);\n    }\n\n    @Test\n    void test_issue71_canSkipSeveralLines() throws Exception {\n        File tmp = new File(\"target/test/update/issue71\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/issues/issue-71/issue-71.txt.extended\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/issues/issue-71/issue-71-header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"txt.extended\", \"EXTENDED_STYLE\");\n            }\n        };\n        updater.defaultHeaderDefinitions = new String[]{ \"/issues/issue-71/issue-71-additionalHeaderDefinitions.xml\" };\n        updater.execute();\n        List<String> linesOfModifiedFile = Files.readLines(new File(tmp, \"issue-71.txt.extended\"), Charset.defaultCharset());\n        assertThat(linesOfModifiedFile.get(0)).isEqualTo(\"|||\");\n        assertThat(linesOfModifiedFile.get(8)).isEqualTo(\"|||\");\n    }\n\n    @Test\n    void test_issue37_RunningUpdaterTwiceMustNotChangeTheFile() throws Exception {\n        File tmp = new File(\"target/test/update/issue37\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue37/xwiki.xml\"), tmp);\n        LicenseFormatMojo execution1 = new LicenseFormatMojo();\n        execution1.defaultBasedir = tmp;\n        execution1.legacyConfigHeader = \"src/test/resources/update/issue37/xwiki-license.txt\";\n        execution1.project = new MavenProjectStub();\n        execution1.execute();\n        String execution1FileContent = FileUtils.read(new File(tmp, \"xwiki.xml\"), Charset.defaultCharset());\n        LicenseFormatMojo execution2 = new LicenseFormatMojo();\n        execution2.defaultBasedir = tmp;\n        execution2.legacyConfigHeader = \"src/test/resources/update/issue37/xwiki-license.txt\";\n        execution2.project = new MavenProjectStub();\n        execution2.execute();\n        String execution2FileContent = FileUtils.read(new File(tmp, \"xwiki.xml\"), Charset.defaultCharset());\n        assertThat(execution1FileContent).isEqualTo(execution2FileContent);\n    }\n\n    @Test\n    void test_UpdateWorksHasExpectedOnAOneLineCommentFile_relatesTo_issue30() throws Exception {\n        File tmp = new File(\"target/test/update/issue30\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue30/one-line-comment.ftl\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/single-line-header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        List<String> linesOfOriginFile = Files.readLines(new File(\"src/test/resources/update/issue30/one-line-comment.ftl\"), Charset.defaultCharset());\n        List<String> linesOfUpdatedFile = Files.readLines(new File(tmp, \"one-line-comment.ftl\"), Charset.defaultCharset());\n        assertThat(linesOfOriginFile.get(0)).isEqualTo(linesOfUpdatedFile.get(linesOfUpdatedFile.size() - 1));\n    }\n\n    @Test\n    void test_issue213() throws Exception {\n        File tmp = new File(\"target/test/update/issue213\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue213/test.xml\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        LicenseSet licenseSet = new LicenseSet();\n        licenseSet.basedir = tmp;\n        licenseSet.inlineHeader = \"All content copyright (c) 2003-2021 Bla, Inc., except as may\\n\" + \"  otherwise be noted in a separate copyright notice. All rights reserved.\";\n        updater.licenseSets = new LicenseSet[]{ licenseSet };\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        Assertions.assertEquals(((((((((\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<!--\\n\") + \"\\n\") + \"    All content copyright (c) 2003-2021 Bla, Inc., except as may\\n\") + \"      otherwise be noted in a separate copyright notice. All rights reserved.\\n\") + \"\\n\") + \"-->\\n\\n\") + \"<top>\\n\") + \"  <element>value</element>\\n\") + \"</top>\\n\", FileUtils.read(new File(tmp, \"test.xml\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_issue71_underscore_in_package_name() throws Exception {\n        File tmp = new File(\"target/test/update/issue-187\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue-187/Main.java\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/issue-187/header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"java\", \"JAVAPKG_STYLE\");\n            }\n        };\n        updater.execute();\n        String processed = FileUtils.read(new File(tmp, \"Main.java\"), Charset.defaultCharset());\n        String expected = FileUtils.read(new File(\"src/test/resources/update/issue-187/expected.txt\"), Charset.defaultCharset());\n        assertThat(processed).isEqualTo(expected);\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\nwith the following error message:\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/UpdateMojoTest.java:[22,45] package org.apache.maven.plugin.testing.stubs does not exist\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.apache.maven.plugin.testing.stubs.MavenProjectStub | DELETION | TYPE_REMOVED\norg.apache.maven.plugin.testing.stubs.ArtifactStub | DELETION | TYPE_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifactId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setGroupId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setVersion | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.MojoExecutionStub.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifact | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import org.apache.maven.plugin.testing.stubs.MavenProjectStub;",
    "error_message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/UpdateMojoTest.java:[22,45] package org.apache.maven.plugin.testing.stubs does not exist",
    "api_diff": "Format: element | nature | kind\norg.apache.maven.plugin.testing.stubs.MavenProjectStub | DELETION | TYPE_REMOVED\norg.apache.maven.plugin.testing.stubs.ArtifactStub | DELETION | TYPE_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifactId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setGroupId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setVersion | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.MojoExecutionStub.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifact | DELETION | METHOD_REMOVED",
    "original_code": "package com.mycila.maven.plugin.license;\nimport java.io.File;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.io.Files;\nimport com.mycila.maven.plugin.license.util.FileUtils;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nclass UpdateMojoTest {\n    public static final String LS = \"\\n\";\n\n    @Test\n    void test_update() throws Exception {\n        File tmp = new File(\"target/test/update\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc1.txt\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc2.txt\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.execute();\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"doc1.txt\"), Charset.defaultCharset()), \"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc1.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\");\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"doc2.txt\"), Charset.defaultCharset()), \"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc2.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\");\n    }\n\n    @Test\n    void test_update_inlineHeader() throws Exception {\n        File tmp = new File(\"target/test/update-inlineHeader\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc1.txt\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc2.txt\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigInlineHeader = FileUtils.read(new File(\"src/test/resources/update/header.txt\"), StandardCharsets.UTF_8);\n        updater.project = new MavenProjectStub();\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.execute();\n        Assertions.assertEquals(\"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc1.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\", FileUtils.read(new File(tmp, \"doc1.txt\"), Charset.defaultCharset()));\n        Assertions.assertEquals(\"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc2.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\", FileUtils.read(new File(tmp, \"doc2.txt\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_skipExistingHeaders() throws Exception {\n        File tmp = new File(\"target/test/test_skipExistingHeaders\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc1.txt\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc2.txt\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.skipExistingHeaders = true;\n        updater.execute();\n        Assertions.assertEquals(\"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc1.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\", FileUtils.read(new File(tmp, \"doc1.txt\"), Charset.defaultCharset()));\n        Assertions.assertEquals(\"====\\r\\n    Copyright license\\r\\n====\\r\\n\\r\\nsome data\\r\\n\", FileUtils.read(new File(tmp, \"doc2.txt\"), Charset.defaultCharset()));\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = tmp;\n        check.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        check.project = new MavenProjectStub();\n        check.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        check.skipExistingHeaders = false;\n        try {\n            check.execute();\n            Assertions.fail();\n        } catch (MojoExecutionException e) {\n            Assertions.assertEquals(\"Some files do not have the expected license header. Run license:format to update them.\", e.getMessage());\n            Assertions.assertEquals(1, check.missingHeaders.size());\n        }\n        check.skipExistingHeaders = true;\n        check.execute();\n    }\n\n    @Test\n    void test_issue50() throws Exception {\n        File tmp = new File(\"target/test/update/issue50\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue50/test1.properties\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue50/test2.properties\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue50/test3.properties\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"properties\", \"SCRIPT_STYLE\");\n            }\n        };\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        String test1 = FileUtils.read(new File(tmp, \"test1.properties\"), Charset.defaultCharset()).replaceAll(\"\\\\n\", LS);\n        String test2 = FileUtils.read(new File(tmp, \"test2.properties\"), Charset.defaultCharset());\n        String test3 = FileUtils.read(new File(tmp, \"test3.properties\"), Charset.defaultCharset());\n        Assertions.assertEquals(test1, test2.replace(\"test2.properties\", \"test1.properties\"));\n        Assertions.assertEquals(test1, test3.replace(\"test3.properties\", \"test1.properties\"));\n    }\n\n    @Test\n    void test_issue48() throws Exception {\n        File tmp = new File(\"target/test/update/issue48\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue48/test1.php\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue48/test2.php\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"properties\", \"SCRIPT_STYLE\");\n            }\n        };\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"test1.php\"), Charset.defaultCharset()), ((((((((\"\\r\\n\" + \"\\r\\n\") + \"<?php\\r\\n\") + \"/*\\r\\n\") + \" * My @Copyright license 2 with my-custom-value and 2008 and test1.php\\r\\n\") + \" */\\r\\n\") + \"\\r\\n\") + \"class Conference extends Service {}\\r\\n\") + \"\\r\\n\") + \"?>\\r\\n\");\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"test2.php\"), Charset.defaultCharset()), ((((((((\"\\r\\n\" + \"\\r\\n\") + \"<?php\\r\\n\") + \"/*\\r\\n\") + \" * My @Copyright license 2 with my-custom-value and 2008 and test2.php\\r\\n\") + \" */\\r\\n\") + \"\\r\\n\") + \"class Conference extends Service {}\\r\\n\") + \"\\r\\n\") + \"?>\\r\\n\");\n    }\n\n    @Test\n    void test_issue44() throws Exception {\n        File tmp = new File(\"target/test/update/issue44\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue44/issue44-3.rb\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue44/test.asp\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"issue44-3.rb\"), Charset.defaultCharset()), ((((((((((((((((\"#\" + LS) + \"\") + \"# My @Copyright license 2 with my-custom-value and 2008 and issue44-3.rb\") + LS) + \"\") + \"#\") + LS) + \"\") + \"\") + LS) + \"\") + \"# code comment\") + LS) + \"\") + \"ruby code here\") + LS) + \"\");\n        Assertions.assertEquals((((\"<%\\n\" + \"' My @Copyright license 2 with my-custom-value and 2008 and test.asp\\n\") + \"%>\") + \"\\n\") + \"asp code\", FileUtils.read(new File(tmp, \"test.asp\"), Charset.defaultCharset()).trim());\n    }\n\n    @Test\n    void test_issue_14() throws Exception {\n        File tmp = new File(\"target/test/update/issue14\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue14/test.properties\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/issue14/header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        final String expectedString = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\"#\" + LS) + \"\") + \"# Copyright (C) 2013 Salzburg Research.\") + LS) + \"\") + \"#\") + LS) + \"\") + \"# Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\") + LS) + \"\") + \"# you may not use this file except in compliance with the License.\") + LS) + \"\") + \"# You may obtain a copy of the License at\") + LS) + \"\") + \"#\") + LS) + \"\") + \"#         http://www.apache.org/licenses/LICENSE-2.0\") + LS) + \"\") + \"#\") + LS) + \"\") + \"# Unless required by applicable law or agreed to in writing, software\") + LS) + \"\") + \"# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\") + LS) + \"\") + \"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\") + LS) + \"\") + \"# See the License for the specific language governing permissions and\") + LS) + \"\") + \"# limitations under the License.\") + LS) + \"\") + \"#\") + LS) + \"\") + \"\") + LS) + \"\") + \"meta.tables=SHOW TABLES;\") + LS) + \"\") + \"meta.version=SELECT mvalue FROM metadata WHERE mkey = 'version';\") + LS) + \"\") + \"# get sequence numbers\") + LS) + \"\") + \"seq.nodes=SELECT nextval('seq_nodes')\") + LS) + \"\") + \"seq.triples=SELECT nextval('seq_triples')\") + LS) + \"\") + \"seq.namespaces=SELECT nextval('seq_namespaces')\") + LS) + \"\";\n        final String readModifiedContent = FileUtils.read(new File(tmp, \"test.properties\"), Charset.defaultCharset());\n        Assertions.assertEquals(expectedString, readModifiedContent);\n    }\n\n    @Test\n    void test_issue71_canSkipSeveralLines() throws Exception {\n        File tmp = new File(\"target/test/update/issue71\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/issues/issue-71/issue-71.txt.extended\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/issues/issue-71/issue-71-header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"txt.extended\", \"EXTENDED_STYLE\");\n            }\n        };\n        updater.defaultHeaderDefinitions = new String[]{ \"/issues/issue-71/issue-71-additionalHeaderDefinitions.xml\" };\n        updater.execute();\n        List<String> linesOfModifiedFile = Files.readLines(new File(tmp, \"issue-71.txt.extended\"), Charset.defaultCharset());\n        assertThat(linesOfModifiedFile.get(0)).isEqualTo(\"|||\");\n        assertThat(linesOfModifiedFile.get(8)).isEqualTo(\"|||\");\n    }\n\n    @Test\n    void test_issue37_RunningUpdaterTwiceMustNotChangeTheFile() throws Exception {\n        File tmp = new File(\"target/test/update/issue37\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue37/xwiki.xml\"), tmp);\n        LicenseFormatMojo execution1 = new LicenseFormatMojo();\n        execution1.defaultBasedir = tmp;\n        execution1.legacyConfigHeader = \"src/test/resources/update/issue37/xwiki-license.txt\";\n        execution1.project = new MavenProjectStub();\n        execution1.execute();\n        String execution1FileContent = FileUtils.read(new File(tmp, \"xwiki.xml\"), Charset.defaultCharset());\n        LicenseFormatMojo execution2 = new LicenseFormatMojo();\n        execution2.defaultBasedir = tmp;\n        execution2.legacyConfigHeader = \"src/test/resources/update/issue37/xwiki-license.txt\";\n        execution2.project = new MavenProjectStub();\n        execution2.execute();\n        String execution2FileContent = FileUtils.read(new File(tmp, \"xwiki.xml\"), Charset.defaultCharset());\n        assertThat(execution1FileContent).isEqualTo(execution2FileContent);\n    }\n\n    @Test\n    void test_UpdateWorksHasExpectedOnAOneLineCommentFile_relatesTo_issue30() throws Exception {\n        File tmp = new File(\"target/test/update/issue30\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue30/one-line-comment.ftl\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/single-line-header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        List<String> linesOfOriginFile = Files.readLines(new File(\"src/test/resources/update/issue30/one-line-comment.ftl\"), Charset.defaultCharset());\n        List<String> linesOfUpdatedFile = Files.readLines(new File(tmp, \"one-line-comment.ftl\"), Charset.defaultCharset());\n        assertThat(linesOfOriginFile.get(0)).isEqualTo(linesOfUpdatedFile.get(linesOfUpdatedFile.size() - 1));\n    }\n\n    @Test\n    void test_issue213() throws Exception {\n        File tmp = new File(\"target/test/update/issue213\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue213/test.xml\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        LicenseSet licenseSet = new LicenseSet();\n        licenseSet.basedir = tmp;\n        licenseSet.inlineHeader = \"All content copyright (c) 2003-2021 Bla, Inc., except as may\\n\" + \"  otherwise be noted in a separate copyright notice. All rights reserved.\";\n        updater.licenseSets = new LicenseSet[]{ licenseSet };\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        Assertions.assertEquals(((((((((\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<!--\\n\") + \"\\n\") + \"    All content copyright (c) 2003-2021 Bla, Inc., except as may\\n\") + \"      otherwise be noted in a separate copyright notice. All rights reserved.\\n\") + \"\\n\") + \"-->\\n\\n\") + \"<top>\\n\") + \"  <element>value</element>\\n\") + \"</top>\\n\", FileUtils.read(new File(tmp, \"test.xml\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_issue71_underscore_in_package_name() throws Exception {\n        File tmp = new File(\"target/test/update/issue-187\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue-187/Main.java\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/issue-187/header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"java\", \"JAVAPKG_STYLE\");\n            }\n        };\n        updater.execute();\n        String processed = FileUtils.read(new File(tmp, \"Main.java\"), Charset.defaultCharset());\n        String expected = FileUtils.read(new File(\"src/test/resources/update/issue-187/expected.txt\"), Charset.defaultCharset());\n        assertThat(processed).isEqualTo(expected);\n    }\n}\n",
    "project": "license-maven-plugin",
    "libraryName": "maven-plugin-testing-harness",
    "libraryGroupID": "org.apache.maven.plugin-testing",
    "newVersion": "4.0.0-beta-4",
    "previousVersion": "4.0.0-alpha-2",
    "breakingCommit": "fb038ef3a078e45abab4ecc6728a3d0d89bbe01f",
    "patch": "```java\npackage com.mycila.maven.plugin.license;\nimport java.io.File;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.io.Files;\nimport com.mycila.maven.plugin.license.util.FileUtils;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nclass UpdateMojoTest {\n    public static final String LS = \"\\n\";\n\n    @Test\n    void test_update() throws Exception {\n        File tmp = new File(\"target/test/update\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc1.txt\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc2.txt\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.execute();\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"doc1.txt\"), Charset.defaultCharset()), \"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc1.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\");\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"doc2.txt\"), Charset.defaultCharset()), \"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc2.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\");\n    }\n\n    @Test\n    void test_update_inlineHeader() throws Exception {\n        File tmp = new File(\"target/test/update-inlineHeader\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc1.txt\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc2.txt\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigInlineHeader = FileUtils.read(new File(\"src/test/resources/update/header.txt\"), StandardCharsets.UTF_8);\n        updater.project = new MavenProjectStub();\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.execute();\n        Assertions.assertEquals(\"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc1.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\", FileUtils.read(new File(tmp, \"doc1.txt\"), Charset.defaultCharset()));\n        Assertions.assertEquals(\"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc2.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\", FileUtils.read(new File(tmp, \"doc2.txt\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_skipExistingHeaders() throws Exception {\n        File tmp = new File(\"target/test/test_skipExistingHeaders\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc1.txt\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/doc2.txt\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.skipExistingHeaders = true;\n        updater.execute();\n        Assertions.assertEquals(\"====\\r\\n    My @Copyright license 2 with my-custom-value and 2008 and doc1.txt\\r\\n====\\r\\n\\r\\nsome data\\r\\n\", FileUtils.read(new File(tmp, \"doc1.txt\"), Charset.defaultCharset()));\n        Assertions.assertEquals(\"====\\r\\n    Copyright license\\r\\n====\\r\\n\\r\\nsome data\\r\\n\", FileUtils.read(new File(tmp, \"doc2.txt\"), Charset.defaultCharset()));\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = tmp;\n        check.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        check.project = new MavenProjectStub();\n        check.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        check.skipExistingHeaders = false;\n        try {\n            check.execute();\n            Assertions.fail();\n        } catch (MojoExecutionException e) {\n            Assertions.assertEquals(\"Some files do not have the expected license header. Run license:format to update them.\", e.getMessage());\n            Assertions.assertEquals(1, check.missingHeaders.size());\n        }\n        check.skipExistingHeaders = true;\n        check.execute();\n    }\n\n    @Test\n    void test_issue50() throws Exception {\n        File tmp = new File(\"target/test/update/issue50\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue50/test1.properties\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue50/test2.properties\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue50/test3.properties\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"properties\", \"SCRIPT_STYLE\");\n            }\n        };\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        String test1 = FileUtils.read(new File(tmp, \"test1.properties\"), Charset.defaultCharset()).replaceAll(\"\\\\n\", LS);\n        String test2 = FileUtils.read(new File(tmp, \"test2.properties\"), Charset.defaultCharset());\n        String test3 = FileUtils.read(new File(tmp, \"test3.properties\"), Charset.defaultCharset());\n        Assertions.assertEquals(test1, test2.replace(\"test2.properties\", \"test1.properties\"));\n        Assertions.assertEquals(test1, test3.replace(\"test3.properties\", \"test1.properties\"));\n    }\n\n    @Test\n    void test_issue48() throws Exception {\n        File tmp = new File(\"target/test/update/issue48\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue48/test1.php\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue48/test2.php\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"properties\", \"SCRIPT_STYLE\");\n            }\n        };\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"test1.php\"), Charset.defaultCharset()), ((((((((\"\\r\\n\" + \"\\r\\n\") + \"<?php\\r\\n\") + \"/*\\r\\n\") + \" * My @Copyright license 2 with my-custom-value and 2008 and test1.php\\r\\n\") + \" */\\r\\n\") + \"\\r\\n\") + \"class Conference extends Service {}\\r\\n\") + \"\\r\\n\") + \"?>\\r\\n\");\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"test2.php\"), Charset.defaultCharset()), ((((((((\"\\r\\n\" + \"\\r\\n\") + \"<?php\\r\\n\") + \"/*\\r\\n\") + \" * My @Copyright license 2 with my-custom-value and 2008 and test2.php\\r\\n\") + \" */\\r\\n\") + \"\\r\\n\") + \"class Conference extends Service {}\\r\\n\") + \"\\r\\n\") + \"?>\\r\\n\");\n    }\n\n    @Test\n    void test_issue44() throws Exception {\n        File tmp = new File(\"target/test/update/issue44\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue44/issue44-3.rb\"), tmp);\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue44/test.asp\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/header.txt\";\n        updater.defaultProperties = ImmutableMap.of(\"year\", \"2008\");\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"properties\", \"SCRIPT_STYLE\");\n            }\n        };\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        Assertions.assertEquals(FileUtils.read(new File(tmp, \"issue44-3.rb\"), Charset.defaultCharset()), ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\"#\" + LS) + \"\") + \"# Copyright (C) 2013 Salzburg Research.\") + LS) + \"\") + \"# Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\") + LS) + \"\") + \"# you may not use this file except in compliance with the License.\") + LS) + \"\") + \"# You may obtain a copy of the License at\") + LS) + \"\") + \"#\") + LS) + \"\") + \"#         http://www.apache.org/licenses/LICENSE-2.0\") + LS) + \"\") + \"#\") + LS) + \"\") + \"# Unless required by applicable law or agreed to in writing, software\") + LS) + \"\") + \"# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\") + LS) + \"\") + \"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\") + LS) + \"\") + \"# See the License for the specific language governing permissions and\") + LS) + \"\") + \"# limitations under the License.\") + LS) + \"\") + \"#\") + LS) + \"\";\n        Assertions.assertEquals((((\"<%\\n\" + \"' My @Copyright license 2 with my-custom-value and 2008 and test.asp\\n\") + \"%>\") + \"\\n\") + \"asp code\", FileUtils.read(new File(tmp, \"test.asp\"), Charset.defaultCharset()).trim());\n    }\n\n    @Test\n    void test_issue_14() throws Exception {\n        File tmp = new File(\"target/test/update/issue14\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue14/test.properties\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/issue14/header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        final String expectedString = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\"#\" + LS) + \"\") + \"# Copyright (C) 2013 Salzburg Research.\") + LS) + \"\") + \"# Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\") + LS) + \"\") + \"# you may not use this file except in compliance with the License.\") + LS) + \"\") + \"# You may obtain a copy of the License at\") + LS) + \"\") + \"#\") + LS) + \"\") + \"#         http://www.apache.org/licenses/LICENSE-2.0\") + LS) + \"\") + \"#\") + LS) + \"\") + \"# Unless required by applicable law or agreed to in writing, software\") + LS) + \"\") + \"# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\") + LS) + \"\") + \"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\") + LS) + \"\") + \"# See the License for the specific language governing permissions and\") + LS) + \"\") + \"# limitations under the License.\") + LS) + \"\") + \"#\") + LS) + \"\";\n        final String readModifiedContent = FileUtils.read(new File(tmp, \"test.properties\"), Charset.defaultCharset());\n        Assertions.assertEquals(expectedString, readModifiedContent);\n    }\n\n    @Test\n    void test_issue71_canSkipSeveralLines() throws Exception {\n        File tmp = new File(\"target/test/update/issue71\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/issues/issue-71/issue-71.txt.extended\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/issues/issue-71/issue-71-header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"txt.extended\", \"EXTENDED_STYLE\");\n            }\n        };\n        updater.defaultHeaderDefinitions = new String[]{ \"/issues/issue-71/issue-71-additionalHeaderDefinitions.xml\" };\n        updater.execute();\n        List<String> linesOfModifiedFile = Files.readLines(new File(tmp, \"issue-71.txt.extended\"), Charset.defaultCharset());\n        assertThat(linesOfModifiedFile.get(0)).isEqualTo(LS);\n        assertThat(linesOfModifiedFile.get(8)).isEqualTo(LS);\n    }\n\n    @Test\n    void test_issue37_RunningUpdaterTwiceMustNotChangeTheFile() throws Exception {\n        File tmp = new File(\"target/test/update/issue37\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue37/xwiki.xml\"), tmp);\n        LicenseFormatMojo execution1 = new LicenseFormatMojo();\n        execution1.defaultBasedir = tmp;\n        execution1.legacyConfigHeader = \"src/test/resources/update/issue37/xwiki-license.txt\";\n        execution1.project = new MavenProjectStub();\n        execution1.execute();\n        String execution1FileContent = FileUtils.read(new File(tmp, \"xwiki.xml\"), Charset.defaultCharset());\n        LicenseFormatMojo execution2 = new LicenseFormatMojo();\n        execution2.defaultBasedir = tmp;\n        execution2.legacyConfigHeader = \"src/test/resources/update/issue37/xwiki-license.txt\";\n        execution2.project = new MavenProjectStub();\n        execution2.execute();\n        String execution2FileContent = FileUtils.read(new File(tmp, \"xwiki.xml\"), Charset.defaultCharset());\n        assertThat(execution1FileContent).isEqualTo(execution2FileContent);\n    }\n\n    @Test\n    void test_UpdateWorksHasExpectedOnAOneLineCommentFile_relatesTo_issue30() throws Exception {\n        File tmp = new File(\"target/test/update/issue30\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue30/one-line-comment.ftl\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/single-line-header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        String expectedString = \"|||\\n\" + \"|||# Copyright (C) 2013 Salzburg Research.\\n\" + \"|||# Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\" + \"|||# you may not use this file except in compliance with the License.\\n\" + \"|||# You may obtain a copy of the License at\\n\" + \"|||#         http://www.apache.org/licenses/LICENSE-2.0\\n\" + \"|||# Unless required by applicable law or agreed to in writing, software\\n\" + \"|||# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\" + \"|||# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\" + \"|||# See the License for the specific language governing permissions and\\n\" + \"|||# limitations under the License.\\n\" + \"|||\";\n        String readModifiedContent = FileUtils.read(new File(tmp, \"one-line-comment.ftl\"), Charset.defaultCharset());\n        Assertions.assertEquals(expectedString, readModifiedContent);\n    }\n\n    @Test\n    void test_issue213() throws Exception {\n        File tmp = new File(\"target/test/update/issue213\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue213/test.xml\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        LicenseSet licenseSet = new LicenseSet();\n        licenseSet.basedir = tmp;\n        licenseSet.inlineHeader = \"All content copyright (c) 2003-2021 Bla, Inc., except as may\\n\" + \"  otherwise be noted in a separate copyright notice. All rights reserved.\";\n        updater.licenseSets = new LicenseSet[]{ licenseSet };\n        updater.project = new MavenProjectStub();\n        updater.execute();\n        Assertions.assertEquals(((((((((\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<!--\\n\") + \"\\n\") + \"    All content copyright (c) 2003-2021 Bla, Inc., except as may\\n\") + \"      otherwise be noted in a separate copyright notice. All rights reserved.\\n\") + \"\\n\") + \"-->\\n\\n\") + \"<top>\\n\") + \"  <element>value</element>\\n\") + \"</top>\\n\", FileUtils.read(new File(tmp, \"test.xml\"), Charset.defaultCharset()));\n    }\n\n    @Test\n    void test_issue71_underscore_in_package_name() throws Exception {\n        File tmp = new File(\"target/test/update/issue-187\");\n        tmp.mkdirs();\n        FileUtils.copyFileToFolder(new File(\"src/test/resources/update/issue-187/Main.java\"), tmp);\n        LicenseFormatMojo updater = new LicenseFormatMojo();\n        updater.defaultBasedir = tmp;\n        updater.legacyConfigHeader = \"src/test/resources/update/issue-187/header.txt\";\n        updater.project = new MavenProjectStub();\n        updater.mapping = new LinkedHashMap<>() {\n            {\n                put(\"java\", \"JAVAPKG_STYLE\");\n            }\n        };\n        updater.execute();\n        String processed = FileUtils.read(new File(tmp, \"Main.java\"), Charset.defaultCharset());\n        String expected = FileUtils.read(new File(\"src/test/resources/update/issue-187/expected.txt\"), Charset.defaultCharset());\n        assertThat(processed).isEqualTo(expected);\n    }\n}\n```<end_of_turn>"
}