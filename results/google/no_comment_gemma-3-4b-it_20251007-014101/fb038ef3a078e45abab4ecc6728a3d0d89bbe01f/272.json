{
    "absolute_path_to_file_in_container": "/license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java",
    "errors": [
        {
            "line_number": 21,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java:[21,45] package org.apache.maven.plugin.testing.stubs does not exist",
            "additional_info": "",
            "file_name": "ReportTest.java",
            "uid": "9c0cb70c-fb72-5954-b2e5-39fb76795a2b"
        },
        {
            "line_number": 22,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java:[22,45] package org.apache.maven.plugin.testing.stubs does not exist",
            "additional_info": "",
            "file_name": "ReportTest.java",
            "uid": "9c0cb70c-fb72-5954-b2e5-39fb76795a2b"
        },
        {
            "line_number": 37,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java:[37,3] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.ReportTest",
            "file_name": "ReportTest.java",
            "uid": "95da7a45-48ce-5df6-891b-cb6ae96ebe52"
        },
        {
            "line_number": 41,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java:[41,5] cannot find symbol",
            "additional_info": "  symbol:   class ArtifactStub\n  location: class com.mycila.maven.plugin.license.ReportTest",
            "file_name": "ReportTest.java",
            "uid": "752f0e11-511f-54a0-80cd-700295e7864c"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: maven-plugin-testing-harness 4.0.0-alpha-2->4.0.0-beta-4\n\nthe following client code fails: \n'''java\npackage com.mycila.maven.plugin.license;\nimport java.io.File;\nimport java.nio.charset.Charset;\nimport java.time.Clock;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport com.mycila.maven.plugin.license.util.FileUtils;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\nimport org.apache.maven.plugin.testing.stubs.ArtifactStub;\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nclass ReportTest {\n    MavenProjectStub mavenProjectStub = new MavenProjectStub();\n\n    @BeforeEach\n    void setUp() {\n        ArtifactStub artifact = new ArtifactStub();\n        mavenProjectStub.setArtifact(artifact);\n        artifact.setGroupId(\"com.mycila\");\n        artifact.setArtifactId(\"license-maven-plugin\");\n        artifact.setVersion(\"4.2-SNAPSHOT\");\n    }\n\n    @Test\n    void test_check_xml() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_check_xml\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        AbstractLicenseMojo plugin = new LicenseCheckMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.xml\");\n        try {\n            plugin.execute();\n            Assertions.fail();\n        } catch (MojoExecutionException | MojoFailureException e) {\n        }\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/check.xml\"), Charset.defaultCharset());\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_check_json() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_check_json\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        AbstractLicenseMojo plugin = new LicenseCheckMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.json\");\n        try {\n            plugin.execute();\n            Assertions.fail();\n        } catch (MojoExecutionException | MojoFailureException e) {\n        }\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/check.json\"), Charset.defaultCharset()).trim();\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_format_xml() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_format_xml\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        AbstractLicenseMojo plugin = new LicenseFormatMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.xml\");\n        plugin.execute();\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/format.xml\"), Charset.defaultCharset());\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_format_json() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_format_json\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        AbstractLicenseMojo plugin = new LicenseFormatMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.json\");\n        plugin.execute();\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/format.json\"), Charset.defaultCharset()).trim();\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_remove_xml() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_remove_xml\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        AbstractLicenseMojo plugin = new LicenseRemoveMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.xml\");\n        plugin.execute();\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/remove.xml\"), Charset.defaultCharset());\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_remove_json() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_remove_json\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        AbstractLicenseMojo plugin = new LicenseRemoveMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.json\");\n        plugin.execute();\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/remove.json\"), Charset.defaultCharset()).trim();\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    private static String unixify(String s) {\n        return s.replace(\"\\r\", \"\").replace(\"\\\\\", \"/\").replace(\"//\", \"/\");\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport org.apache.maven.plugin.testing.stubs.ArtifactStub;\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\n  MavenProjectStub mavenProjectStub = new MavenProjectStub();\n    ArtifactStub artifact = new ArtifactStub();\nwith the following error message:\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java:[21,45] package org.apache.maven.plugin.testing.stubs does not exist\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java:[22,45] package org.apache.maven.plugin.testing.stubs does not exist\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java:[37,3] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.ReportTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java:[41,5] cannot find symbol  symbol:   class ArtifactStub\n  location: class com.mycila.maven.plugin.license.ReportTest\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.apache.maven.plugin.testing.stubs.MavenProjectStub | DELETION | TYPE_REMOVED\norg.apache.maven.plugin.testing.stubs.ArtifactStub | DELETION | TYPE_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifactId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setGroupId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setVersion | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.MojoExecutionStub.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifact | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import org.apache.maven.plugin.testing.stubs.ArtifactStub;\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\n  MavenProjectStub mavenProjectStub = new MavenProjectStub();\n    ArtifactStub artifact = new ArtifactStub();",
    "error_message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java:[21,45] package org.apache.maven.plugin.testing.stubs does not exist\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java:[22,45] package org.apache.maven.plugin.testing.stubs does not exist\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java:[37,3] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.ReportTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/ReportTest.java:[41,5] cannot find symbol  symbol:   class ArtifactStub\n  location: class com.mycila.maven.plugin.license.ReportTest",
    "api_diff": "Format: element | nature | kind\norg.apache.maven.plugin.testing.stubs.MavenProjectStub | DELETION | TYPE_REMOVED\norg.apache.maven.plugin.testing.stubs.ArtifactStub | DELETION | TYPE_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifactId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setGroupId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setVersion | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.MojoExecutionStub.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifact | DELETION | METHOD_REMOVED",
    "original_code": "package com.mycila.maven.plugin.license;\nimport java.io.File;\nimport java.nio.charset.Charset;\nimport java.time.Clock;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport com.mycila.maven.plugin.license.util.FileUtils;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\nimport org.apache.maven.plugin.testing.stubs.ArtifactStub;\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nclass ReportTest {\n    MavenProjectStub mavenProjectStub = new MavenProjectStub();\n\n    @BeforeEach\n    void setUp() {\n        ArtifactStub artifact = new ArtifactStub();\n        mavenProjectStub.setArtifact(artifact);\n        artifact.setGroupId(\"com.mycila\");\n        artifact.setArtifactId(\"license-maven-plugin\");\n        artifact.setVersion(\"4.2-SNAPSHOT\");\n    }\n\n    @Test\n    void test_check_xml() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_check_xml\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        AbstractLicenseMojo plugin = new LicenseCheckMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.xml\");\n        try {\n            plugin.execute();\n            Assertions.fail();\n        } catch (MojoExecutionException | MojoFailureException e) {\n        }\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/check.xml\"), Charset.defaultCharset());\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_check_json() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_check_json\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        AbstractLicenseMojo plugin = new LicenseCheckMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.json\");\n        try {\n            plugin.execute();\n            Assertions.fail();\n        } catch (MojoExecutionException | MojoFailureException e) {\n        }\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/check.json\"), Charset.defaultCharset()).trim();\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_format_xml() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_format_xml\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        AbstractLicenseMojo plugin = new LicenseFormatMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.xml\");\n        plugin.execute();\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/format.xml\"), Charset.defaultCharset());\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_format_json() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_format_json\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        AbstractLicenseMojo plugin = new LicenseFormatMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.json\");\n        plugin.execute();\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/format.json\"), Charset.defaultCharset()).trim();\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_remove_xml() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_remove_xml\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        AbstractLicenseMojo plugin = new LicenseRemoveMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.xml\");\n        plugin.execute();\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/remove.xml\"), Charset.defaultCharset());\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_remove_json() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_remove_json\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        AbstractLicenseMojo plugin = new LicenseRemoveMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.json\");\n        plugin.execute();\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/remove.json\"), Charset.defaultCharset()).trim();\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    private static String unixify(String s) {\n        return s.replace(\"\\r\", \"\").replace(\"\\\\\", \"/\").replace(\"//\", \"/\");\n    }\n}\n",
    "project": "license-maven-plugin",
    "libraryName": "maven-plugin-testing-harness",
    "libraryGroupID": "org.apache.maven.plugin-testing",
    "newVersion": "4.0.0-beta-4",
    "previousVersion": "4.0.0-alpha-2",
    "breakingCommit": "fb038ef3a078e45abab4ecc6728a3d0d89bbe01f",
    "patch": "```java\npackage com.mycila.maven.plugin.license;\nimport java.io.File;\nimport java.nio.charset.Charset;\nimport java.time.Clock;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\nimport org.apache.maven.plugin.testing.stubs.ProjectStub;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nclass ReportTest {\n    ProjectStub mavenProjectStub;\n\n    @BeforeEach\n    void setUp() {\n        mavenProjectStub = new ProjectStub();\n        mavenProjectStub.setGroupId(\"com.mycila\");\n        mavenProjectStub.setArtifactId(\"license-maven-plugin\");\n        mavenProjectStub.setVersion(\"4.2-SNAPSHOT\");\n    }\n\n    @Test\n    void test_check_xml() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_check_xml\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        LicenseCheckMojo plugin = new LicenseCheckMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.xml\");\n        try {\n            plugin.execute();\n            Assertions.fail();\n        } catch (MojoExecutionException | MojoFailureException e) {\n        }\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/check.xml\"), Charset.defaultCharset());\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_check_json() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_check_json\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        LicenseCheckMojo plugin = new LicenseCheckMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.json\");\n        try {\n            plugin.execute();\n            Assertions.fail();\n        } catch (MojoExecutionException | MojoFailureException e) {\n        }\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/check.json\"), Charset.defaultCharset()).trim();\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_format_xml() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_format_xml\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        LicenseFormatMojo plugin = new LicenseFormatMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.xml\");\n        plugin.execute();\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/format.xml\"), Charset.defaultCharset());\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_format_json() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_format_json\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        LicenseFormatMojo plugin = new LicenseFormatMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.json\");\n        plugin.execute();\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/format.json\"), Charset.defaultCharset()).trim();\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_remove_xml() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_remove_xml\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        LicenseRemoveMojo plugin = new LicenseRemoveMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.xml\");\n        plugin.execute();\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/remove.xml\"), Charset.defaultCharset());\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    @Test\n    void test_remove_json() throws Exception {\n        File tmp = new File(\"target/test/issues/issue-122/test_remove_json\");\n        FileUtils.copyFilesToFolder(new File(\"src/test/resources/issues/issue-122\"), tmp);\n        LicenseRemoveMojo plugin = new LicenseRemoveMojo();\n        plugin.clock = Clock.fixed(Instant.ofEpochMilli(1631615047644L), ZoneId.systemDefault());\n        plugin.project = mavenProjectStub;\n        plugin.defaultBasedir = tmp;\n        plugin.legacyConfigHeader = \"src/test/resources/issues/issue-122/header.txt\";\n        plugin.legacyConfigIncludes = new String[]{ \"file*.*\" };\n        plugin.reportLocation = new File(tmp, \"report/license-plugin-report.json\");\n        plugin.execute();\n        String processed = unixify(FileUtils.read(plugin.reportLocation, Charset.defaultCharset()));\n        String expected = FileUtils.read(new File(\"src/test/resources/issues/issue-122/remove.json\"), Charset.defaultCharset()).trim();\n        assertThat(processed).isEqualTo(expected);\n    }\n\n    private static String unixify(String s) {\n        return s.replace(\"\\r\", \"\").replace(\"\\\\\", \"/\").replace(\"//\", \"/\");\n    }\n}\n```<end_of_turn>"
}