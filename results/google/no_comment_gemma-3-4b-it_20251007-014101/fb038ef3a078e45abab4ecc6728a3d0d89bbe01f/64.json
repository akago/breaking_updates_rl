{
    "absolute_path_to_file_in_container": "/license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java",
    "errors": [
        {
            "line_number": 19,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[19,45] package org.apache.maven.plugin.testing.stubs does not exist",
            "additional_info": "",
            "file_name": "HeaderMojoTest.java",
            "uid": "864e8720-cfae-501b-a25a-10992f571ce8"
        },
        {
            "line_number": 29,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[29,5] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest",
            "file_name": "HeaderMojoTest.java",
            "uid": "c2cd4789-1947-545b-bab9-0c04a86adac1"
        },
        {
            "line_number": 39,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[39,5] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest",
            "file_name": "HeaderMojoTest.java",
            "uid": "c2cd4789-1947-545b-bab9-0c04a86adac1"
        },
        {
            "line_number": 51,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[51,5] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest",
            "file_name": "HeaderMojoTest.java",
            "uid": "c2cd4789-1947-545b-bab9-0c04a86adac1"
        },
        {
            "line_number": 63,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[63,5] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest",
            "file_name": "HeaderMojoTest.java",
            "uid": "c2cd4789-1947-545b-bab9-0c04a86adac1"
        },
        {
            "line_number": 76,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[76,5] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest",
            "file_name": "HeaderMojoTest.java",
            "uid": "c2cd4789-1947-545b-bab9-0c04a86adac1"
        },
        {
            "line_number": 88,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[88,5] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest",
            "file_name": "HeaderMojoTest.java",
            "uid": "c2cd4789-1947-545b-bab9-0c04a86adac1"
        },
        {
            "line_number": 100,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[100,11] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest",
            "file_name": "HeaderMojoTest.java",
            "uid": "c2cd4789-1947-545b-bab9-0c04a86adac1"
        },
        {
            "line_number": 114,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[114,11] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest",
            "file_name": "HeaderMojoTest.java",
            "uid": "c2cd4789-1947-545b-bab9-0c04a86adac1"
        },
        {
            "line_number": 128,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[128,11] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest",
            "file_name": "HeaderMojoTest.java",
            "uid": "c2cd4789-1947-545b-bab9-0c04a86adac1"
        },
        {
            "line_number": 143,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[143,11] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest",
            "file_name": "HeaderMojoTest.java",
            "uid": "c2cd4789-1947-545b-bab9-0c04a86adac1"
        },
        {
            "line_number": 157,
            "message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[157,11] cannot find symbol",
            "additional_info": "  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest",
            "file_name": "HeaderMojoTest.java",
            "uid": "c2cd4789-1947-545b-bab9-0c04a86adac1"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: maven-plugin-testing-harness 4.0.0-alpha-2->4.0.0-beta-4\n\nthe following client code fails: \n'''java\npackage com.mycila.maven.plugin.license;\nimport java.io.File;\nimport java.nio.charset.StandardCharsets;\nimport com.mycila.maven.plugin.license.util.FileUtils;\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\nimport org.junit.jupiter.api.Test;\nclass HeaderMojoTest {\n    @Test\n    void test_create() throws Exception {\n        MavenProjectStub project = new MavenProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/main/resources/check\");\n        check.project = project;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_header_from_relative_file() throws Exception {\n        MavenProjectStub project = new MavenProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigHeader = \"header.txt\";\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_header_from_absolute_file() throws Exception {\n        MavenProjectStub project = new MavenProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigHeader = \"src/test/resources/check/header.txt\";\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_header_from_project_classpath() throws Exception {\n        MavenProjectStub project = new MavenProjectStub();\n        project.addCompileSourceRoot(\"src/test/resources/check/cp\");\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigHeader = \"header-in-cp.txt\";\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_header_from_plugin_classpath() throws Exception {\n        MavenProjectStub project = new MavenProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigHeader = \"test-header1.txt\";\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_inlineHeader() throws Exception {\n        MavenProjectStub project = new MavenProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigInlineHeader = FileUtils.read(new File(\"src/test/resources/check/header.txt\"), StandardCharsets.UTF_8);\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_multi_headers_from_relative_file() throws Exception {\n        final MavenProjectStub project = new MavenProjectStub();\n        final LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        final Multi multi = new Multi();\n        multi.setHeaders(new String[]{ \"header.txt\", \"header2.txt\" });\n        check.legacyConfigMulti = multi;\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_multi_headers_from_absolute_file() throws Exception {\n        final MavenProjectStub project = new MavenProjectStub();\n        final LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        final Multi multi = new Multi();\n        multi.setHeaders(new String[]{ \"src/test/resources/check/header.txt\", \"src/test/resources/check/header2.txt\" });\n        check.legacyConfigMulti = multi;\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_multi_headers_from_project_classpath() throws Exception {\n        final MavenProjectStub project = new MavenProjectStub();\n        project.addCompileSourceRoot(\"src/test/resources/check/cp\");\n        final LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        final Multi multi = new Multi();\n        multi.setHeaders(new String[]{ \"header-in-cp.txt\", \"header-in-cp.txt\" });\n        check.legacyConfigMulti = multi;\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_multi_headers_from_plugin_classpath() throws Exception {\n        final MavenProjectStub project = new MavenProjectStub();\n        final LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        final Multi multi = new Multi();\n        multi.setHeaders(new String[]{ \"test-header1.txt\", \"test-header2.txt\" });\n        check.legacyConfigMulti = multi;\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_multi_inlineHeader() throws Exception {\n        final MavenProjectStub project = new MavenProjectStub();\n        final LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        final Multi multi = new Multi();\n        multi.setInlineHeaders(new String[]{ FileUtils.read(new File(\"src/test/resources/check/header.txt\"), StandardCharsets.UTF_8), FileUtils.read(new File(\"src/test/resources/check/header2.txt\"), StandardCharsets.UTF_8) });\n        check.legacyConfigMulti = multi;\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\n    MavenProjectStub project = new MavenProjectStub();\n    MavenProjectStub project = new MavenProjectStub();\n    MavenProjectStub project = new MavenProjectStub();\n    MavenProjectStub project = new MavenProjectStub();\n    MavenProjectStub project = new MavenProjectStub();\n    MavenProjectStub project = new MavenProjectStub();\n    final MavenProjectStub project = new MavenProjectStub();\n    final MavenProjectStub project = new MavenProjectStub();\n    final MavenProjectStub project = new MavenProjectStub();\n    final MavenProjectStub project = new MavenProjectStub();\n    final MavenProjectStub project = new MavenProjectStub();\nwith the following error message:\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[19,45] package org.apache.maven.plugin.testing.stubs does not exist\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[29,5] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[39,5] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[51,5] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[63,5] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[76,5] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[88,5] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[100,11] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[114,11] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[128,11] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[143,11] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[157,11] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.apache.maven.plugin.testing.stubs.MavenProjectStub | DELETION | TYPE_REMOVED\norg.apache.maven.plugin.testing.stubs.ArtifactStub | DELETION | TYPE_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifactId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setGroupId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setVersion | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.MojoExecutionStub.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifact | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import org.apache.maven.plugin.testing.stubs.MavenProjectStub;\n    MavenProjectStub project = new MavenProjectStub();\n    MavenProjectStub project = new MavenProjectStub();\n    MavenProjectStub project = new MavenProjectStub();\n    MavenProjectStub project = new MavenProjectStub();\n    MavenProjectStub project = new MavenProjectStub();\n    MavenProjectStub project = new MavenProjectStub();\n    final MavenProjectStub project = new MavenProjectStub();\n    final MavenProjectStub project = new MavenProjectStub();\n    final MavenProjectStub project = new MavenProjectStub();\n    final MavenProjectStub project = new MavenProjectStub();\n    final MavenProjectStub project = new MavenProjectStub();",
    "error_message": "[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[19,45] package org.apache.maven.plugin.testing.stubs does not exist\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[29,5] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[39,5] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[51,5] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[63,5] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[76,5] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[88,5] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[100,11] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[114,11] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[128,11] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[143,11] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest\n[ERROR] /license-maven-plugin/license-maven-plugin/src/test/java/com/mycila/maven/plugin/license/HeaderMojoTest.java:[157,11] cannot find symbol  symbol:   class MavenProjectStub\n  location: class com.mycila.maven.plugin.license.HeaderMojoTest",
    "api_diff": "Format: element | nature | kind\norg.apache.maven.plugin.testing.stubs.MavenProjectStub | DELETION | TYPE_REMOVED\norg.apache.maven.plugin.testing.stubs.ArtifactStub | DELETION | TYPE_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifactId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setGroupId | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setVersion | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.apache.maven.api.plugin.testing.stubs.MojoExecutionStub.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.maven.api.plugin.testing.stubs.ProjectStub.setArtifact | DELETION | METHOD_REMOVED",
    "original_code": "package com.mycila.maven.plugin.license;\nimport java.io.File;\nimport java.nio.charset.StandardCharsets;\nimport com.mycila.maven.plugin.license.util.FileUtils;\nimport org.apache.maven.plugin.testing.stubs.MavenProjectStub;\nimport org.junit.jupiter.api.Test;\nclass HeaderMojoTest {\n    @Test\n    void test_create() throws Exception {\n        MavenProjectStub project = new MavenProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/main/resources/check\");\n        check.project = project;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_header_from_relative_file() throws Exception {\n        MavenProjectStub project = new MavenProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigHeader = \"header.txt\";\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_header_from_absolute_file() throws Exception {\n        MavenProjectStub project = new MavenProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigHeader = \"src/test/resources/check/header.txt\";\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_header_from_project_classpath() throws Exception {\n        MavenProjectStub project = new MavenProjectStub();\n        project.addCompileSourceRoot(\"src/test/resources/check/cp\");\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigHeader = \"header-in-cp.txt\";\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_header_from_plugin_classpath() throws Exception {\n        MavenProjectStub project = new MavenProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigHeader = \"test-header1.txt\";\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_inlineHeader() throws Exception {\n        MavenProjectStub project = new MavenProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigInlineHeader = FileUtils.read(new File(\"src/test/resources/check/header.txt\"), StandardCharsets.UTF_8);\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_multi_headers_from_relative_file() throws Exception {\n        final MavenProjectStub project = new MavenProjectStub();\n        final LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        final Multi multi = new Multi();\n        multi.setHeaders(new String[]{ \"header.txt\", \"header2.txt\" });\n        check.legacyConfigMulti = multi;\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_multi_headers_from_absolute_file() throws Exception {\n        final MavenProjectStub project = new MavenProjectStub();\n        final LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        final Multi multi = new Multi();\n        multi.setHeaders(new String[]{ \"src/test/resources/check/header.txt\", \"src/test/resources/check/header2.txt\" });\n        check.legacyConfigMulti = multi;\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_multi_headers_from_project_classpath() throws Exception {\n        final MavenProjectStub project = new MavenProjectStub();\n        project.addCompileSourceRoot(\"src/test/resources/check/cp\");\n        final LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        final Multi multi = new Multi();\n        multi.setHeaders(new String[]{ \"header-in-cp.txt\", \"header-in-cp.txt\" });\n        check.legacyConfigMulti = multi;\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_multi_headers_from_plugin_classpath() throws Exception {\n        final MavenProjectStub project = new MavenProjectStub();\n        final LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        final Multi multi = new Multi();\n        multi.setHeaders(new String[]{ \"test-header1.txt\", \"test-header2.txt\" });\n        check.legacyConfigMulti = multi;\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_multi_inlineHeader() throws Exception {\n        final MavenProjectStub project = new MavenProjectStub();\n        final LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        final Multi multi = new Multi();\n        multi.setInlineHeaders(new String[]{ FileUtils.read(new File(\"src/test/resources/check/header.txt\"), StandardCharsets.UTF_8), FileUtils.read(new File(\"src/test/resources/check/header2.txt\"), StandardCharsets.UTF_8) });\n        check.legacyConfigMulti = multi;\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n}\n",
    "project": "license-maven-plugin",
    "libraryName": "maven-plugin-testing-harness",
    "libraryGroupID": "org.apache.maven.plugin-testing",
    "newVersion": "4.0.0-beta-4",
    "previousVersion": "4.0.0-alpha-2",
    "breakingCommit": "fb038ef3a078e45abab4ecc6728a3d0d89bbe01f",
    "patch": "```java\npackage com.mycila.maven.plugin.license;\n\nimport java.io.File;\nimport java.nio.charset.StandardCharsets;\nimport com.mycila.maven.plugin.license.util.FileUtils;\nimport org.apache.maven.plugin.testing.stubs.ProjectStub;\nimport org.junit.jupiter.api.Test;\nclass HeaderMojoTest {\n    @Test\n    void test_create() throws Exception {\n        ProjectStub project = new ProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/main/resources/check\");\n        check.project = project;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_header_from_relative_file() throws Exception {\n        ProjectStub project = new ProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigHeader = \"header.txt\";\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_header_from_absolute_file() throws Exception {\n        ProjectStub project = new ProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigHeader = \"src/test/resources/check/header.txt\";\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_header_from_project_classpath() throws Exception {\n        ProjectStub project = new ProjectStub();\n        project.addCompileSourceRoot(\"src/test/resources/check/cp\");\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigHeader = \"header-in-cp.txt\";\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_header_from_plugin_classpath() throws Exception {\n        ProjectStub project = new ProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigHeader = \"test-header1.txt\";\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_inlineHeader() throws Exception {\n        ProjectStub project = new ProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigInlineHeader = FileUtils.read(new File(\"src/test/resources/check/header.txt\"), StandardCharsets.UTF_8);\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_multi_headers_from_relative_file() throws Exception {\n        ProjectStub project = new ProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigMulti = new Multi();\n        check.legacyConfigMulti.setHeaders(new String[] { \"header.txt\", \"header2.txt\" });\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_multi_headers_from_absolute_file() throws Exception {\n        ProjectStub project = new ProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigMulti = new Multi();\n        check.legacyConfigMulti.setHeaders(new String[] { \"src/test/resources/check/header.txt\", \"src/test/resources/check/header2.txt\" });\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_multi_headers_from_project_classpath() throws Exception {\n        ProjectStub project = new ProjectStub();\n        project.addCompileSourceRoot(\"src/test/resources/check/cp\");\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigMulti = new Multi();\n        check.legacyConfigMulti.setHeaders(new String[] { \"header-in-cp.txt\", \"header-in-cp.txt\" });\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_load_multi_headers_from_plugin_classpath() throws Exception {\n        ProjectStub project = new ProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigMulti = new Multi();\n        check.legacyConfigMulti.setHeaders(new String[] { \"test-header1.txt\", \"test-header2.txt\" });\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n\n    @Test\n    void test_multi_inlineHeader() throws Exception {\n        ProjectStub project = new ProjectStub();\n        LicenseCheckMojo check = new LicenseCheckMojo();\n        check.defaultBasedir = new File(\"src/test/resources/check\");\n        check.legacyConfigMulti = new Multi();\n        check.legacyConfigMulti.setInlineHeaders(new String[] { FileUtils.read(new File(\"src/test/resources/check/header.txt\"), StandardCharsets.UTF_8), FileUtils.read(new File(\"src/test/resources/check/header2.txt\"), StandardCharsets.UTF_8) });\n        check.project = project;\n        check.failIfMissing = false;\n        check.strictCheck = true;\n        check.execute();\n    }\n}\n```<end_of_turn>"
}