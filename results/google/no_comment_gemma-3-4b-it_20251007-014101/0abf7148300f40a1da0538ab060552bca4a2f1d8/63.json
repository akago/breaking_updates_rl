{
    "absolute_path_to_file_in_container": "/biapi/src/main/java/xdev/tableexport/export/ReportBuilder.java",
    "errors": [
        {
            "line_number": 369,
            "message": "[ERROR] /biapi/src/main/java/xdev/tableexport/export/ReportBuilder.java:[369,81] incompatible types: int cannot be converted to java.lang.Float",
            "additional_info": "",
            "file_name": "ReportBuilder.java",
            "uid": "c3a6d5f2-decb-5e45-b97c-c354898a4e27"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: jasperreports 6.18.1->6.19.1\n\nthe following client code fails: \n'''java\npackage xdev.tableexport.export;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.util.HashSet;\nimport java.util.Set;\nimport javax.swing.JLabel;\nimport net.sf.jasperreports.engine.JRException;\nimport net.sf.jasperreports.engine.JRLineBox;\nimport net.sf.jasperreports.engine.JasperCompileManager;\nimport net.sf.jasperreports.engine.JasperReport;\nimport net.sf.jasperreports.engine.design.JRDesignBand;\nimport net.sf.jasperreports.engine.design.JRDesignExpression;\nimport net.sf.jasperreports.engine.design.JRDesignField;\nimport net.sf.jasperreports.engine.design.JRDesignSection;\nimport net.sf.jasperreports.engine.design.JRDesignStaticText;\nimport net.sf.jasperreports.engine.design.JRDesignTextElement;\nimport net.sf.jasperreports.engine.design.JRDesignTextField;\nimport net.sf.jasperreports.engine.design.JasperDesign;\nimport net.sf.jasperreports.engine.type.ModeEnum;\nimport net.sf.jasperreports.engine.type.PositionTypeEnum;\nimport net.sf.jasperreports.engine.type.SplitTypeEnum;\nimport xdev.tableexport.config.ColumnBorder;\nimport xdev.tableexport.config.ColumnPadding;\nimport xdev.tableexport.config.ColumnStyle;\nimport xdev.tableexport.config.ContentColumn;\nimport xdev.tableexport.config.HeaderColumn;\nimport xdev.tableexport.config.PageProperties;\nimport xdev.tableexport.config.TemplateColumn;\nimport xdev.tableexport.config.TemplateConfig;\nimport xdev.vt.XdevBlob;\nimport xdev.vt.XdevClob;\npublic class ReportBuilder {\n    private final TemplateConfig config;\n\n    private final Set<JRDesignField> fieldSet = new HashSet<>();\n\n    public ReportBuilder(final TemplateConfig tempConfig) {\n        this.config = tempConfig;\n    }\n\n    private JRDesignBand initDetailBand() {\n        final JRDesignBand detailBand = new JRDesignBand();\n        detailBand.setHeight(TemplateConfig.DEFAULT_DETAIL_BAND_HEIGHT);\n        detailBand.setSplitType(SplitTypeEnum.STRETCH);\n        return detailBand;\n    }\n\n    private JRDesignBand initHeaderBand() {\n        final JRDesignBand headerBand = new JRDesignBand();\n        headerBand.setHeight(TemplateConfig.DEFAULT_HEADER_BAND_HEIGHT);\n        return headerBand;\n    }\n\n    private JasperDesign createDefaultDesign() {\n        final JasperDesign jasperDesign = new JasperDesign();\n        jasperDesign.setName(\"DefaultDesign\");\n        final PageProperties properties = this.config.getPageProperties();\n        jasperDesign.setPageWidth(this.calcPageWidth(properties));\n        jasperDesign.setColumnWidth(this.calcColumnsWidth());\n        jasperDesign.setPageHeight(properties.getPageHeight());\n        jasperDesign.setColumnSpacing(properties.getColumnSpacing());\n        jasperDesign.setLeftMargin(properties.getLeftMargin());\n        jasperDesign.setRightMargin(properties.getRightMargin());\n        jasperDesign.setTopMargin(properties.getTopMargin());\n        jasperDesign.setBottomMargin(properties.getBottomMargin());\n        return jasperDesign;\n    }\n\n    private int calcColumnsWidth() {\n        int width = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            width += col.getWidth();\n        }\n        return width;\n    }\n\n    private int calcPageWidth(final PageProperties properties) {\n        int width = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            width += col.getWidth();\n        }\n        width += properties.getLeftMargin() + properties.getRightMargin();\n        return width;\n    }\n\n    private int calcMaxHeaderHeight() {\n        final JLabel lbl = new JLabel(\"a\");\n        int maxHeight = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            final ColumnStyle style = col.getHeaderColumn().getStyle();\n            final Font font = style.getFont();\n            lbl.setFont(font);\n            int lblHeigh = ((int) (lbl.getPreferredSize().getHeight()));\n            lblHeigh += style.getColBorder().getLineWidth() * 2;\n            lblHeigh += style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n            if (lblHeigh > maxHeight) {\n                maxHeight = lblHeigh;\n            }\n        }\n        return maxHeight;\n    }\n\n    private int calcMaxContentHeight() {\n        final JLabel lbl = new JLabel(\"a\");\n        int maxHeight = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            final ColumnStyle style = col.getContentColumn().getStyle();\n            final Font font = style.getFont();\n            lbl.setFont(font);\n            int lblHeigh = ((int) (lbl.getPreferredSize().getHeight()));\n            lblHeigh += style.getColBorder().getLineWidth() * 2;\n            lblHeigh += style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n            if (lblHeigh > maxHeight) {\n                maxHeight = lblHeigh;\n            }\n        }\n        return maxHeight;\n    }\n\n    private void createTemplateFields(final JasperDesign jasperDesign) throws ExportException {\n        JRDesignField field;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            field = new JRDesignField();\n            field.setName(col.getContentColumn().getFieldName());\n            this.chooseValueClass(col, field);\n            try {\n                jasperDesign.addField(field);\n                this.fieldSet.add(field);\n            } catch (final JRException e) {\n                throw new ExportException(\"error during add the field \" + col.getContentColumn().getFieldName(), e);\n            }\n        }\n    }\n\n    private JRDesignField chooseValueClass(final TemplateColumn col, final JRDesignField field) {\n        final Class<?> valueClass = col.getContentColumn().getColumnValueClass();\n        if ((valueClass.isAssignableFrom(byte[].class) || valueClass.isAssignableFrom(XdevBlob.class)) || valueClass.isAssignableFrom(XdevClob.class)) {\n            field.setValueClass(String.class);\n        } else {\n            field.setValueClass(valueClass);\n        }\n        return field;\n    }\n\n    private void createHeaderAndContent(final JRDesignBand headerBand, final JRDesignBand detailBand) {\n        JRDesignStaticText headerLabel;\n        JRDesignStaticText emptyHeaderLabel;\n        JRDesignTextField textField;\n        final int headerLabelHeight = this.calcMaxHeaderHeight();\n        headerBand.setHeight(headerLabelHeight);\n        final int contentLabelHeight = this.calcMaxContentHeight();\n        detailBand.setHeight(contentLabelHeight);\n        final boolean createHeader = this.config.hasAnyHeader();\n        int x = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            if (createHeader) {\n                if (col.hasHeaderColumn()) {\n                    final HeaderColumn headerColumn = col.getHeaderColumn();\n                    headerLabel = new JRDesignStaticText();\n                    headerLabel.setX(x);\n                    headerLabel.setWidth(col.getWidth());\n                    headerLabel.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n                    headerLabel.setHeight(headerLabelHeight);\n                    this.setStlyeForTextField(headerLabel, headerColumn.getStyle());\n                    this.prepareTextfieldWithBorder(headerLabel, headerColumn.getStyle());\n                    this.prepareTextfieldPadding(headerLabel, headerColumn.getStyle());\n                    headerLabel.setPositionType(PositionTypeEnum.FLOAT);\n                    headerLabel.setText(headerColumn.getProperty());\n                    headerBand.addElement(headerLabel);\n                } else {\n                    emptyHeaderLabel = new JRDesignStaticText();\n                    emptyHeaderLabel.setX(x);\n                    emptyHeaderLabel.setWidth(col.getWidth());\n                    headerBand.addElement(emptyHeaderLabel);\n                }\n            }\n            final ContentColumn contentColumn = col.getContentColumn();\n            textField = new JRDesignTextField();\n            textField.setX(x);\n            textField.setWidth(col.getWidth());\n            textField.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n            textField.setHeight(contentLabelHeight);\n            this.setStlyeForTextField(textField, contentColumn.getStyle());\n            textField.setPattern(contentColumn.getProperty());\n            this.prepareTextfieldWithBorder(textField, contentColumn.getStyle());\n            this.prepareTextfieldPadding(textField, contentColumn.getStyle());\n            textField.setExpression(this.buildExpression(contentColumn));\n            textField.setPositionType(PositionTypeEnum.FLOAT);\n            if (this.config.isBlankWhenNullValue()) {\n                textField.setBlankWhenNull(true);\n            }\n            detailBand.addElement(textField);\n            x += col.getWidth();\n        }\n    }\n\n    private void setStlyeForTextField(final JRDesignTextElement txtField, final ColumnStyle style) {\n        txtField.setBackcolor(style.getBackground());\n        txtField.setForecolor(style.getForeground());\n        final Font f = style.getFont();\n        txtField.setFontName(f.getName());\n        txtField.setFontSize(Float.valueOf(f.getSize()));\n        txtField.setBold(Boolean.valueOf(f.isBold()));\n        txtField.setItalic(Boolean.valueOf(f.isItalic()));\n        txtField.setHorizontalTextAlign(style.getHorizontalAlignment().getHorizontalTextAlignEnum());\n        if (!style.getBackground().equals(Color.WHITE)) {\n            txtField.setMode(ModeEnum.OPAQUE);\n        }\n    }\n\n    private void prepareTextfieldWithBorder(final JRDesignTextElement textField, final ColumnStyle style) {\n        final ColumnBorder border = style.getColBorder();\n        if (border == null) {\n            return;\n        }\n        textField.getLineBox().getPen().setLineWidth(border.getLineWidth());\n        textField.getLineBox().getPen().setLineColor(border.getLineColor());\n        textField.getLineBox().getPen().setLineStyle(border.getLineStyle().getLineStyleEnum());\n    }\n\n    private void prepareTextfieldPadding(final JRDesignTextElement textField, final ColumnStyle style) {\n        final ColumnPadding colPadding = style.getColumnPadding();\n        final JRLineBox lineBox = textField.getLineBox();\n        lineBox.setTopPadding(colPadding.getTopWidth());\n        lineBox.setRightPadding(colPadding.getRightWidth());\n        lineBox.setLeftPadding(colPadding.getLeftWidth());\n        lineBox.setBottomPadding(colPadding.getBottomWidth());\n    }\n\n    private JRDesignExpression buildExpression(final ContentColumn column) {\n        final JRDesignExpression expression = new JRDesignExpression();\n        expression.setText((\"$F{\" + column.getFieldName()) + \"}\");\n        return expression;\n    }\n\n    public JasperReport assembleReport() throws ExportException {\n        try {\n            final JasperDesign jasperDesign = this.createDefaultDesign();\n            this.createTemplateFields(jasperDesign);\n            final JRDesignBand headerBand = this.initHeaderBand();\n            final JRDesignBand detailBand = this.initDetailBand();\n            this.createHeaderAndContent(headerBand, detailBand);\n            ((JRDesignSection) (jasperDesign.getDetailSection())).addBand(detailBand);\n            if (this.config.hasAnyHeader()) {\n                jasperDesign.setTitle(headerBand);\n            }\n            return JasperCompileManager.compileReport(jasperDesign);\n        } catch (final Exception e) {\n            throw new ExportException(e);\n        }\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n\t\ttextField.getLineBox().getPen().setLineWidth(border.getLineWidth());\nwith the following error message:\n[ERROR] /biapi/src/main/java/xdev/tableexport/export/ReportBuilder.java:[369,81] incompatible types: int cannot be converted to java.lang.Float\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setBold | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setItalic | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setUnderline | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setStrikeThrough | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setPdfEmbedded | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "\t\ttextField.getLineBox().getPen().setLineWidth(border.getLineWidth());",
    "error_message": "[ERROR] /biapi/src/main/java/xdev/tableexport/export/ReportBuilder.java:[369,81] incompatible types: int cannot be converted to java.lang.Float",
    "api_diff": "Format: element | nature | kind\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setBold | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setItalic | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setUnderline | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setStrikeThrough | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setPdfEmbedded | DELETION | METHOD_REMOVED",
    "original_code": "package xdev.tableexport.export;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.util.HashSet;\nimport java.util.Set;\nimport javax.swing.JLabel;\nimport net.sf.jasperreports.engine.JRException;\nimport net.sf.jasperreports.engine.JRLineBox;\nimport net.sf.jasperreports.engine.JasperCompileManager;\nimport net.sf.jasperreports.engine.JasperReport;\nimport net.sf.jasperreports.engine.design.JRDesignBand;\nimport net.sf.jasperreports.engine.design.JRDesignExpression;\nimport net.sf.jasperreports.engine.design.JRDesignField;\nimport net.sf.jasperreports.engine.design.JRDesignSection;\nimport net.sf.jasperreports.engine.design.JRDesignStaticText;\nimport net.sf.jasperreports.engine.design.JRDesignTextElement;\nimport net.sf.jasperreports.engine.design.JRDesignTextField;\nimport net.sf.jasperreports.engine.design.JasperDesign;\nimport net.sf.jasperreports.engine.type.ModeEnum;\nimport net.sf.jasperreports.engine.type.PositionTypeEnum;\nimport net.sf.jasperreports.engine.type.SplitTypeEnum;\nimport xdev.tableexport.config.ColumnBorder;\nimport xdev.tableexport.config.ColumnPadding;\nimport xdev.tableexport.config.ColumnStyle;\nimport xdev.tableexport.config.ContentColumn;\nimport xdev.tableexport.config.HeaderColumn;\nimport xdev.tableexport.config.PageProperties;\nimport xdev.tableexport.config.TemplateColumn;\nimport xdev.tableexport.config.TemplateConfig;\nimport xdev.vt.XdevBlob;\nimport xdev.vt.XdevClob;\npublic class ReportBuilder {\n    private final TemplateConfig config;\n\n    private final Set<JRDesignField> fieldSet = new HashSet<>();\n\n    public ReportBuilder(final TemplateConfig tempConfig) {\n        this.config = tempConfig;\n    }\n\n    private JRDesignBand initDetailBand() {\n        final JRDesignBand detailBand = new JRDesignBand();\n        detailBand.setHeight(TemplateConfig.DEFAULT_DETAIL_BAND_HEIGHT);\n        detailBand.setSplitType(SplitTypeEnum.STRETCH);\n        return detailBand;\n    }\n\n    private JRDesignBand initHeaderBand() {\n        final JRDesignBand headerBand = new JRDesignBand();\n        headerBand.setHeight(TemplateConfig.DEFAULT_HEADER_BAND_HEIGHT);\n        return headerBand;\n    }\n\n    private JasperDesign createDefaultDesign() {\n        final JasperDesign jasperDesign = new JasperDesign();\n        jasperDesign.setName(\"DefaultDesign\");\n        final PageProperties properties = this.config.getPageProperties();\n        jasperDesign.setPageWidth(this.calcPageWidth(properties));\n        jasperDesign.setColumnWidth(this.calcColumnsWidth());\n        jasperDesign.setPageHeight(properties.getPageHeight());\n        jasperDesign.setColumnSpacing(properties.getColumnSpacing());\n        jasperDesign.setLeftMargin(properties.getLeftMargin());\n        jasperDesign.setRightMargin(properties.getRightMargin());\n        jasperDesign.setTopMargin(properties.getTopMargin());\n        jasperDesign.setBottomMargin(properties.getBottomMargin());\n        return jasperDesign;\n    }\n\n    private int calcColumnsWidth() {\n        int width = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            width += col.getWidth();\n        }\n        return width;\n    }\n\n    private int calcPageWidth(final PageProperties properties) {\n        int width = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            width += col.getWidth();\n        }\n        width += properties.getLeftMargin() + properties.getRightMargin();\n        return width;\n    }\n\n    private int calcMaxHeaderHeight() {\n        final JLabel lbl = new JLabel(\"a\");\n        int maxHeight = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            final ColumnStyle style = col.getHeaderColumn().getStyle();\n            final Font font = style.getFont();\n            lbl.setFont(font);\n            int lblHeigh = ((int) (lbl.getPreferredSize().getHeight()));\n            lblHeigh += style.getColBorder().getLineWidth() * 2;\n            lblHeigh += style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n            if (lblHeigh > maxHeight) {\n                maxHeight = lblHeigh;\n            }\n        }\n        return maxHeight;\n    }\n\n    private int calcMaxContentHeight() {\n        final JLabel lbl = new JLabel(\"a\");\n        int maxHeight = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            final ColumnStyle style = col.getContentColumn().getStyle();\n            final Font font = style.getFont();\n            lbl.setFont(font);\n            int lblHeigh = ((int) (lbl.getPreferredSize().getHeight()));\n            lblHeigh += style.getColBorder().getLineWidth() * 2;\n            lblHeigh += style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n            if (lblHeigh > maxHeight) {\n                maxHeight = lblHeigh;\n            }\n        }\n        return maxHeight;\n    }\n\n    private void createTemplateFields(final JasperDesign jasperDesign) throws ExportException {\n        JRDesignField field;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            field = new JRDesignField();\n            field.setName(col.getContentColumn().getFieldName());\n            this.chooseValueClass(col, field);\n            try {\n                jasperDesign.addField(field);\n                this.fieldSet.add(field);\n            } catch (final JRException e) {\n                throw new ExportException(\"error during add the field \" + col.getContentColumn().getFieldName(), e);\n            }\n        }\n    }\n\n    private JRDesignField chooseValueClass(final TemplateColumn col, final JRDesignField field) {\n        final Class<?> valueClass = col.getContentColumn().getColumnValueClass();\n        if ((valueClass.isAssignableFrom(byte[].class) || valueClass.isAssignableFrom(XdevBlob.class)) || valueClass.isAssignableFrom(XdevClob.class)) {\n            field.setValueClass(String.class);\n        } else {\n            field.setValueClass(valueClass);\n        }\n        return field;\n    }\n\n    private void createHeaderAndContent(final JRDesignBand headerBand, final JRDesignBand detailBand) {\n        JRDesignStaticText headerLabel;\n        JRDesignStaticText emptyHeaderLabel;\n        JRDesignTextField textField;\n        final int headerLabelHeight = this.calcMaxHeaderHeight();\n        headerBand.setHeight(headerLabelHeight);\n        final int contentLabelHeight = this.calcMaxContentHeight();\n        detailBand.setHeight(contentLabelHeight);\n        final boolean createHeader = this.config.hasAnyHeader();\n        int x = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            if (createHeader) {\n                if (col.hasHeaderColumn()) {\n                    final HeaderColumn headerColumn = col.getHeaderColumn();\n                    headerLabel = new JRDesignStaticText();\n                    headerLabel.setX(x);\n                    headerLabel.setWidth(col.getWidth());\n                    headerLabel.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n                    headerLabel.setHeight(headerLabelHeight);\n                    this.setStlyeForTextField(headerLabel, headerColumn.getStyle());\n                    this.prepareTextfieldWithBorder(headerLabel, headerColumn.getStyle());\n                    this.prepareTextfieldPadding(headerLabel, headerColumn.getStyle());\n                    headerLabel.setPositionType(PositionTypeEnum.FLOAT);\n                    headerLabel.setText(headerColumn.getProperty());\n                    headerBand.addElement(headerLabel);\n                } else {\n                    emptyHeaderLabel = new JRDesignStaticText();\n                    emptyHeaderLabel.setX(x);\n                    emptyHeaderLabel.setWidth(col.getWidth());\n                    headerBand.addElement(emptyHeaderLabel);\n                }\n            }\n            final ContentColumn contentColumn = col.getContentColumn();\n            textField = new JRDesignTextField();\n            textField.setX(x);\n            textField.setWidth(col.getWidth());\n            textField.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n            textField.setHeight(contentLabelHeight);\n            this.setStlyeForTextField(textField, contentColumn.getStyle());\n            textField.setPattern(contentColumn.getProperty());\n            this.prepareTextfieldWithBorder(textField, contentColumn.getStyle());\n            this.prepareTextfieldPadding(textField, contentColumn.getStyle());\n            textField.setExpression(this.buildExpression(contentColumn));\n            textField.setPositionType(PositionTypeEnum.FLOAT);\n            if (this.config.isBlankWhenNullValue()) {\n                textField.setBlankWhenNull(true);\n            }\n            detailBand.addElement(textField);\n            x += col.getWidth();\n        }\n    }\n\n    private void setStlyeForTextField(final JRDesignTextElement txtField, final ColumnStyle style) {\n        txtField.setBackcolor(style.getBackground());\n        txtField.setForecolor(style.getForeground());\n        final Font f = style.getFont();\n        txtField.setFontName(f.getName());\n        txtField.setFontSize(Float.valueOf(f.getSize()));\n        txtField.setBold(Boolean.valueOf(f.isBold()));\n        txtField.setItalic(Boolean.valueOf(f.isItalic()));\n        txtField.setHorizontalTextAlign(style.getHorizontalAlignment().getHorizontalTextAlignEnum());\n        if (!style.getBackground().equals(Color.WHITE)) {\n            txtField.setMode(ModeEnum.OPAQUE);\n        }\n    }\n\n    private void prepareTextfieldWithBorder(final JRDesignTextElement textField, final ColumnStyle style) {\n        final ColumnBorder border = style.getColBorder();\n        if (border == null) {\n            return;\n        }\n        textField.getLineBox().getPen().setLineWidth(border.getLineWidth());\n        textField.getLineBox().getPen().setLineColor(border.getLineColor());\n        textField.getLineBox().getPen().setLineStyle(border.getLineStyle().getLineStyleEnum());\n    }\n\n    private void prepareTextfieldPadding(final JRDesignTextElement textField, final ColumnStyle style) {\n        final ColumnPadding colPadding = style.getColumnPadding();\n        final JRLineBox lineBox = textField.getLineBox();\n        lineBox.setTopPadding(colPadding.getTopWidth());\n        lineBox.setRightPadding(colPadding.getRightWidth());\n        lineBox.setLeftPadding(colPadding.getLeftWidth());\n        lineBox.setBottomPadding(colPadding.getBottomWidth());\n    }\n\n    private JRDesignExpression buildExpression(final ContentColumn column) {\n        final JRDesignExpression expression = new JRDesignExpression();\n        expression.setText((\"$F{\" + column.getFieldName()) + \"}\");\n        return expression;\n    }\n\n    public JasperReport assembleReport() throws ExportException {\n        try {\n            final JasperDesign jasperDesign = this.createDefaultDesign();\n            this.createTemplateFields(jasperDesign);\n            final JRDesignBand headerBand = this.initHeaderBand();\n            final JRDesignBand detailBand = this.initDetailBand();\n            this.createHeaderAndContent(headerBand, detailBand);\n            ((JRDesignSection) (jasperDesign.getDetailSection())).addBand(detailBand);\n            if (this.config.hasAnyHeader()) {\n                jasperDesign.setTitle(headerBand);\n            }\n            return JasperCompileManager.compileReport(jasperDesign);\n        } catch (final Exception e) {\n            throw new ExportException(e);\n        }\n    }\n}\n",
    "project": "biapi",
    "libraryName": "jasperreports",
    "libraryGroupID": "net.sf.jasperreports",
    "newVersion": "6.19.1",
    "previousVersion": "6.18.1",
    "breakingCommit": "0abf7148300f40a1da0538ab060552bca4a2f1d8",
    "patch": "```java\npackage xdev.tableexport.export;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.util.HashSet;\nimport java.util.Set;\nimport javax.swing.JLabel;\nimport net.sf.jasperreports.engine.JRException;\nimport net.sf.jasperreports.engine.JRLineBox;\nimport net.sf.jasperreports.engine.JasperCompileManager;\nimport net.sf.jasperreports.engine.JasperReport;\nimport net.sf.jasperreports.engine.design.JRDesignBand;\nimport net.sf.jasperreports.engine.design.JRDesignExpression;\nimport net.sf.jasperreports.engine.design.JRDesignField;\nimport net.sf.jasperreports.engine.design.JRDesignSection;\nimport net.sf.jasperreports.engine.design.JRDesignStaticText;\nimport net.sf.jasperreports.engine.design.JasperDesign;\nimport net.sf.jasperreports.engine.type.ModeEnum;\nimport net.sf.jasperreports.engine.type.PositionTypeEnum;\nimport net.sf.jasperreports.engine.type.SplitTypeEnum;\n\npublic class ReportBuilder {\n    private final TemplateConfig config;\n\n    private final Set<JRDesignField> fieldSet = new HashSet<>();\n\n    public ReportBuilder(final TemplateConfig tempConfig) {\n        this.config = tempConfig;\n    }\n\n    private JRDesignBand initDetailBand() {\n        final JRDesignBand detailBand = new JRDesignBand();\n        detailBand.setHeight(TemplateConfig.DEFAULT_DETAIL_BAND_HEIGHT);\n        detailBand.setSplitType(SplitTypeEnum.STRETCH);\n        return detailBand;\n    }\n\n    private JRDesignBand initHeaderBand() {\n        final JRDesignBand headerBand = new JRDesignBand();\n        headerBand.setHeight(TemplateConfig.DEFAULT_HEADER_BAND_HEIGHT);\n        return headerBand;\n    }\n\n    private JasperDesign createDefaultDesign() {\n        final JasperDesign jasperDesign = new JasperDesign();\n        jasperDesign.setName(\"DefaultDesign\");\n        final PageProperties properties = this.config.getPageProperties();\n        jasperDesign.setPageWidth(this.calcPageWidth(properties));\n        jasperDesign.setColumnWidth(this.calcColumnsWidth());\n        jasperDesign.setPageHeight(properties.getPageHeight());\n        jasperDesign.setColumnSpacing(properties.getColumnSpacing());\n        jasperDesign.setLeftMargin(properties.getLeftMargin());\n        jasperDesign.setRightMargin(properties.getRightMargin());\n        jasperDesign.setTopMargin(properties.getTopMargin());\n        jasperDesign.setBottomMargin(properties.getBottomMargin());\n        return jasperDesign;\n    }\n\n    private int calcColumnsWidth() {\n        int width = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            width += col.getWidth();\n        }\n        return width;\n    }\n\n    private int calcPageWidth(final PageProperties properties) {\n        int width = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            width += col.getWidth();\n        }\n        width += properties.getLeftMargin() + properties.getRightMargin();\n        return width;\n    }\n\n    private int calcMaxHeaderHeight() {\n        final JLabel lbl = new JLabel(\"a\");\n        int maxHeight = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            final ColumnStyle style = col.getHeaderColumn().getStyle();\n            final Font font = style.getFont();\n            lbl.setFont(font);\n            int lblHeigh = ((int) (lbl.getPreferredSize().getHeight()));\n            lblHeigh += style.getColBorder().getLineWidth() * 2;\n            lblHeigh += style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n            if (lblHeigh > maxHeight) {\n                maxHeight = lblHeigh;\n            }\n        }\n        return maxHeight;\n    }\n\n    private int calcMaxContentHeight() {\n        final JLabel lbl = new JLabel(\"a\");\n        int maxHeight = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            final ColumnStyle style = col.getContentColumn().getStyle();\n            final Font font = style.getFont();\n            lbl.setFont(font);\n            int lblHeigh = ((int) (lbl.getPreferredSize().getHeight()));\n            lblHeigh += style.getColBorder().getLineWidth() * 2;\n            lblHeigh += style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n            if (lblHeigh > maxHeight) {\n                maxHeight = lblHeigh;\n            }\n        }\n        return maxHeight;\n    }\n\n    private void createTemplateFields(final JasperDesign jasperDesign) throws ExportException {\n        JRDesignField field;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            field = new JRDesignField();\n            field.setName(col.getContentColumn().getFieldName());\n            this.chooseValueClass(col, field);\n            try {\n                jasperDesign.addField(field);\n                this.fieldSet.add(field);\n            } catch (final JRException e) {\n                throw new ExportException(\"error during add the field \" + col.getContentColumn().getFieldName(), e);\n            }\n        }\n    }\n\n    private JRDesignField chooseValueClass(final TemplateColumn col, final JRDesignField field) {\n        final Class<?> valueClass = col.getContentColumn().getColumnValueClass();\n        if ((valueClass.isAssignableFrom(byte[].class) || valueClass.isAssignableFrom(XdevBlob.class)) || valueClass.isAssignableFrom(XdevClob.class)) {\n            field.setValueClass(String.class);\n        } else {\n            field.setValueClass(valueClass);\n        }\n        return field;\n    }\n\n    private void createHeaderAndContent(final JRDesignBand headerBand, final JRDesignBand detailBand) {\n        JRDesignStaticText headerLabel;\n        JRDesignStaticText emptyHeaderLabel;\n        JRDesignTextField textField;\n        final int headerLabelHeight = this.calcMaxHeaderHeight();\n        headerBand.setHeight(headerLabelHeight);\n        final int contentLabelHeight = this.calcMaxContentHeight();\n        detailBand.setHeight(contentLabelHeight);\n        final boolean createHeader = this.config.hasAnyHeader();\n        int x = 0;\n        for (final TemplateColumn col : this.config.getColumns()) {\n            if (createHeader) {\n                if (col.hasHeaderColumn()) {\n                    final HeaderColumn headerColumn = col.getHeaderColumn();\n                    headerLabel = new JRDesignStaticText();\n                    headerLabel.setX(x);\n                    headerLabel.setWidth(col.getWidth());\n                    headerLabel.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n                    headerLabel.setHeight(headerLabelHeight);\n                    this.setStlyeForTextField(headerLabel, headerColumn.getStyle());\n                    this.prepareTextfieldWithBorder(headerLabel, headerColumn.getStyle());\n                    this.prepareTextfieldPadding(headerLabel, headerColumn.getStyle());\n                    headerLabel.setPositionType(PositionTypeEnum.FLOAT);\n                    headerLabel.setText(headerColumn.getProperty());\n                    headerBand.addElement(headerLabel);\n                } else {\n                    emptyHeaderLabel = new JRDesignStaticText();\n                    emptyHeaderLabel.setX(x);\n                    emptyHeaderLabel.setWidth(col.getWidth());\n                    headerBand.addElement(emptyHeaderLabel);\n                }\n            }\n            final ContentColumn contentColumn = col.getContentColumn();\n            textField = new JRDesignTextField();\n            textField.setX(x);\n            textField.setWidth(col.getWidth());\n            textField.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n            textField.setHeight(contentLabelHeight);\n            this.setStlyeForTextField(textField, contentColumn.getStyle());\n            textField.setPattern(contentColumn.getProperty());\n            this.prepareTextfieldWithBorder(textField, contentColumn.getStyle());\n            this.prepareTextfieldPadding(textField, contentColumn.getStyle());\n            textField.setExpression(this.buildExpression(contentColumn));\n            textField.setPositionType(PositionTypeEnum.FLOAT);\n            if (this.config.isBlankWhenNullValue()) {\n                textField.setBlankWhenNull(true);\n            }\n            detailBand.addElement(textField);\n            x += col.getWidth();\n        }\n    }\n\n    private void setStlyeForTextField(final JRDesignTextElement txtField, final ColumnStyle style) {\n        txtField.setBackcolor(style.getBackground());\n        txtField.setForecolor(style.getForeground());\n        final Font f = style.getFont();\n        txtField.setFontName(f.getName());\n        txtField.setFontSize(Float.valueOf(f.getSize()));\n        txtField.setBold(Boolean.valueOf(f.isBold()));\n        txtField.setItalic(Boolean.valueOf(f.isItalic()));\n        txtField.setHorizontalTextAlign(style.getHorizontalAlignment().getHorizontalTextAlignEnum());\n        if (!style.getBackground().equals(Color.WHITE)) {\n            txtField.setMode(ModeEnum.OPAQUE);\n        }\n    }\n\n    private void prepareTextfieldWithBorder(final JRDesignTextElement textField, final ColumnStyle style) {\n        final ColumnBorder border = style.getColBorder();\n        if (border == null) {\n            return;\n        }\n        textField.getLineBox().getPen().setLineWidth(border.getLineWidth());\n        textField.getLineBox().getPen().setLineColor(border.getLineColor());\n        textField.getLineBox().getPen().setLineStyle(border.getLineStyle().getLineStyleEnum());\n    }\n\n    private void prepareTextfieldPadding(final JRDesignTextElement textField, final ColumnStyle style) {\n        final ColumnPadding colPadding = style.getColumnPadding();\n        final JRLineBox lineBox = textField.getLineBox();\n        lineBox.setTopPadding(colPadding.getTopWidth());\n        lineBox.setRightPadding(colPadding.getRightWidth());\n        lineBox.setLeftPadding(colPadding.getLeftWidth());\n        lineBox.setBottomPadding(colPadding.getBottomWidth());\n    }\n\n    private JRDesignExpression buildExpression(final ContentColumn column) {\n        final JRDesignExpression expression = new JRDesignExpression();\n        expression.setText((\"$F{\" + column.getFieldName()) + \"}\");\n        return expression;\n    }\n\n    public JasperReport assembleReport() throws ExportException {\n        try {\n            final JasperDesign jasperDesign = this.createDefaultDesign();\n            this.createTemplateFields(jasperDesign);\n            final JRDesignBand headerBand = this.initHeaderBand();\n            final JRDesignBand detailBand = this.initDetailBand();\n            this.createHeaderAndContent(headerBand, detailBand);\n            ((JRDesignSection) (jasperDesign.getDetailSection())).addBand(detailBand);\n            if (this.config.hasAnyHeader()) {\n                jasperDesign.setTitle(headerBand);\n            }\n            return JasperCompileManager.compileReport(jasperDesign);\n        } catch (final Exception e) {\n            throw new ExportException(e);\n        }\n    }\n}\n```<end_of_turn>"
}