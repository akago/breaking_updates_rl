{
    "absolute_path_to_file_in_container": "/open-pdf-sign/src/main/java/org/openpdfsign/Signer.java",
    "errors": [
        {
            "line_number": 7,
            "message": "[ERROR] /open-pdf-sign/src/main/java/org/openpdfsign/Signer.java:[7,32] cannot find symbol",
            "additional_info": "  symbol:   class CertificationPermission\n  location: package eu.europa.esig.dss.pades",
            "file_name": "Signer.java",
            "uid": "f33e48d0-4d10-50cd-81a9-bd68d61c1da3"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: dss-pades 5.9->5.10.2\n\nthe following client code fails: \n'''java\npackage org.openpdfsign;\nimport Configuration;\nimport DSSDocument;\nimport FileDocument;\nimport InMemoryDocument;\nimport SignatureParameters;\nimport SignatureValue;\nimport TableSignatureFieldParameters;\nimport ToBeSigned;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.apache.commons.io.IOUtils;\nimport com.beust.jcommander.Strings;\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.*;\nimport eu.europa.esig.dss.pades.CertificationPermission;\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\nimport eu.europa.esig.dss.pades.signature.PAdESService;\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\nimport eu.europa.esig.dss.token.JKSSignatureToken;\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\n@Slf4j\npublic class Signer {\n    private static final float POINTS_PER_INCH = 72;\n\n    private static final float POINTS_PER_MM = (1 / (10 * 2.54F)) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n        log.debug(\"Keystore created for signing\");\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();\n        }\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n        } else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n        }\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n        log.debug(\"Signature service initialized\");\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n            } else {\n                imageParameters.setImage(new InMemoryDocument(IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\"))));\n            }\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n            } else {\n                fieldParameters.setPage(params.getPage());\n            }\n            fieldParameters.setOriginX((params.getLeft() * POINTS_PER_MM) * 10.0F);\n            fieldParameters.setOriginY((params.getTop() * POINTS_PER_MM) * 10.0F);\n            fieldParameters.setWidth((params.getWidth() * POINTS_PER_MM) * 10.0F);\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n            }\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n            } else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n            }\n            signatureParameters.setImageParameters(imageParameters);\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n        }\n        if (params.getUseTimestamp() || (params.getTSA() != null)) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            } else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            }\n            service.setTspSource(compositeTSPSource);\n        }\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n        log.debug(\"Signature value calculated\");\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n        } else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n        }\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport eu.europa.esig.dss.pades.CertificationPermission;\nwith the following error message:\n[ERROR] /open-pdf-sign/src/main/java/org/openpdfsign/Signer.java:[7,32] cannot find symbol  symbol:   class CertificationPermission\n  location: package eu.europa.esig.dss.pades\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\neu.europa.esig.dss.pades.CertificationPermission | DELETION | TYPE_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import eu.europa.esig.dss.pades.CertificationPermission;",
    "error_message": "[ERROR] /open-pdf-sign/src/main/java/org/openpdfsign/Signer.java:[7,32] cannot find symbol  symbol:   class CertificationPermission\n  location: package eu.europa.esig.dss.pades",
    "api_diff": "Format: element | nature | kind\neu.europa.esig.dss.pades.CertificationPermission | DELETION | TYPE_REMOVED",
    "original_code": "package org.openpdfsign;\nimport Configuration;\nimport DSSDocument;\nimport FileDocument;\nimport InMemoryDocument;\nimport SignatureParameters;\nimport SignatureValue;\nimport TableSignatureFieldParameters;\nimport ToBeSigned;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.apache.commons.io.IOUtils;\nimport com.beust.jcommander.Strings;\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.*;\nimport eu.europa.esig.dss.pades.CertificationPermission;\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\nimport eu.europa.esig.dss.pades.signature.PAdESService;\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\nimport eu.europa.esig.dss.token.JKSSignatureToken;\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\n@Slf4j\npublic class Signer {\n    private static final float POINTS_PER_INCH = 72;\n\n    private static final float POINTS_PER_MM = (1 / (10 * 2.54F)) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n        log.debug(\"Keystore created for signing\");\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();\n        }\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n        } else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n        }\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n        log.debug(\"Signature service initialized\");\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n            } else {\n                imageParameters.setImage(new InMemoryDocument(IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\"))));\n            }\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n            } else {\n                fieldParameters.setPage(params.getPage());\n            }\n            fieldParameters.setOriginX((params.getLeft() * POINTS_PER_MM) * 10.0F);\n            fieldParameters.setOriginY((params.getTop() * POINTS_PER_MM) * 10.0F);\n            fieldParameters.setWidth((params.getWidth() * POINTS_PER_MM) * 10.0F);\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n            }\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n            } else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n            }\n            signatureParameters.setImageParameters(imageParameters);\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n        }\n        if (params.getUseTimestamp() || (params.getTSA() != null)) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            } else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            }\n            service.setTspSource(compositeTSPSource);\n        }\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n        log.debug(\"Signature value calculated\");\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n        } else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n        }\n    }\n}\n",
    "project": "open-pdf-sign",
    "libraryName": "dss-pades",
    "libraryGroupID": "eu.europa.ec.joinup.sd-dss",
    "newVersion": "5.10.2",
    "previousVersion": "5.9",
    "breakingCommit": "4a3efad6e00824e5814b9c8f571c9c98aad40281",
    "patch": "```java\npackage org.openpdfsign;\nimport Configuration;\nimport DSSDocument;\nimport FileDocument;\nimport InMemoryDocument;\nimport SignatureParameters;\nimport SignatureValue;\nimport TableSignatureFieldParameters;\nimport ToBeSigned;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.apache.commons.io.IOUtils;\nimport com.beust.jcommander.Strings;\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.*;\nimport eu.europa.esig.dss.pades.CertificationPermission;\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\nimport eu.europa.esig.dss.pades.signature.PAdESService;\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\nimport eu.europa.esig.dss.token.JKSSignatureToken;\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.pdfbox.pdmodel.PDDocument;\n@Slf4j\npublic class Signer {\n    private static final float POINTS_PER_INCH = 72;\n\n    private static final float POINTS_PER_MM = (1 / (10 * 2.54F)) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n        log.debug(\"Keystore created for signing\");\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();\n        }\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n        } else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n        }\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n        log.debug(\"Signature service initialized\");\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n            } else {\n                imageParameters.setImage(new InMemoryDocument(IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\"))));\n            }\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n            } else {\n                fieldParameters.setPage(params.getPage());\n            }\n            fieldParameters.setOriginX((params.getLeft() * POINTS_PER_MM) * 10.0F);\n            fieldParameters.setOriginY((params.getTop() * POINTS_PER_MM) * 10.0F);\n            fieldParameters.setWidth((params.getWidth() * POINTS_PER_MM) * 10.0F);\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n            }\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n            } else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n            }\n            signatureParameters.setImageParameters(imageParameters);\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n        }\n        if (params.getUseTimestamp() || (params.getTSA() != null)) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            } else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            }\n            service.setTspSource(compositeTSPSource);\n        }\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n        log.debug(\"Signature value calculated\");\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n        } else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n        }\n    }\n}\n```<end_of_turn>"
}