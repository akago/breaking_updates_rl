{
    "absolute_path_to_file_in_container": "/docker-adapter/src/test/java/com/artipie/docker/http/AuthTest.java",
    "errors": [
        {
            "line_number": 350,
            "message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/AuthTest.java:[350,63] incompatible types: bad return type in lambda expression",
            "additional_info": "    inference variable U has incompatible bounds\n      equality constraints: java.util.Optional<com.artipie.http.auth.AuthUser>\n      lower bounds: java.util.Optional<java.lang.Object>",
            "file_name": "AuthTest.java",
            "uid": "0421e64d-315a-589a-bb79-459136140281"
        },
        {
            "line_number": 353,
            "message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/AuthTest.java:[353,60] cannot find symbol",
            "additional_info": "  symbol:   class User\n  location: interface com.artipie.http.auth.Authentication",
            "file_name": "AuthTest.java",
            "uid": "c9d0fb81-42c4-5fc2-9ac6-e30172209e99"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: http v1.1.4->v1.2.1\n\nthe following client code fails: \n'''java\npackage com.artipie.docker.http;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.function.Function;\nimport java.util.stream.Stream;\nimport com.artipie.asto.Content;\nimport com.artipie.asto.memory.InMemoryStorage;\nimport com.artipie.docker.Blob;\nimport com.artipie.docker.Docker;\nimport com.artipie.docker.RepoName;\nimport com.artipie.docker.asto.AstoDocker;\nimport com.artipie.docker.asto.TrustedBlobSource;\nimport com.artipie.http.Headers;\nimport com.artipie.http.Response;\nimport com.artipie.http.Slice;\nimport com.artipie.http.auth.Authentication;\nimport com.artipie.http.auth.BasicAuthScheme;\nimport com.artipie.http.auth.BearerAuthScheme;\nimport com.artipie.http.auth.Permissions;\nimport com.artipie.http.headers.Authorization;\nimport com.artipie.http.headers.Header;\nimport com.artipie.http.hm.ResponseMatcher;\nimport com.artipie.http.hm.RsHasStatus;\nimport com.artipie.http.rq.RequestLine;\nimport com.artipie.http.rq.RqMethod;\nimport com.artipie.http.rs.RsStatus;\nimport io.reactivex.Flowable;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.core.AllOf;\nimport org.hamcrest.core.IsNot;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\npublic final class AuthTest {\n    private Docker docker;\n\n    @BeforeEach\n    void setUp() {\n        this.docker = new AstoDocker(new InMemoryStorage());\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"setups\")\n    void shouldReturnUnauthorizedWhenNoAuth(final Method method, final RequestLine line) {\n        MatcherAssert.assertThat(method.slice(\"whatever\").response(line.toString(), Headers.EMPTY, Content.EMPTY), new IsUnauthorizedResponse());\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"setups\")\n    void shouldReturnUnauthorizedWhenUserIsUnknown(final Method method, final RequestLine line) {\n        MatcherAssert.assertThat(method.slice(\"whatever\").response(line.toString(), method.headers(new TestAuthentication.User(\"chuck\", \"letmein\")), Content.EMPTY), new IsUnauthorizedResponse());\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"setups\")\n    void shouldReturnForbiddenWhenUserHasNoRequiredPermissions(final Method method, final RequestLine line, final String action) {\n        MatcherAssert.assertThat(method.slice(action).response(line.toString(), method.headers(TestAuthentication.BOB), Content.EMPTY), new IsDeniedResponse());\n    }\n\n    @Test\n    @Disabled\n    void shouldReturnForbiddenWhenUserHasNoRequiredPermissionOnSecondManifestPut() {\n        final Basic basic = new Basic(this.docker);\n        final String line = new RequestLine(RqMethod.PUT, \"/v2/my-alpine/manifests/latest\").toString();\n        final String action = \"repository:my-alpine:push\";\n        basic.slice(action).response(line, basic.headers(TestAuthentication.ALICE), this.manifest());\n        MatcherAssert.assertThat(basic.slice(action).response(line, basic.headers(TestAuthentication.ALICE), Content.EMPTY), new RsHasStatus(RsStatus.FORBIDDEN));\n    }\n\n    @Test\n    void shouldOverwriteManifestIfAllowed() {\n        final Basic basic = new Basic(this.docker);\n        final String path = \"/v2/my-alpine/manifests/abc\";\n        final String line = new RequestLine(RqMethod.PUT, path).toString();\n        final String action = \"repository:my-alpine:overwrite\";\n        final Flowable<ByteBuffer> manifest = this.manifest();\n        MatcherAssert.assertThat(\"Manifest was created for the first time\", basic.slice(action).response(line, basic.headers(TestAuthentication.ALICE), manifest), new ResponseMatcher(RsStatus.CREATED, new Header(\"Location\", path), new Header(\"Content-Length\", \"0\"), new Header(\"Docker-Content-Digest\", \"sha256:ef0ff2adcc3c944a63f7cafb386abc9a1d95528966085685ae9fab2a1c0bedbf\")));\n        MatcherAssert.assertThat(\"Manifest was overwritten\", basic.slice(action).response(line, basic.headers(TestAuthentication.ALICE), manifest), new ResponseMatcher(RsStatus.CREATED, new Header(\"Location\", path), new Header(\"Content-Length\", \"0\"), new Header(\"Docker-Content-Digest\", \"sha256:ef0ff2adcc3c944a63f7cafb386abc9a1d95528966085685ae9fab2a1c0bedbf\")));\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"setups\")\n    void shouldNotReturnUnauthorizedOrForbiddenWhenUserHasPermissions(final Method method, final RequestLine line, final String action) {\n        final Response response = method.slice(action).response(line.toString(), method.headers(TestAuthentication.ALICE), Content.EMPTY);\n        MatcherAssert.assertThat(response, new AllOf<>(Arrays.asList(new IsNot<>(new RsHasStatus(RsStatus.FORBIDDEN)), new IsNot<>(new RsHasStatus(RsStatus.UNAUTHORIZED)))));\n    }\n\n    @SuppressWarnings(\"PMD.UnusedPrivateMethod\")\n    private static Stream<Arguments> setups() {\n        return Stream.of(new Basic(), new Bearer()).flatMap(AuthTest::setups);\n    }\n\n    private Flowable<ByteBuffer> manifest() {\n        final byte[] content = \"config\".getBytes();\n        final Blob config = this.docker.repo(new RepoName.Valid(\"my-alpine\")).layers().put(new TrustedBlobSource(content)).toCompletableFuture().join();\n        final byte[] data = String.format(\"{\\\"config\\\":{\\\"digest\\\":\\\"%s\\\"},\\\"layers\\\":[],\\\"mediaType\\\":\\\"my-type\\\"}\", config.digest().string()).getBytes();\n        return Flowable.just(ByteBuffer.wrap(data));\n    }\n\n    private static Stream<Arguments> setups(final Method method) {\n        return Stream.of(Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/\"), \"registry:base:*\"), Arguments.of(method, new RequestLine(RqMethod.HEAD, \"/v2/my-alpine/manifests/1\"), \"repository:my-alpine:pull\"), Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/my-alpine/manifests/2\"), \"repository:my-alpine:pull\"), Arguments.of(method, new RequestLine(RqMethod.PUT, \"/v2/my-alpine/manifests/latest\"), \"repository:my-alpine:push\"), Arguments.of(method, new RequestLine(RqMethod.PUT, \"/v2/my-alpine/manifests/latest\"), \"repository:my-alpine:overwrite\"), Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/my-alpine/tags/list\"), \"repository:my-alpine:pull\"), Arguments.of(method, new RequestLine(RqMethod.HEAD, \"/v2/my-alpine/blobs/sha256:123\"), \"repository:my-alpine:pull\"), Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/my-alpine/blobs/sha256:012345\"), \"repository:my-alpine:pull\"), Arguments.of(method, new RequestLine(RqMethod.POST, \"/v2/my-alpine/blobs/uploads/\"), \"repository:my-alpine:push\"), Arguments.of(method, new RequestLine(RqMethod.PATCH, \"/v2/my-alpine/blobs/uploads/123\"), \"repository:my-alpine:push\"), Arguments.of(method, new RequestLine(RqMethod.PUT, \"/v2/my-alpine/blobs/uploads/12345\"), \"repository:my-alpine:push\"), Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/my-alpine/blobs/uploads/112233\"), \"repository:my-alpine:pull\"), Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/_catalog\"), \"registry:catalog:*\"));\n    }\n\n    private interface Method {\n        Slice slice(String action);\n\n        Headers headers(TestAuthentication.User user);\n    }\n\n    private static final class Basic implements Method {\n        private final Docker docker;\n\n        private Basic(final Docker docker) {\n            this.docker = docker;\n        }\n\n        private Basic() {\n            this(new AstoDocker(new InMemoryStorage()));\n        }\n\n        @Override\n        public Slice slice(final String action) {\n            return new DockerSlice(this.docker, new Permissions.Single(TestAuthentication.ALICE.name(), action), new BasicAuthScheme(new TestAuthentication()));\n        }\n\n        @Override\n        public Headers headers(final TestAuthentication.User user) {\n            return user.headers();\n        }\n\n        @Override\n        public String toString() {\n            return \"Basic\";\n        }\n    }\n\n    private static final class Bearer implements Method {\n        @Override\n        public Slice slice(final String action) {\n            return new DockerSlice(new AstoDocker(new InMemoryStorage()), new Permissions.Single(TestAuthentication.ALICE.name(), action), new BearerAuthScheme(token -> CompletableFuture.completedFuture(Stream.of(TestAuthentication.ALICE, TestAuthentication.BOB).filter(user -> token.equals(token(user))).map(user -> new Authentication.User(user.name())).findFirst()), \"\"));\n        }\n\n        @Override\n        public Headers headers(final TestAuthentication.User user) {\n            return new Headers.From(new Authorization.Bearer(token(user)));\n        }\n\n        @Override\n        public String toString() {\n            return \"Bearer\";\n        }\n\n        private static String token(final TestAuthentication.User user) {\n            return String.format(\"%s:%s\", user.name(), user.password());\n        }\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n                    token -> CompletableFuture.completedFuture(\n                            .map(user -> new Authentication.User(user.name()))\nwith the following error message:\n[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/AuthTest.java:[350,63] incompatible types: bad return type in lambda expression    inference variable U has incompatible bounds\n      equality constraints: java.util.Optional<com.artipie.http.auth.AuthUser>\n      lower bounds: java.util.Optional<java.lang.Object>\n[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/AuthTest.java:[353,60] cannot find symbol  symbol:   class User\n  location: interface com.artipie.http.auth.Authentication\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\ncom.artipie.http.auth.Authentication.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.Identities.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.Authentication$Joined.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.Authentication$Wrap.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.TokenAuthentication.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.Authentication$Single.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.artipie.http.auth.Permissions$Single.allowed | DELETION | METHOD_REMOVED\ncom.artipie.http.auth.Authentication$User | DELETION | TYPE_REMOVED\ncom.artipie.http.auth.Permissions.ANY_USER | DELETION | FIELD_REMOVED\ncom.artipie.http.auth.Authentication$Single.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.Permissions$Wrap.allowed | DELETION | METHOD_REMOVED\ncom.artipie.http.auth.AuthScheme$Fake.<init> | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.artipie.http.auth.Permissions | ADDITION | METHOD_ADDED_TO_INTERFACE\ncom.artipie.http.auth.BasicIdentities.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.AuthScheme$Result.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.Permissions.allowed | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "                    token -> CompletableFuture.completedFuture(\n                            .map(user -> new Authentication.User(user.name()))",
    "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/AuthTest.java:[350,63] incompatible types: bad return type in lambda expression    inference variable U has incompatible bounds\n      equality constraints: java.util.Optional<com.artipie.http.auth.AuthUser>\n      lower bounds: java.util.Optional<java.lang.Object>\n[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/AuthTest.java:[353,60] cannot find symbol  symbol:   class User\n  location: interface com.artipie.http.auth.Authentication",
    "api_diff": "Format: element | nature | kind\ncom.artipie.http.auth.Authentication.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.Identities.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.Authentication$Joined.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.Authentication$Wrap.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.TokenAuthentication.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.Authentication$Single.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.artipie.http.auth.Permissions$Single.allowed | DELETION | METHOD_REMOVED\ncom.artipie.http.auth.Authentication$User | DELETION | TYPE_REMOVED\ncom.artipie.http.auth.Permissions.ANY_USER | DELETION | FIELD_REMOVED\ncom.artipie.http.auth.Authentication$Single.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.Permissions$Wrap.allowed | DELETION | METHOD_REMOVED\ncom.artipie.http.auth.AuthScheme$Fake.<init> | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.artipie.http.auth.Permissions | ADDITION | METHOD_ADDED_TO_INTERFACE\ncom.artipie.http.auth.BasicIdentities.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.AuthScheme$Result.user | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.artipie.http.auth.Permissions.allowed | DELETION | METHOD_REMOVED",
    "original_code": "package com.artipie.docker.http;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.function.Function;\nimport java.util.stream.Stream;\nimport com.artipie.asto.Content;\nimport com.artipie.asto.memory.InMemoryStorage;\nimport com.artipie.docker.Blob;\nimport com.artipie.docker.Docker;\nimport com.artipie.docker.RepoName;\nimport com.artipie.docker.asto.AstoDocker;\nimport com.artipie.docker.asto.TrustedBlobSource;\nimport com.artipie.http.Headers;\nimport com.artipie.http.Response;\nimport com.artipie.http.Slice;\nimport com.artipie.http.auth.Authentication;\nimport com.artipie.http.auth.BasicAuthScheme;\nimport com.artipie.http.auth.BearerAuthScheme;\nimport com.artipie.http.auth.Permissions;\nimport com.artipie.http.headers.Authorization;\nimport com.artipie.http.headers.Header;\nimport com.artipie.http.hm.ResponseMatcher;\nimport com.artipie.http.hm.RsHasStatus;\nimport com.artipie.http.rq.RequestLine;\nimport com.artipie.http.rq.RqMethod;\nimport com.artipie.http.rs.RsStatus;\nimport io.reactivex.Flowable;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.core.AllOf;\nimport org.hamcrest.core.IsNot;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\npublic final class AuthTest {\n    private Docker docker;\n\n    @BeforeEach\n    void setUp() {\n        this.docker = new AstoDocker(new InMemoryStorage());\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"setups\")\n    void shouldReturnUnauthorizedWhenNoAuth(final Method method, final RequestLine line) {\n        MatcherAssert.assertThat(method.slice(\"whatever\").response(line.toString(), Headers.EMPTY, Content.EMPTY), new IsUnauthorizedResponse());\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"setups\")\n    void shouldReturnUnauthorizedWhenUserIsUnknown(final Method method, final RequestLine line) {\n        MatcherAssert.assertThat(method.slice(\"whatever\").response(line.toString(), method.headers(new TestAuthentication.User(\"chuck\", \"letmein\")), Content.EMPTY), new IsUnauthorizedResponse());\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"setups\")\n    void shouldReturnForbiddenWhenUserHasNoRequiredPermissions(final Method method, final RequestLine line, final String action) {\n        MatcherAssert.assertThat(method.slice(action).response(line.toString(), method.headers(TestAuthentication.BOB), Content.EMPTY), new IsDeniedResponse());\n    }\n\n    @Test\n    @Disabled\n    void shouldReturnForbiddenWhenUserHasNoRequiredPermissionOnSecondManifestPut() {\n        final Basic basic = new Basic(this.docker);\n        final String line = new RequestLine(RqMethod.PUT, \"/v2/my-alpine/manifests/latest\").toString();\n        final String action = \"repository:my-alpine:push\";\n        basic.slice(action).response(line, basic.headers(TestAuthentication.ALICE), this.manifest());\n        MatcherAssert.assertThat(basic.slice(action).response(line, basic.headers(TestAuthentication.ALICE), Content.EMPTY), new RsHasStatus(RsStatus.FORBIDDEN));\n    }\n\n    @Test\n    void shouldOverwriteManifestIfAllowed() {\n        final Basic basic = new Basic(this.docker);\n        final String path = \"/v2/my-alpine/manifests/abc\";\n        final String line = new RequestLine(RqMethod.PUT, path).toString();\n        final String action = \"repository:my-alpine:overwrite\";\n        final Flowable<ByteBuffer> manifest = this.manifest();\n        MatcherAssert.assertThat(\"Manifest was created for the first time\", basic.slice(action).response(line, basic.headers(TestAuthentication.ALICE), manifest), new ResponseMatcher(RsStatus.CREATED, new Header(\"Location\", path), new Header(\"Content-Length\", \"0\"), new Header(\"Docker-Content-Digest\", \"sha256:ef0ff2adcc3c944a63f7cafb386abc9a1d95528966085685ae9fab2a1c0bedbf\")));\n        MatcherAssert.assertThat(\"Manifest was overwritten\", basic.slice(action).response(line, basic.headers(TestAuthentication.ALICE), manifest), new ResponseMatcher(RsStatus.CREATED, new Header(\"Location\", path), new Header(\"Content-Length\", \"0\"), new Header(\"Docker-Content-Digest\", \"sha256:ef0ff2adcc3c944a63f7cafb386abc9a1d95528966085685ae9fab2a1c0bedbf\")));\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"setups\")\n    void shouldNotReturnUnauthorizedOrForbiddenWhenUserHasPermissions(final Method method, final RequestLine line, final String action) {\n        final Response response = method.slice(action).response(line.toString(), method.headers(TestAuthentication.ALICE), Content.EMPTY);\n        MatcherAssert.assertThat(response, new AllOf<>(Arrays.asList(new IsNot<>(new RsHasStatus(RsStatus.FORBIDDEN)), new IsNot<>(new RsHasStatus(RsStatus.UNAUTHORIZED)))));\n    }\n\n    @SuppressWarnings(\"PMD.UnusedPrivateMethod\")\n    private static Stream<Arguments> setups() {\n        return Stream.of(new Basic(), new Bearer()).flatMap(AuthTest::setups);\n    }\n\n    private Flowable<ByteBuffer> manifest() {\n        final byte[] content = \"config\".getBytes();\n        final Blob config = this.docker.repo(new RepoName.Valid(\"my-alpine\")).layers().put(new TrustedBlobSource(content)).toCompletableFuture().join();\n        final byte[] data = String.format(\"{\\\"config\\\":{\\\"digest\\\":\\\"%s\\\"},\\\"layers\\\":[],\\\"mediaType\\\":\\\"my-type\\\"}\", config.digest().string()).getBytes();\n        return Flowable.just(ByteBuffer.wrap(data));\n    }\n\n    private static Stream<Arguments> setups(final Method method) {\n        return Stream.of(Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/\"), \"registry:base:*\"), Arguments.of(method, new RequestLine(RqMethod.HEAD, \"/v2/my-alpine/manifests/1\"), \"repository:my-alpine:pull\"), Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/my-alpine/manifests/2\"), \"repository:my-alpine:pull\"), Arguments.of(method, new RequestLine(RqMethod.PUT, \"/v2/my-alpine/manifests/latest\"), \"repository:my-alpine:push\"), Arguments.of(method, new RequestLine(RqMethod.PUT, \"/v2/my-alpine/manifests/latest\"), \"repository:my-alpine:overwrite\"), Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/my-alpine/tags/list\"), \"repository:my-alpine:pull\"), Arguments.of(method, new RequestLine(RqMethod.HEAD, \"/v2/my-alpine/blobs/sha256:123\"), \"repository:my-alpine:pull\"), Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/my-alpine/blobs/sha256:012345\"), \"repository:my-alpine:pull\"), Arguments.of(method, new RequestLine(RqMethod.POST, \"/v2/my-alpine/blobs/uploads/\"), \"repository:my-alpine:push\"), Arguments.of(method, new RequestLine(RqMethod.PATCH, \"/v2/my-alpine/blobs/uploads/123\"), \"repository:my-alpine:push\"), Arguments.of(method, new RequestLine(RqMethod.PUT, \"/v2/my-alpine/blobs/uploads/12345\"), \"repository:my-alpine:push\"), Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/my-alpine/blobs/uploads/112233\"), \"repository:my-alpine:pull\"), Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/_catalog\"), \"registry:catalog:*\"));\n    }\n\n    private interface Method {\n        Slice slice(String action);\n\n        Headers headers(TestAuthentication.User user);\n    }\n\n    private static final class Basic implements Method {\n        private final Docker docker;\n\n        private Basic(final Docker docker) {\n            this.docker = docker;\n        }\n\n        private Basic() {\n            this(new AstoDocker(new InMemoryStorage()));\n        }\n\n        @Override\n        public Slice slice(final String action) {\n            return new DockerSlice(this.docker, new Permissions.Single(TestAuthentication.ALICE.name(), action), new BasicAuthScheme(new TestAuthentication()));\n        }\n\n        @Override\n        public Headers headers(final TestAuthentication.User user) {\n            return user.headers();\n        }\n\n        @Override\n        public String toString() {\n            return \"Basic\";\n        }\n    }\n\n    private static final class Bearer implements Method {\n        @Override\n        public Slice slice(final String action) {\n            return new DockerSlice(new AstoDocker(new InMemoryStorage()), new Permissions.Single(TestAuthentication.ALICE.name(), action), new BearerAuthScheme(token -> CompletableFuture.completedFuture(Stream.of(TestAuthentication.ALICE, TestAuthentication.BOB).filter(user -> token.equals(token(user))).map(user -> new Authentication.User(user.name())).findFirst()), \"\"));\n        }\n\n        @Override\n        public Headers headers(final TestAuthentication.User user) {\n            return new Headers.From(new Authorization.Bearer(token(user)));\n        }\n\n        @Override\n        public String toString() {\n            return \"Bearer\";\n        }\n\n        private static String token(final TestAuthentication.User user) {\n            return String.format(\"%s:%s\", user.name(), user.password());\n        }\n    }\n}\n",
    "project": "docker-adapter",
    "libraryName": "http",
    "libraryGroupID": "com.artipie",
    "newVersion": "v1.2.1",
    "previousVersion": "v1.1.4",
    "breakingCommit": "d38182a8a0fe1ec039aed97e103864fce717a0be",
    "patch": "```java\npackage com.artipie.docker.http;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.function.Function;\nimport java.util.stream.Stream;\nimport com.artipie.asto.Content;\nimport com.artipie.asto.memory.InMemoryStorage;\nimport com.artipie.docker.Blob;\nimport com.artipie.docker.Docker;\nimport com.artipie.docker.RepoName;\nimport com.artipie.docker.asto.AstoDocker;\nimport com.artipie.docker.asto.TrustedBlobSource;\nimport com.artipie.http.Headers;\nimport com.artipie.http.Response;\nimport com.artipie.http.Slice;\nimport com.artipie.http.auth.Authentication;\nimport com.artipie.http.auth.BasicAuthScheme;\nimport com.artipie.http.auth.BearerAuthScheme;\nimport com.artipie.http.auth.Permissions;\nimport com.artipie.http.headers.Authorization;\nimport com.artipie.http.headers.Header;\nimport com.artipie.http.hm.ResponseMatcher;\nimport com.artipie.http.hm.RsHasStatus;\nimport com.artipie.http.rq.RequestLine;\nimport com.artipie.http.rq.RqMethod;\nimport com.artipie.http.rs.RsStatus;\nimport io.reactivex.Flowable;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.core.AllOf;\nimport org.hamcrest.core.IsNot;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\npublic final class AuthTest {\n    private Docker docker;\n\n    @BeforeEach\n    void setUp() {\n        this.docker = new AstoDocker(new InMemoryStorage());\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"setups\")\n    void shouldReturnUnauthorizedWhenNoAuth(final Method method, final RequestLine line) {\n        MatcherAssert.assertThat(method.slice(\"whatever\").response(line.toString(), Headers.EMPTY, Content.EMPTY), new IsUnauthorizedResponse());\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"setups\")\n    void shouldReturnUnauthorizedWhenUserIsUnknown(final Method method, final RequestLine line) {\n        MatcherAssert.assertThat(method.slice(\"whatever\").response(line.toString(), method.headers(new TestAuthentication.User(\"chuck\", \"letmein\")), Content.EMPTY), new IsUnauthorizedResponse());\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"setups\")\n    void shouldReturnForbiddenWhenUserHasNoRequiredPermissions(final Method method, final RequestLine line, final String action) {\n        MatcherAssert.assertThat(method.slice(action).response(line.toString(), method.headers(TestAuthentication.BOB), Content.EMPTY), new IsDeniedResponse());\n    }\n\n    @Test\n    @Disabled\n    void shouldReturnForbiddenWhenUserHasNoRequiredPermissionOnSecondManifestPut(\n            final Method method,\n            final RequestLine line) {\n        final Basic basic = new Basic(this.docker);\n        final String lineString = new RequestLine(RqMethod.PUT, \"/v2/my-alpine/manifests/latest\").toString();\n        final String action = \"repository:my-alpine:push\";\n        basic.slice(action).response(lineString, basic.headers(TestAuthentication.ALICE), this.manifest());\n        MatcherAssert.assertThat(basic.slice(action).response(lineString, basic.headers(TestAuthentication.ALICE), Content.EMPTY), new RsHasStatus(RsStatus.FORBIDDEN));\n    }\n\n    @Test\n    void shouldOverwriteManifestIfAllowed(\n            final Method method,\n            final RequestLine line) {\n        final Basic basic = new Basic(this.docker);\n        final String path = \"/v2/my-alpine/manifests/abc\";\n        final String lineString = new RequestLine(RqMethod.PUT, path).toString();\n        final String action = \"repository:my-alpine:overwrite\";\n        final Flowable<ByteBuffer> manifest = this.manifest();\n        MatcherAssert.assertThat(\"Manifest was created for the first time\",\n                basic.slice(action).response(lineString, basic.headers(TestAuthentication.ALICE), manifest),\n                new ResponseMatcher(RsStatus.CREATED, new Header(\"Location\", path), new Header(\"Content-Length\", \"0\"), new Header(\"Docker-Content-Digest\", \"sha256:ef0ff2adcc3c944a63f7cafb386abc9a1d95528966085685ae9fab2a1c0bedbf\")));\n        MatcherAssert.assertThat(\"Manifest was overwritten\",\n                basic.slice(action).response(lineString, basic.headers(TestAuthentication.ALICE), manifest),\n                new ResponseMatcher(RsStatus.CREATED, new Header(\"Location\", path), new Header(\"Content-Length\", \"0\"), new Header(\"Docker-Content-Digest\", \"sha256:ef0ff2adcc3c944a63f7cafb386abc9a1d95528966085685ae9fab2a1c0bedbf\")));\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"setups\")\n    void shouldNotReturnUnauthorizedOrForbiddenWhenUserHasPermissions(\n            final Method method,\n            final RequestLine line,\n            final String action) {\n        final Response response = method.slice(action).response(line.toString(), method.headers(TestAuthentication.ALICE), Content.EMPTY);\n        MatcherAssert.assertThat(response, new AllOf<>(Arrays.asList(\n                new IsNot<>(new RsHasStatus(RsStatus.FORBIDDEN)),\n                new IsNot<>(new RsHasStatus(RsStatus.UNAUTHORIZED))));\n        )\n                ;\n    }\n\n    @SuppressWarnings(\"PMD.UnusedPrivateMethod\")\n    private static Stream<Arguments> setups() {\n        return Stream.of(new Basic(), new Bearer()).flatMap(AuthTest::setups);\n    }\n\n    private Flowable<ByteBuffer> manifest() {\n        final byte[] content = \"config\".getBytes();\n        final Blob config = this.docker.repo(new RepoName.Valid(\"my-alpine\")).layers().put(new TrustedBlobSource(content)).toCompletableFuture().join();\n        final byte[] data = String.format(\"{\\\"config\\\":{\\\"digest\\\":\\\"%s\\\"},\\\"layers\\\":[],\\\"mediaType\\\":\\\"my-type\\\"}\", config.digest().string()).getBytes();\n        return Flowable.just(ByteBuffer.wrap(data));\n    }\n\n    private static Stream<Arguments> setups(final Method method) {\n        return Stream.of(Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/\"), \"registry:base:*\"),\n                Arguments.of(method, new RequestLine(RqMethod.HEAD, \"/v2/my-alpine/manifests/1\"), \"repository:my-alpine:pull\"),\n                Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/my-alpine/manifests/2\"), \"repository:my-alpine:pull\"),\n                Arguments.of(method, new RequestLine(RqMethod.PUT, \"/v2/my-alpine/manifests/latest\"), \"repository:my-alpine:push\"),\n                Arguments.of(method, new RequestLine(RqMethod.PUT, \"/v2/my-alpine/manifests/latest\"), \"repository:my-alpine:overwrite\"),\n                Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/my-alpine/tags/list\"), \"repository:my-alpine:pull\"),\n                Arguments.of(method, new RequestLine(RqMethod.HEAD, \"/v2/my-alpine/blobs/sha256:123\"), \"repository:my-alpine:pull\"),\n                Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/my-alpine/blobs/sha256:012345\"), \"repository:my-alpine:pull\"),\n                Arguments.of(method, new RequestLine(RqMethod.POST, \"/v2/my-alpine/blobs/uploads/\"), \"repository:my-alpine:push\"),\n                Arguments.of(method, new RequestLine(RqMethod.PATCH, \"/v2/my-alpine/blobs/uploads/12345\"), \"repository:my-alpine:push\"),\n                Arguments.of(method, new RequestLine(RqMethod.PUT, \"/v2/my-alpine/blobs/uploads/112233\"), \"repository:my-alpine:push\"),\n                Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/my-alpine/blobs/uploads/112233\"), \"repository:my-alpine:pull\"),\n                Arguments.of(method, new RequestLine(RqMethod.GET, \"/v2/_catalog\"), \"registry:catalog:*\"));\n    }\n\n    private interface Method {\n        Slice slice(String action);\n\n        Headers headers(TestAuthentication.User user);\n    }\n\n    private static final class Basic implements Method {\n        private final Docker docker;\n\n        private Basic(final Docker docker) {\n            this.docker = docker;\n        }\n\n        private Basic() {\n            this(new AstoDocker(new InMemoryStorage()));\n        }\n\n        @Override\n        public Slice slice(final String action) {\n            return new DockerSlice(this.docker, new Permissions.Single(TestAuthentication.ALICE.name(), action), new BasicAuthScheme(new TestAuthentication()));\n        }\n\n        @Override\n        public Headers headers(final TestAuthentication.User user) {\n            return new Headers.From(new Authorization.Bearer(token(user)));\n        }\n\n        @Override\n        public String toString() {\n            return \"Basic\";\n        }\n    }\n\n    private static final class Bearer implements Method {\n        @Override\n        public Slice slice(final String action) {\n            return new DockerSlice(new AstoDocker(new InMemoryStorage()), new Permissions.Single(TestAuthentication.ALICE.name(), action), new BearerAuthScheme(token -> CompletableFuture.completedFuture(Stream.of(TestAuthentication.ALICE, TestAuthentication.BOB).filter(user -> token.equals(token(user))).map(user -> new Authentication.User(user.name())).findFirst()), \"\"));\n        }\n\n        @Override\n        public Headers headers(final TestAuthentication.User user) {\n            return new Headers.From(new Authorization.Bearer(token(user)));\n        }\n\n        @Override\n        public String toString() {\n            return \"Bearer\";\n        }\n\n        private static String token(final TestAuthentication.User user) {\n            return String.format(\"%s:%s\", user.name(), user.password());\n        }\n    }\n}\n```<end_of_turn>"
}