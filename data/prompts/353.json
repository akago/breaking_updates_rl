{
    "absolute_path_to_file_in_container": "/biapi/src/main/java/xdev/tableexport/export/ReportBuilder.java",
    "errors": [
        {
            "line_number": 369,
            "message": "[ERROR] /biapi/src/main/java/xdev/tableexport/export/ReportBuilder.java:[369,81] incompatible types: int cannot be converted to java.lang.Float",
            "additional_info": "",
            "file_name": "ReportBuilder.java",
            "uid": "c3a6d5f2-decb-5e45-b97c-c354898a4e27"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: jasperreports 6.18.1->6.19.1\n\nthe following client code fails: \n'''java\npackage xdev.tableexport.export;\n\n/*-\n * #%L\n * XDEV BI Suite\n * %%\n * Copyright (C) 2011 - 2020 XDEV Software\n * %%\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Lesser Public License for more details.\n * \n * You should have received a copy of the GNU General Lesser Public\n * License along with this program.  If not, see\n * <http://www.gnu.org/licenses/lgpl-3.0.html>.\n * #L%\n */\n\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.swing.JLabel;\n\nimport net.sf.jasperreports.engine.JRException;\nimport net.sf.jasperreports.engine.JRLineBox;\nimport net.sf.jasperreports.engine.JasperCompileManager;\nimport net.sf.jasperreports.engine.JasperReport;\nimport net.sf.jasperreports.engine.design.JRDesignBand;\nimport net.sf.jasperreports.engine.design.JRDesignExpression;\nimport net.sf.jasperreports.engine.design.JRDesignField;\nimport net.sf.jasperreports.engine.design.JRDesignSection;\nimport net.sf.jasperreports.engine.design.JRDesignStaticText;\nimport net.sf.jasperreports.engine.design.JRDesignTextElement;\nimport net.sf.jasperreports.engine.design.JRDesignTextField;\nimport net.sf.jasperreports.engine.design.JasperDesign;\nimport net.sf.jasperreports.engine.type.ModeEnum;\nimport net.sf.jasperreports.engine.type.PositionTypeEnum;\nimport net.sf.jasperreports.engine.type.SplitTypeEnum;\nimport xdev.tableexport.config.ColumnBorder;\nimport xdev.tableexport.config.ColumnPadding;\nimport xdev.tableexport.config.ColumnStyle;\nimport xdev.tableexport.config.ContentColumn;\nimport xdev.tableexport.config.HeaderColumn;\nimport xdev.tableexport.config.PageProperties;\nimport xdev.tableexport.config.TemplateColumn;\nimport xdev.tableexport.config.TemplateConfig;\nimport xdev.vt.XdevBlob;\nimport xdev.vt.XdevClob;\n\n\n/**\n * The {@link ReportBuilder} generates a {@link JasperReport} based on the\n * information of the {@link TemplateConfig}.\n * \n * @author XDEV Software (FHAE)\n * \n * @see TemplateConfig\n * @see ReportExporter\n * \n */\npublic class ReportBuilder\n{\n\tprivate final TemplateConfig\t\t\tconfig;\n\tprivate final Set<JRDesignField>\t\tfieldSet\t= new HashSet<>();\n\t\n\t\n\tpublic ReportBuilder(final TemplateConfig tempConfig)\n\t{\n\t\tthis.config = tempConfig;\n\t}\n\t\n\t\n\tprivate JRDesignBand initDetailBand()\n\t{\n\t\tfinal JRDesignBand detailBand = new JRDesignBand();\n\t\tdetailBand.setHeight(TemplateConfig.DEFAULT_DETAIL_BAND_HEIGHT);\n\t\tdetailBand.setSplitType(SplitTypeEnum.STRETCH);\n\t\t\n\t\treturn detailBand;\n\t}\n\t\n\t\n\tprivate JRDesignBand initHeaderBand()\n\t{\n\t\t// Header\n\t\tfinal JRDesignBand headerBand = new JRDesignBand();\n\t\theaderBand.setHeight(TemplateConfig.DEFAULT_HEADER_BAND_HEIGHT);\n\t\t\n\t\treturn headerBand;\n\t}\n\t\n\t\n\tprivate JasperDesign createDefaultDesign()\n\t{\n\t\tfinal JasperDesign jasperDesign = new JasperDesign();\n\t\tjasperDesign.setName(\"DefaultDesign\");\n\t\tfinal PageProperties properties = this.config.getPageProperties();\n\t\t\n\t\tjasperDesign.setPageWidth(this.calcPageWidth(properties));\n\t\tjasperDesign.setColumnWidth(this.calcColumnsWidth());\n\t\t\n\t\tjasperDesign.setPageHeight(properties.getPageHeight());\n\t\tjasperDesign.setColumnSpacing(properties.getColumnSpacing());\n\t\tjasperDesign.setLeftMargin(properties.getLeftMargin());\n\t\tjasperDesign.setRightMargin(properties.getRightMargin());\n\t\tjasperDesign.setTopMargin(properties.getTopMargin());\n\t\tjasperDesign.setBottomMargin(properties.getBottomMargin());\n\t\t\n\t\treturn jasperDesign;\n\t}\n\t\n\t\n\tprivate int calcColumnsWidth()\n\t{\n\t\tint width = 0;\n\t\t\n\t\tfor(final TemplateColumn col : this.config.getColumns())\n\t\t{\n\t\t\twidth += col.getWidth();\n\t\t}\n\t\t\n\t\treturn width;\n\t}\n\n\t/***\n\t * Calculated the page width including the margins.\n\t * \n\t * @param properties\n\t * \n\t * @return\n\t */\n\tprivate int calcPageWidth(final PageProperties properties)\n\t{\n\t\tint width = 0;\n\t\t\n\t\tfor(final TemplateColumn col : this.config.getColumns())\n\t\t{\n\t\t\twidth += col.getWidth();\n\t\t}\n\t\t\n\t\twidth += properties.getLeftMargin() + properties.getRightMargin();\n\t\t\n\t\treturn width;\n\t}\n\t\n\t\n\t/**\n\t * \n\t * @return\n\t */\n\tprivate int calcMaxHeaderHeight()\n\t{\n\t\t\n\t\tfinal JLabel lbl = new JLabel(\"a\");\n\t\tint maxHeight = 0;\n\t\t\n\t\tfor(final TemplateColumn col : this.config.getColumns())\n\t\t{\n\t\t\tfinal ColumnStyle style = col.getHeaderColumn().getStyle();\n\t\t\tfinal Font font = style.getFont();\n\t\t\tlbl.setFont(font);\n\t\t\t//get the normal height of the label\n\t\t\tint lblHeigh = (int)lbl.getPreferredSize().getHeight();\n\t\t\t//add the column border width\n\t\t\tlblHeigh+= style.getColBorder().getLineWidth()*2;\n\t\t\t//Add padding\n\t\t\tlblHeigh+= style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n\t\t\t\n\t\t\tif(lblHeigh > maxHeight)\n\t\t\t{\n\t\t\t\tmaxHeight = lblHeigh;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn maxHeight;\n\t}\n\t\n\tprivate int calcMaxContentHeight()\n\t{\n\t\t\n\t\tfinal JLabel lbl = new JLabel(\"a\");\n\t\tint maxHeight = 0;\n\t\t\n\t\tfor(final TemplateColumn col : this.config.getColumns())\n\t\t{\n\t\t\tfinal ColumnStyle style = col.getContentColumn().getStyle();\n\t\t\tfinal Font font = style.getFont();\n\t\t\tlbl.setFont(font);\n\t\t\tint lblHeigh = (int)lbl.getPreferredSize().getHeight();\n\t\t\t//Add border width\n\t\t\tlblHeigh+= style.getColBorder().getLineWidth()*2;\n\t\t\t//Add padding\n\t\t\tlblHeigh+= style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n\t\t\t\n\t\t\tif(lblHeigh > maxHeight)\n\t\t\t{\n\t\t\t\tmaxHeight = lblHeigh;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn maxHeight;\n\t}\n\t\n\t\n\tprivate void createTemplateFields(final JasperDesign jasperDesign) throws ExportException\n\t{\n\t\tJRDesignField field;\n\t\t\n\t\tfor(final TemplateColumn col : this.config.getColumns())\n\t\t{\n\t\t\tfield = new JRDesignField();\n\t\t\tfield.setName(col.getContentColumn().getFieldName());\n\t\t\tthis.chooseValueClass(col,field);\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\tjasperDesign.addField(field);\n\t\t\t\tthis.fieldSet.add(field);\n\t\t\t}\n\t\t\tcatch(final JRException e)\n\t\t\t{\n\t\t\t\tthrow new ExportException(\"error during add the field \"\n\t\t\t\t\t\t+ col.getContentColumn().getFieldName(),e);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\t\n\tprivate JRDesignField chooseValueClass(final TemplateColumn col, final JRDesignField field)\n\t{\n\t\tfinal Class<?> valueClass = col.getContentColumn().getColumnValueClass();\n\t\t\n\t\tif(valueClass.isAssignableFrom(byte[].class) || valueClass.isAssignableFrom(XdevBlob.class) || valueClass.isAssignableFrom(XdevClob.class))\n\t\t{\n\t\t\tfield.setValueClass(String.class);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfield.setValueClass(valueClass);\n\t\t}\n\t\t\n\t\treturn field;\n\t}\n\t\n\t\n\tprivate void createHeaderAndContent(final JRDesignBand headerBand, final JRDesignBand detailBand)\n\t{\n\t\tJRDesignStaticText headerLabel;\n\t\tJRDesignStaticText emptyHeaderLabel;\n\t\tJRDesignTextField textField;\n\t\t\t\t\n\t\tfinal int headerLabelHeight = this.calcMaxHeaderHeight();\n\t\theaderBand.setHeight(headerLabelHeight);\n\t\t\n\t\tfinal int contentLabelHeight = this.calcMaxContentHeight();\n\t\tdetailBand.setHeight(contentLabelHeight);\n\t\t\t\t\n\t\tfinal boolean createHeader = this.config.hasAnyHeader();\n\t\t\n\t\tint x = 0;\n\t\t\n\t\tfor(final TemplateColumn col : this.config.getColumns())\n\t\t{\n\t\t\t// Header is created\n\t\t\tif(createHeader)\n\t\t\t{\n\t\t\t\t// If this column has a header the JRDesignStaticText get the\n\t\t\t\t// propertys of the Column\n\t\t\t\tif(col.hasHeaderColumn())\n\t\t\t\t{\n\t\t\t\t\tfinal HeaderColumn headerColumn = col.getHeaderColumn();\n\t\t\t\t\t// Build label and set x / y\n\t\t\t\t\theaderLabel = new JRDesignStaticText();\n\t\t\t\t\theaderLabel.setX(x);\n\t\t\t\t\theaderLabel.setWidth(col.getWidth());\n\t\t\t\t\theaderLabel.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n\t\t\t\t\t\n\t\t\t\t\theaderLabel.setHeight(headerLabelHeight);\n\t\t\t\t\tthis.setStlyeForTextField(headerLabel,headerColumn.getStyle());\n\t\t\t\t\tthis.prepareTextfieldWithBorder(headerLabel,headerColumn.getStyle());\n\t\t\t\t\tthis.prepareTextfieldPadding(headerLabel,headerColumn.getStyle());\n\t\t\t\t\t\n\t\t\t\t\theaderLabel.setPositionType(PositionTypeEnum.FLOAT);\n\n\t\t\t\t\t\n\t\t\t\t\t// Get the Property\n\t\t\t\t\theaderLabel.setText(headerColumn.getProperty());\n\t\t\t\t\theaderBand.addElement(headerLabel);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// an empty label must be added to complete the layout\n\t\t\t\t\t// Build label and set x / y\n\t\t\t\t\temptyHeaderLabel = new JRDesignStaticText();\n\t\t\t\t\temptyHeaderLabel.setX(x);\n\t\t\t\t\temptyHeaderLabel.setWidth(col.getWidth());\n\t\t\t\t\theaderBand.addElement(emptyHeaderLabel);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfinal ContentColumn contentColumn = col.getContentColumn();\n\t\t\t\n\t\t\ttextField = new JRDesignTextField();\n\t\t\ttextField.setX(x);\n\t\t\ttextField.setWidth(col.getWidth());\n\t\t\ttextField.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n\t\t\ttextField.setHeight(contentLabelHeight);\n\t\t\t\n\t\t\tthis.setStlyeForTextField(textField,contentColumn.getStyle());\n\t\t\ttextField.setPattern(contentColumn.getProperty());\n\t\t\t\n\t\t\t// box tag properties\n\t\t\tthis.prepareTextfieldWithBorder(textField,contentColumn.getStyle());\n\t\t\tthis.prepareTextfieldPadding(textField,contentColumn.getStyle());\n\t\t\t\n\t\t\ttextField.setExpression(this.buildExpression(contentColumn));\n\t\t\t\n\t\t\ttextField.setPositionType(PositionTypeEnum.FLOAT);\n\t\t\t\n\t\t\tif(this.config.isBlankWhenNullValue())\n\t\t\t{\n\t\t\t\ttextField.setBlankWhenNull(true);\n\t\t\t}\n\t\t\tdetailBand.addElement(textField);\n\t\t\t\n\t\t\tx += col.getWidth();\n\t\t}\n\t\t\n\t}\n\t\n\tprivate void setStlyeForTextField(final JRDesignTextElement txtField, final ColumnStyle style)\n\t{\n\t\ttxtField.setBackcolor(style.getBackground());\n\t\ttxtField.setForecolor(style.getForeground());\n\t\t// Font\n\t\tfinal Font f = style.getFont();\n\t\ttxtField.setFontName(f.getName());\n\t\ttxtField.setFontSize(Float.valueOf(f.getSize()));\n\t\ttxtField.setBold(Boolean.valueOf(f.isBold()));\n\t\ttxtField.setItalic(Boolean.valueOf(f.isItalic()));\n\t\ttxtField.setHorizontalTextAlign(style.getHorizontalAlignment().getHorizontalTextAlignEnum());\n\t\t\n\t\t\n\t\tif(!style.getBackground().equals(Color.WHITE))\n\t\t{\n\t\t\ttxtField.setMode(ModeEnum.OPAQUE);\n\t\t}\n\t}\n\t\n\t\n\tprivate void prepareTextfieldWithBorder(final JRDesignTextElement textField, final ColumnStyle style)\n\t{\n\t\tfinal ColumnBorder border = style.getColBorder();\n\t\tif(border == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\ttextField.getLineBox().getPen().setLineWidth(border.getLineWidth());\n\t\ttextField.getLineBox().getPen().setLineColor(border.getLineColor());\n\t\ttextField.getLineBox().getPen().setLineStyle(border.getLineStyle().getLineStyleEnum());\n\t}\n\t\n\tprivate void prepareTextfieldPadding(final JRDesignTextElement textField, final ColumnStyle style)\n\t{\n\t\tfinal ColumnPadding colPadding = style.getColumnPadding();\n\t\tfinal JRLineBox lineBox = textField.getLineBox();\n\t\t\n\t\t\n\t\tlineBox.setTopPadding(colPadding.getTopWidth());\n\t\tlineBox.setRightPadding(colPadding.getRightWidth());\n\t\tlineBox.setLeftPadding(colPadding.getLeftWidth());\n\t\tlineBox.setBottomPadding(colPadding.getBottomWidth());\n\t}\n\t\n\t\n\tprivate JRDesignExpression buildExpression(final ContentColumn column)\n\t{\n\t\tfinal JRDesignExpression expression = new JRDesignExpression();\n\t\texpression.setText(\"$F{\" + column.getFieldName() + \"}\");\n\t\treturn expression;\n\t}\n\t\n\t\n\t/**\n\t * \n\t * Assemble and compile a {@link JasperReport} based on the information of\n\t * the {@link TemplateConfig} object.\n\t * \n\t * @return the compiled {@link JasperReport}\n\t * @throws ExportException\n\t */\n\tpublic JasperReport assembleReport() throws ExportException\n\t{\n\t\ttry\n\t\t{\n\t\t\tfinal JasperDesign jasperDesign = this.createDefaultDesign();\n\t\t\tthis.createTemplateFields(jasperDesign);\n\t\t\t\n\t\t\tfinal JRDesignBand headerBand = this.initHeaderBand();\n\t\t\tfinal JRDesignBand detailBand = this.initDetailBand();\n\t\t\t\n\t\t\tthis.createHeaderAndContent(headerBand,detailBand);\n\t\t\t\n\t\t\t((JRDesignSection)jasperDesign.getDetailSection()).addBand(detailBand);\n\t\t\tif(this.config.hasAnyHeader())\n\t\t\t{\n\t\t\t\tjasperDesign.setTitle(headerBand);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\treturn JasperCompileManager.compileReport(jasperDesign);\n\t\t}\n\t\tcatch(final Exception e)\n\t\t{\n\t\t\tthrow new ExportException(e);\n\t\t}\n\t}\n\t\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n\t\ttextField.getLineBox().getPen().setLineWidth(border.getLineWidth());\nwith the following error message:\n[ERROR] /biapi/src/main/java/xdev/tableexport/export/ReportBuilder.java:[369,81] incompatible types: int cannot be converted to java.lang.Float\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setBold | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setItalic | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setUnderline | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setStrikeThrough | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setPdfEmbedded | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "\t\ttextField.getLineBox().getPen().setLineWidth(border.getLineWidth());",
    "error_message": "[ERROR] /biapi/src/main/java/xdev/tableexport/export/ReportBuilder.java:[369,81] incompatible types: int cannot be converted to java.lang.Float",
    "api_diff": "Format: element | nature | kind\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setBold | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setItalic | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setUnderline | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setStrikeThrough | DELETION | METHOD_REMOVED\nnet.sf.jasperreports.engine.design.JRDesignTextElement.setPdfEmbedded | DELETION | METHOD_REMOVED",
    "original_code": "package xdev.tableexport.export;\n\n/*-\n * #%L\n * XDEV BI Suite\n * %%\n * Copyright (C) 2011 - 2020 XDEV Software\n * %%\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Lesser Public License for more details.\n * \n * You should have received a copy of the GNU General Lesser Public\n * License along with this program.  If not, see\n * <http://www.gnu.org/licenses/lgpl-3.0.html>.\n * #L%\n */\n\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.swing.JLabel;\n\nimport net.sf.jasperreports.engine.JRException;\nimport net.sf.jasperreports.engine.JRLineBox;\nimport net.sf.jasperreports.engine.JasperCompileManager;\nimport net.sf.jasperreports.engine.JasperReport;\nimport net.sf.jasperreports.engine.design.JRDesignBand;\nimport net.sf.jasperreports.engine.design.JRDesignExpression;\nimport net.sf.jasperreports.engine.design.JRDesignField;\nimport net.sf.jasperreports.engine.design.JRDesignSection;\nimport net.sf.jasperreports.engine.design.JRDesignStaticText;\nimport net.sf.jasperreports.engine.design.JRDesignTextElement;\nimport net.sf.jasperreports.engine.design.JRDesignTextField;\nimport net.sf.jasperreports.engine.design.JasperDesign;\nimport net.sf.jasperreports.engine.type.ModeEnum;\nimport net.sf.jasperreports.engine.type.PositionTypeEnum;\nimport net.sf.jasperreports.engine.type.SplitTypeEnum;\nimport xdev.tableexport.config.ColumnBorder;\nimport xdev.tableexport.config.ColumnPadding;\nimport xdev.tableexport.config.ColumnStyle;\nimport xdev.tableexport.config.ContentColumn;\nimport xdev.tableexport.config.HeaderColumn;\nimport xdev.tableexport.config.PageProperties;\nimport xdev.tableexport.config.TemplateColumn;\nimport xdev.tableexport.config.TemplateConfig;\nimport xdev.vt.XdevBlob;\nimport xdev.vt.XdevClob;\n\n\n/**\n * The {@link ReportBuilder} generates a {@link JasperReport} based on the\n * information of the {@link TemplateConfig}.\n * \n * @author XDEV Software (FHAE)\n * \n * @see TemplateConfig\n * @see ReportExporter\n * \n */\npublic class ReportBuilder\n{\n\tprivate final TemplateConfig\t\t\tconfig;\n\tprivate final Set<JRDesignField>\t\tfieldSet\t= new HashSet<>();\n\t\n\t\n\tpublic ReportBuilder(final TemplateConfig tempConfig)\n\t{\n\t\tthis.config = tempConfig;\n\t}\n\t\n\t\n\tprivate JRDesignBand initDetailBand()\n\t{\n\t\tfinal JRDesignBand detailBand = new JRDesignBand();\n\t\tdetailBand.setHeight(TemplateConfig.DEFAULT_DETAIL_BAND_HEIGHT);\n\t\tdetailBand.setSplitType(SplitTypeEnum.STRETCH);\n\t\t\n\t\treturn detailBand;\n\t}\n\t\n\t\n\tprivate JRDesignBand initHeaderBand()\n\t{\n\t\t// Header\n\t\tfinal JRDesignBand headerBand = new JRDesignBand();\n\t\theaderBand.setHeight(TemplateConfig.DEFAULT_HEADER_BAND_HEIGHT);\n\t\t\n\t\treturn headerBand;\n\t}\n\t\n\t\n\tprivate JasperDesign createDefaultDesign()\n\t{\n\t\tfinal JasperDesign jasperDesign = new JasperDesign();\n\t\tjasperDesign.setName(\"DefaultDesign\");\n\t\tfinal PageProperties properties = this.config.getPageProperties();\n\t\t\n\t\tjasperDesign.setPageWidth(this.calcPageWidth(properties));\n\t\tjasperDesign.setColumnWidth(this.calcColumnsWidth());\n\t\t\n\t\tjasperDesign.setPageHeight(properties.getPageHeight());\n\t\tjasperDesign.setColumnSpacing(properties.getColumnSpacing());\n\t\tjasperDesign.setLeftMargin(properties.getLeftMargin());\n\t\tjasperDesign.setRightMargin(properties.getRightMargin());\n\t\tjasperDesign.setTopMargin(properties.getTopMargin());\n\t\tjasperDesign.setBottomMargin(properties.getBottomMargin());\n\t\t\n\t\treturn jasperDesign;\n\t}\n\t\n\t\n\tprivate int calcColumnsWidth()\n\t{\n\t\tint width = 0;\n\t\t\n\t\tfor(final TemplateColumn col : this.config.getColumns())\n\t\t{\n\t\t\twidth += col.getWidth();\n\t\t}\n\t\t\n\t\treturn width;\n\t}\n\n\t/***\n\t * Calculated the page width including the margins.\n\t * \n\t * @param properties\n\t * \n\t * @return\n\t */\n\tprivate int calcPageWidth(final PageProperties properties)\n\t{\n\t\tint width = 0;\n\t\t\n\t\tfor(final TemplateColumn col : this.config.getColumns())\n\t\t{\n\t\t\twidth += col.getWidth();\n\t\t}\n\t\t\n\t\twidth += properties.getLeftMargin() + properties.getRightMargin();\n\t\t\n\t\treturn width;\n\t}\n\t\n\t\n\t/**\n\t * \n\t * @return\n\t */\n\tprivate int calcMaxHeaderHeight()\n\t{\n\t\t\n\t\tfinal JLabel lbl = new JLabel(\"a\");\n\t\tint maxHeight = 0;\n\t\t\n\t\tfor(final TemplateColumn col : this.config.getColumns())\n\t\t{\n\t\t\tfinal ColumnStyle style = col.getHeaderColumn().getStyle();\n\t\t\tfinal Font font = style.getFont();\n\t\t\tlbl.setFont(font);\n\t\t\t//get the normal height of the label\n\t\t\tint lblHeigh = (int)lbl.getPreferredSize().getHeight();\n\t\t\t//add the column border width\n\t\t\tlblHeigh+= style.getColBorder().getLineWidth()*2;\n\t\t\t//Add padding\n\t\t\tlblHeigh+= style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n\t\t\t\n\t\t\tif(lblHeigh > maxHeight)\n\t\t\t{\n\t\t\t\tmaxHeight = lblHeigh;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn maxHeight;\n\t}\n\t\n\tprivate int calcMaxContentHeight()\n\t{\n\t\t\n\t\tfinal JLabel lbl = new JLabel(\"a\");\n\t\tint maxHeight = 0;\n\t\t\n\t\tfor(final TemplateColumn col : this.config.getColumns())\n\t\t{\n\t\t\tfinal ColumnStyle style = col.getContentColumn().getStyle();\n\t\t\tfinal Font font = style.getFont();\n\t\t\tlbl.setFont(font);\n\t\t\tint lblHeigh = (int)lbl.getPreferredSize().getHeight();\n\t\t\t//Add border width\n\t\t\tlblHeigh+= style.getColBorder().getLineWidth()*2;\n\t\t\t//Add padding\n\t\t\tlblHeigh+= style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n\t\t\t\n\t\t\tif(lblHeigh > maxHeight)\n\t\t\t{\n\t\t\t\tmaxHeight = lblHeigh;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn maxHeight;\n\t}\n\t\n\t\n\tprivate void createTemplateFields(final JasperDesign jasperDesign) throws ExportException\n\t{\n\t\tJRDesignField field;\n\t\t\n\t\tfor(final TemplateColumn col : this.config.getColumns())\n\t\t{\n\t\t\tfield = new JRDesignField();\n\t\t\tfield.setName(col.getContentColumn().getFieldName());\n\t\t\tthis.chooseValueClass(col,field);\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\tjasperDesign.addField(field);\n\t\t\t\tthis.fieldSet.add(field);\n\t\t\t}\n\t\t\tcatch(final JRException e)\n\t\t\t{\n\t\t\t\tthrow new ExportException(\"error during add the field \"\n\t\t\t\t\t\t+ col.getContentColumn().getFieldName(),e);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\t\n\tprivate JRDesignField chooseValueClass(final TemplateColumn col, final JRDesignField field)\n\t{\n\t\tfinal Class<?> valueClass = col.getContentColumn().getColumnValueClass();\n\t\t\n\t\tif(valueClass.isAssignableFrom(byte[].class) || valueClass.isAssignableFrom(XdevBlob.class) || valueClass.isAssignableFrom(XdevClob.class))\n\t\t{\n\t\t\tfield.setValueClass(String.class);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfield.setValueClass(valueClass);\n\t\t}\n\t\t\n\t\treturn field;\n\t}\n\t\n\t\n\tprivate void createHeaderAndContent(final JRDesignBand headerBand, final JRDesignBand detailBand)\n\t{\n\t\tJRDesignStaticText headerLabel;\n\t\tJRDesignStaticText emptyHeaderLabel;\n\t\tJRDesignTextField textField;\n\t\t\t\t\n\t\tfinal int headerLabelHeight = this.calcMaxHeaderHeight();\n\t\theaderBand.setHeight(headerLabelHeight);\n\t\t\n\t\tfinal int contentLabelHeight = this.calcMaxContentHeight();\n\t\tdetailBand.setHeight(contentLabelHeight);\n\t\t\t\t\n\t\tfinal boolean createHeader = this.config.hasAnyHeader();\n\t\t\n\t\tint x = 0;\n\t\t\n\t\tfor(final TemplateColumn col : this.config.getColumns())\n\t\t{\n\t\t\t// Header is created\n\t\t\tif(createHeader)\n\t\t\t{\n\t\t\t\t// If this column has a header the JRDesignStaticText get the\n\t\t\t\t// propertys of the Column\n\t\t\t\tif(col.hasHeaderColumn())\n\t\t\t\t{\n\t\t\t\t\tfinal HeaderColumn headerColumn = col.getHeaderColumn();\n\t\t\t\t\t// Build label and set x / y\n\t\t\t\t\theaderLabel = new JRDesignStaticText();\n\t\t\t\t\theaderLabel.setX(x);\n\t\t\t\t\theaderLabel.setWidth(col.getWidth());\n\t\t\t\t\theaderLabel.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n\t\t\t\t\t\n\t\t\t\t\theaderLabel.setHeight(headerLabelHeight);\n\t\t\t\t\tthis.setStlyeForTextField(headerLabel,headerColumn.getStyle());\n\t\t\t\t\tthis.prepareTextfieldWithBorder(headerLabel,headerColumn.getStyle());\n\t\t\t\t\tthis.prepareTextfieldPadding(headerLabel,headerColumn.getStyle());\n\t\t\t\t\t\n\t\t\t\t\theaderLabel.setPositionType(PositionTypeEnum.FLOAT);\n\n\t\t\t\t\t\n\t\t\t\t\t// Get the Property\n\t\t\t\t\theaderLabel.setText(headerColumn.getProperty());\n\t\t\t\t\theaderBand.addElement(headerLabel);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// an empty label must be added to complete the layout\n\t\t\t\t\t// Build label and set x / y\n\t\t\t\t\temptyHeaderLabel = new JRDesignStaticText();\n\t\t\t\t\temptyHeaderLabel.setX(x);\n\t\t\t\t\temptyHeaderLabel.setWidth(col.getWidth());\n\t\t\t\t\theaderBand.addElement(emptyHeaderLabel);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfinal ContentColumn contentColumn = col.getContentColumn();\n\t\t\t\n\t\t\ttextField = new JRDesignTextField();\n\t\t\ttextField.setX(x);\n\t\t\ttextField.setWidth(col.getWidth());\n\t\t\ttextField.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n\t\t\ttextField.setHeight(contentLabelHeight);\n\t\t\t\n\t\t\tthis.setStlyeForTextField(textField,contentColumn.getStyle());\n\t\t\ttextField.setPattern(contentColumn.getProperty());\n\t\t\t\n\t\t\t// box tag properties\n\t\t\tthis.prepareTextfieldWithBorder(textField,contentColumn.getStyle());\n\t\t\tthis.prepareTextfieldPadding(textField,contentColumn.getStyle());\n\t\t\t\n\t\t\ttextField.setExpression(this.buildExpression(contentColumn));\n\t\t\t\n\t\t\ttextField.setPositionType(PositionTypeEnum.FLOAT);\n\t\t\t\n\t\t\tif(this.config.isBlankWhenNullValue())\n\t\t\t{\n\t\t\t\ttextField.setBlankWhenNull(true);\n\t\t\t}\n\t\t\tdetailBand.addElement(textField);\n\t\t\t\n\t\t\tx += col.getWidth();\n\t\t}\n\t\t\n\t}\n\t\n\tprivate void setStlyeForTextField(final JRDesignTextElement txtField, final ColumnStyle style)\n\t{\n\t\ttxtField.setBackcolor(style.getBackground());\n\t\ttxtField.setForecolor(style.getForeground());\n\t\t// Font\n\t\tfinal Font f = style.getFont();\n\t\ttxtField.setFontName(f.getName());\n\t\ttxtField.setFontSize(Float.valueOf(f.getSize()));\n\t\ttxtField.setBold(Boolean.valueOf(f.isBold()));\n\t\ttxtField.setItalic(Boolean.valueOf(f.isItalic()));\n\t\ttxtField.setHorizontalTextAlign(style.getHorizontalAlignment().getHorizontalTextAlignEnum());\n\t\t\n\t\t\n\t\tif(!style.getBackground().equals(Color.WHITE))\n\t\t{\n\t\t\ttxtField.setMode(ModeEnum.OPAQUE);\n\t\t}\n\t}\n\t\n\t\n\tprivate void prepareTextfieldWithBorder(final JRDesignTextElement textField, final ColumnStyle style)\n\t{\n\t\tfinal ColumnBorder border = style.getColBorder();\n\t\tif(border == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\ttextField.getLineBox().getPen().setLineWidth(border.getLineWidth());\n\t\ttextField.getLineBox().getPen().setLineColor(border.getLineColor());\n\t\ttextField.getLineBox().getPen().setLineStyle(border.getLineStyle().getLineStyleEnum());\n\t}\n\t\n\tprivate void prepareTextfieldPadding(final JRDesignTextElement textField, final ColumnStyle style)\n\t{\n\t\tfinal ColumnPadding colPadding = style.getColumnPadding();\n\t\tfinal JRLineBox lineBox = textField.getLineBox();\n\t\t\n\t\t\n\t\tlineBox.setTopPadding(colPadding.getTopWidth());\n\t\tlineBox.setRightPadding(colPadding.getRightWidth());\n\t\tlineBox.setLeftPadding(colPadding.getLeftWidth());\n\t\tlineBox.setBottomPadding(colPadding.getBottomWidth());\n\t}\n\t\n\t\n\tprivate JRDesignExpression buildExpression(final ContentColumn column)\n\t{\n\t\tfinal JRDesignExpression expression = new JRDesignExpression();\n\t\texpression.setText(\"$F{\" + column.getFieldName() + \"}\");\n\t\treturn expression;\n\t}\n\t\n\t\n\t/**\n\t * \n\t * Assemble and compile a {@link JasperReport} based on the information of\n\t * the {@link TemplateConfig} object.\n\t * \n\t * @return the compiled {@link JasperReport}\n\t * @throws ExportException\n\t */\n\tpublic JasperReport assembleReport() throws ExportException\n\t{\n\t\ttry\n\t\t{\n\t\t\tfinal JasperDesign jasperDesign = this.createDefaultDesign();\n\t\t\tthis.createTemplateFields(jasperDesign);\n\t\t\t\n\t\t\tfinal JRDesignBand headerBand = this.initHeaderBand();\n\t\t\tfinal JRDesignBand detailBand = this.initDetailBand();\n\t\t\t\n\t\t\tthis.createHeaderAndContent(headerBand,detailBand);\n\t\t\t\n\t\t\t((JRDesignSection)jasperDesign.getDetailSection()).addBand(detailBand);\n\t\t\tif(this.config.hasAnyHeader())\n\t\t\t{\n\t\t\t\tjasperDesign.setTitle(headerBand);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\treturn JasperCompileManager.compileReport(jasperDesign);\n\t\t}\n\t\tcatch(final Exception e)\n\t\t{\n\t\t\tthrow new ExportException(e);\n\t\t}\n\t}\n\t\n}\n",
    "project": "biapi",
    "libraryName": "jasperreports",
    "libraryGroupID": "net.sf.jasperreports",
    "newVersion": "6.19.1",
    "previousVersion": "6.18.1",
    "breakingCommit": "0abf7148300f40a1da0538ab060552bca4a2f1d8"
}