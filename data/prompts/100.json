{
    "relative_path": "java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java",
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nthe following client code fails: \n'''java\n/*\n * Copyright (c) 2019 BitPay.\n * All rights reserved.\n */\n\npackage com.bitpay.sdk.util;\n\nimport com.bitpay.sdk.exceptions.BitPayExceptionProvider;\nimport com.bitpay.sdk.exceptions.BitPayGenericException;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.math.BigInteger;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.charset.StandardCharsets;\nimport org.bitcoinj.core.Base58;\nimport org.bitcoinj.core.ECKey;\nimport org.bitcoinj.core.ECKey.ECDSASignature;\nimport org.bitcoinj.core.Sha256Hash;\nimport org.bitcoinj.crypto.KeyCrypterException;\n\n/**\n * The type Key utils.\n */\npublic class KeyUtils {\n\n    private static final char[] hexArray = \"0123456789abcdef\".toCharArray();\n    private static String PrivateKeyFile;\n    private static URI privateKey;\n\n    /**\n     * Instantiates a new Key utils.\n     */\n    public KeyUtils() {\n    }\n\n    /**\n     * Check if private key exists.\n     *\n     * @param privateKeyFile the private key file\n     * @return the boolean\n     */\n    public static boolean privateKeyExists(String privateKeyFile) {\n        PrivateKeyFile = privateKeyFile;\n\n        return new File(privateKeyFile).exists();\n    }\n\n    /**\n     * Create EC key.\n     *\n     * @return the ec key\n     */\n    public static ECKey createEcKey() {\n        //Default constructor uses SecureRandom numbers.\n        return new ECKey();\n    }\n\n    /**\n     * Create EC key from hex string.\n     *\n     * @param privateKey the private key\n     * @return the ec key\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static ECKey createEcKeyFromHexString(String privateKey) throws BitPayGenericException {\n        byte[] bytes = hexToBytes(privateKey);\n\n        return ECKey.fromASN1(bytes);\n    }\n\n    /**\n     * Create EC key from hex string private key file.\n     *\n     * @param privKeyFile the priv key file\n     * @return the ec key\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws IOException the io exception\n     */\n    public static ECKey createEcKeyFromHexStringFile(String privKeyFile) throws IOException, BitPayGenericException {\n        return createEcKeyFromHexString(getKeyStringFromFile(privKeyFile));\n    }\n\n    /**\n     * Load EC key.\n     *\n     * @return the ec key\n     * @throws IOException the io exception\n     */\n    public static ECKey loadEcKey() throws IOException {\n        FileInputStream fileInputStream;\n        File file;\n\n        if (KeyUtils.privateKey == null) {\n            file = new File(PrivateKeyFile);\n        } else {\n            file = new File(KeyUtils.privateKey);\n        }\n\n        byte[] bytes = new byte[(int) file.length()];\n\n        fileInputStream = new FileInputStream(file);\n        int numBytesRead = fileInputStream.read(bytes);\n\n        fileInputStream.close();\n\n        if (numBytesRead == -1) {\n            throw new IOException(\"read nothing from the file.\");\n        }\n        return ECKey.fromASN1(bytes);\n    }\n\n    /**\n     * Load EC key.\n     *\n     * @param privateKey the private key\n     * @return the ec key\n     * @throws IOException        the io exception\n     * @throws URISyntaxException the uri syntax exception\n     */\n    public static ECKey loadEcKey(URI privateKey) throws IOException, URISyntaxException {\n        KeyUtils.privateKey = privateKey;\n        File file = new File(privateKey);\n        if (!file.exists()) {\n            ECKey key = createEcKey();\n            saveEcKey(key, KeyUtils.privateKey);\n            return key;\n        }\n        return loadEcKey();\n    }\n\n    /**\n     * Gets key string from file.\n     *\n     * @param filename the filename\n     * @return the key string from file\n     * @throws IOException the io exception\n     */\n    public static String getKeyStringFromFile(String filename) throws IOException {\n        BufferedReader br;\n\n        br = new BufferedReader(new FileReader(filename));\n\n        String line = br.readLine();\n\n        br.close();\n\n        return line;\n    }\n\n    /**\n     * Save EC key.\n     *\n     * @param ecKey the ec key\n     * @throws IOException the io exception\n     */\n    public static void saveEcKey(ECKey ecKey) throws IOException {\n        byte[] bytes = ecKey.toASN1();\n        File file;\n\n        if (KeyUtils.privateKey == null) {\n            file = new File(PrivateKeyFile);\n        } else {\n            file = new File(KeyUtils.privateKey);\n        }\n\n        FileOutputStream output = new FileOutputStream(file);\n\n        output.write(bytes);\n        output.close();\n    }\n\n    /**\n     * Save EC key.\n     *\n     * @param ecKey      the ec key\n     * @param privateKey the private key\n     * @throws IOException        the io exception\n     * @throws URISyntaxException the uri syntax exception\n     */\n    public static void saveEcKey(\n        ECKey ecKey,\n        URI privateKey\n    ) throws IOException, URISyntaxException {\n        File file = new File(privateKey);\n        //we shan't overwrite an existing file\n\n        if (file.exists()) {\n            return;\n        }\n        KeyUtils.privateKey = privateKey;\n        saveEcKey(ecKey);\n    }\n\n    /**\n     * Save EC key as hex.\n     *\n     * @param ecKey the ec key\n     * @throws IOException the io exception\n     */\n    public static void saveEcKeyAsHex(ECKey ecKey) throws IOException {\n        byte[] bytes = ecKey.toASN1();\n        PrintWriter file;\n\n        if (KeyUtils.privateKey == null) {\n            file = new PrintWriter(PrivateKeyFile);\n        } else {\n            file = new PrintWriter(String.valueOf(KeyUtils.privateKey));\n        }\n\n        String keyHex = bytesToHex(bytes);\n        file.println(keyHex);\n        file.close();\n    }\n\n    /**\n     * Load EC key as hex string.\n     *\n     * @param ecKey the ec key\n     * @return the string\n     * @throws IOException the io exception\n     */\n    public static String loadEcKeyAsHex(ECKey ecKey) throws IOException {\n        byte[] bytes = ecKey.toASN1();\n        return bytesToHex(bytes);\n    }\n\n    /**\n     * Derive sin string.\n     *\n     * @param ecKey the ec key\n     * @return the string\n     * @throws BitPayGenericException the illegal argument exception\n     */\n    public static String deriveSin(ECKey ecKey) throws BitPayGenericException {\n        // Get sha256 hash and then the RIPEMD-160 hash of the public key (this call gets the result in one step).\n        byte[] pubKeyHash = ecKey.getPubKeyHash();\n\n        // Convert binary pubKeyHash, SINtype and version to Hex\n        String version = \"0F\";\n        String sinType = \"02\";\n        String pubKeyHashHex = bytesToHex(pubKeyHash);\n\n        // Concatenate all three elements\n        String preSin = version + sinType + pubKeyHashHex;\n\n        // Convert the hex string back to binary and double sha256 hash it leaving in binary both times\n        byte[] preSinByte = hexToBytes(preSin);\n        byte[] hash2Bytes = Sha256Hash.hashTwice(preSinByte);\n\n        // Convert back to hex and take first four bytes\n        String hashString = bytesToHex(hash2Bytes);\n        String first4Bytes = hashString.substring(0, 8);\n\n        // Append first four bytes to fully appended SIN string\n        String unencoded = preSin + first4Bytes;\n        byte[] unencodedBytes = new BigInteger(unencoded, 16).toByteArray();\n        return Base58.encode(unencodedBytes);\n    }\n\n    /**\n     * Sign EC Key.\n     *\n     * @param key   the key\n     * @param input the input\n     * @return the string\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static String sign(\n        ECKey key,\n        String input\n    ) throws BitPayGenericException {\n        String result = null;\n\n        try {\n            byte[] data = input.getBytes(StandardCharsets.UTF_8);\n\n            Sha256Hash hash = Sha256Hash.of(data);\n            ECDSASignature sig = key.sign(hash, null);\n\n            byte[] bytes = sig.encodeToDER();\n\n            result = bytesToHex(bytes);\n        } catch (KeyCrypterException e) {\n            BitPayExceptionProvider.throwGenericExceptionWithMessage(\"Wrong ecKey. \" + e.getMessage());\n        }\n\n        return result;\n    }\n\n    private static int getHexVal(char hex) {\n        int val = hex;\n        return val - (val < 58 ? 48 : (val < 97 ? 55 : 87));\n    }\n\n    /**\n     * Convert hex to bytes.\n     *\n     * @param hex the hex\n     * @return the byte []\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static byte[] hexToBytes(String hex) throws BitPayGenericException {\n        char[] hexArray = hex.toCharArray();\n\n        if (hex.length() % 2 == 1) {\n            BitPayExceptionProvider.throwGenericExceptionWithMessage(\n                \"Error: The binary key cannot have an odd number of digits\");\n        }\n\n        byte[] arr = new byte[hex.length() >> 1];\n\n        for (int i = 0; i < hex.length() >> 1; ++i) {\n            arr[i] = (byte) ((getHexVal(hexArray[i << 1]) << 4) + (getHexVal(hexArray[(i << 1) + 1])));\n        }\n\n        return arr;\n    }\n\n    /**\n     * Convert bytes to hex.\n     *\n     * @param bytes the bytes\n     * @return the string\n     */\n    public static String bytesToHex(byte[] bytes) {\n        char[] hexChars = new char[bytes.length * 2];\n\n        for (int j = 0; j < bytes.length; j++) {\n            int v = bytes[j] & 0xFF;\n\n            hexChars[j * 2] = hexArray[v >>> 4];\n            hexChars[j * 2 + 1] = hexArray[v & 0x0F];\n        }\n\n        return new String(hexChars);\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n\nwith the following error message:\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[21,25] cannot find symbol  symbol:   class Base58\n  location: package org.bitcoinj.core\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[22,25] cannot find symbol  symbol:   class ECKey\n  location: package org.bitcoinj.core\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[23,31] package org.bitcoinj.core.ECKey does not exist\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[24,25] cannot find symbol  symbol:   class Sha256Hash\n  location: package org.bitcoinj.core\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[59,19] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[61,20] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[71,19] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[74,16] cannot find symbol  symbol:   variable ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[85,19] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[95,19] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[115,16] cannot find symbol  symbol:   variable ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[126,19] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[130,13] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[162,34] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[187,9] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[206,39] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[228,41] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[240,36] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[254,29] cannot find symbol  symbol:   variable Sha256Hash\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[263,16] cannot find symbol  symbol:   variable Base58\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[275,9] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[283,13] cannot find symbol  symbol:   class Sha256Hash\n  location: class com.bitpay.sdk.util.KeyUtils\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/util/KeyUtils.java:[284,13] cannot find symbol  symbol:   class ECDSASignature\n  location: class com.bitpay.sdk.util.KeyUtils\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.bitcoinj.core.Transaction.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey$KeyIsEncryptedException | DELETION | TYPE_REMOVED\norg.bitcoinj.core.ECKey.HALF_CURVE_ORDER | DELETION | FIELD_REMOVED\norg.bitcoinj.utils.BlockFileLoader.next | DELETION | METHOD_REMOVED\norg.bitcoinj.core.PeerGroup.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.GetHeadersMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.CURVE | DELETION | FIELD_REMOVED\norg.bitcoinj.wallet.CoinSelection.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.notifyAll | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.verifyOrThrow | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.utils.ExchangeRate.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.notify | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.getEncryptionType | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.SendAddrV2Message.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.HeadersMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.RedeemData.of | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\norg.bitcoinj.core.ECKey$ECDSASignature.decodeFromDER | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.core.PeerAddress.equals | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.wallet.Wallet$CouldNotAdjustDownwards.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.fromEncrypted | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.ECKey.findRecoveryId | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.BasicKeyChain.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.core.PeerAddress.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey$ECDSASignature.decodeFromDER | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.crypto.DeterministicKey.sign | DELETION | METHOD_REMOVED\norg.bitcoinj.core.TransactionOutputChanges.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.TransactionOutput.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.net.BlockingClient.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.store.MemoryBlockStore.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.toStringWithPrivate | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.verifyOrThrow | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.uri.BitcoinURI.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Context.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ListMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.FilteringCoinSelector.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.TransactionOutPoint.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey$ECDSASignature.decodeFromDER | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.core.BlockLocator.get | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.TransactionConfidence.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.signedMessageToKey | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.signers.CustomTransactionSigner$SignatureAndKey.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.net.NioClient.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.getClass | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.decompress | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.PrunedException.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.store.BlockStore.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.AbstractBlockChain.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Pong.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.InsufficientMoneyException.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.AllowUnconfirmedCoinSelector.get | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.VersionAck.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.StoredUndoableBlock.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.FeeFilterMessage.toString | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.core.ECKey.fromPublicOnly | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.wallet.DeterministicKeyChain.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.DefaultCoinSelector.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey$ECDSASignature | DELETION | TYPE_REMOVED\norg.bitcoinj.core.ECKey.doSign | DELETION | METHOD_REMOVED\norg.bitcoinj.core.TransactionWitness.equals | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.core.InventoryItem.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.fromPublicOnly | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.fromASN1 | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.ECKey.encryptionIsReversible | DELETION | METHOD_REMOVED\norg.bitcoinj.crypto.KeyCrypterScrypt.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.sign | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.maybeDecrypt | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.recoverFromSignature | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.decompressPoint | DELETION | METHOD_REMOVED\norg.bitcoinj.protocols.payments.PaymentProtocol$Output.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey$MissingPrivateKeyException | DELETION | TYPE_REMOVED\norg.bitcoinj.core.TransactionWitness.toString | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.core.ECKey.verify | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey | DELETION | TYPE_REMOVED\norg.bitcoinj.core.EmptyMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.RejectMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.GetBlocksMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.AGE_COMPARATOR | MUTATION | FIELD_TYPE_CHANGED\norg.bitcoinj.core.Transaction.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.SendHeadersMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.CheckpointManager.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.BlockLocator.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.TransactionWitness.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.equals | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.FAKE_SIGNATURES | DELETION | FIELD_REMOVED\norg.bitcoinj.wallet.Wallet.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.store.MemoryFullPrunedBlockStore.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.verify | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.crypto.TransactionSignature.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.store.SPVBlockStore.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.PartialMerkleTree.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.DeterministicSeed.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.NetworkParameters.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.fromPrivateAndPrecalculatedPublic | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.TxConfidenceTable.get | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.Wallet.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.verifyOrThrow | DELETION | METHOD_REMOVED\norg.bitcoinj.core.PeerAddress.toString | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.core.ECKey.creationTimeSeconds | DELETION | FIELD_REMOVED\norg.bitcoinj.core.BitcoinSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.getPrivateKeyEncoded | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.protocols.payments.PaymentSession.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.UTXO.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Sha256Hash | DELETION | TYPE_REMOVED\norg.bitcoinj.core.Block.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.fromPrivate | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.ECKey.compressPoint | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.verify | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\njava.lang.Object.clone | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.PUBKEY_COMPARATOR | MUTATION | FIELD_TYPE_CHANGED\norg.bitcoinj.core.Ping.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.DecryptingKeyBag.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.hashCode | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.DeterministicKeyChain.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.NotFoundMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.InventoryMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.TransactionInput.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.signMessage | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.KeyChainGroup.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.core.GetAddrMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.utils.ExponentialBackoff$Params.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.FilteredBlock.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.UnknownMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.VersionMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.RedeemData.of | DELETION | METHOD_REMOVED\norg.bitcoinj.core.BlockChain.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.BloomFilter.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Message.length | DELETION | FIELD_REMOVED\norg.bitcoinj.core.FullPrunedBlockChain.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.GetDataMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.DeterministicSeed.<init> | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.store.MemoryBlockStore.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.FeeFilterMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Base58 | DELETION | TYPE_REMOVED\njava.lang.Object.wait | DELETION | METHOD_REMOVED\njava.lang.Object.finalize | DELETION | METHOD_REMOVED\norg.bitcoinj.kits.WalletAppKit.<init> | DELETION | CONSTRUCTOR_REMOVED\nBefore proposing a fix, please analyze the situation and plan your approach within\n<repair strategy> tags:\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "project": "java-bitpay-client",
    "libraryName": "bitcoinj-core",
    "libraryGroupID": "org.bitcoinj",
    "newVersion": "0.17",
    "previousVersion": "0.16.3"
}