{
    "absolute_path_to_file_in_container": "/lithium/src/main/java/com/wire/lithium/Server.java",
    "errors": [
        {
            "line_number": 24,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[24,40] package com.fasterxml.jackson.jaxrs.json does not exist",
            "additional_info": "",
            "file_name": "Server.java",
            "uid": "24f25962-5475-55e3-b9a2-558bbbbf27bf"
        },
        {
            "line_number": 47,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[47,21] package io.dropwizard does not exist",
            "additional_info": "",
            "file_name": "Server.java",
            "uid": "1580e381-2b8e-56eb-b260-4d0609f9810e"
        },
        {
            "line_number": 52,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[52,27] package io.dropwizard.setup does not exist",
            "additional_info": "",
            "file_name": "Server.java",
            "uid": "0e5a5f93-091a-5df1-ae7f-55be62c3d776"
        },
        {
            "line_number": 53,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[53,27] package io.dropwizard.setup does not exist",
            "additional_info": "",
            "file_name": "Server.java",
            "uid": "0e5a5f93-091a-5df1-ae7f-55be62c3d776"
        },
        {
            "line_number": 62,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[62,26] package javax.ws.rs.client does not exist",
            "additional_info": "",
            "file_name": "Server.java",
            "uid": "4d89aed4-1bb8-5725-9ee3-65f9b459ee2d"
        },
        {
            "line_number": 71,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[71,68] cannot find symbol",
            "additional_info": "  symbol: class Application",
            "file_name": "Server.java",
            "uid": "35c29a1f-6631-55af-b836-dea76ed4d6bc"
        },
        {
            "line_number": 74,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[74,15] cannot find symbol",
            "additional_info": "  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>",
            "file_name": "Server.java",
            "uid": "b003506e-fa9a-5a46-b6b7-c5bef8a09c39"
        },
        {
            "line_number": 75,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[75,15] cannot find symbol",
            "additional_info": "  symbol:   class Client\n  location: class com.wire.lithium.Server<Config>",
            "file_name": "Server.java",
            "uid": "224e9236-3215-5db6-a2a2-d4f41a908ff5"
        },
        {
            "line_number": 87,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[87,72] cannot find symbol",
            "additional_info": "  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>",
            "file_name": "Server.java",
            "uid": "b003506e-fa9a-5a46-b6b7-c5bef8a09c39"
        },
        {
            "line_number": 98,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[98,46] cannot find symbol",
            "additional_info": "  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>",
            "file_name": "Server.java",
            "uid": "b003506e-fa9a-5a46-b6b7-c5bef8a09c39"
        },
        {
            "line_number": 112,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[112,41] cannot find symbol",
            "additional_info": "  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>",
            "file_name": "Server.java",
            "uid": "b003506e-fa9a-5a46-b6b7-c5bef8a09c39"
        },
        {
            "line_number": 117,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[117,28] cannot find symbol",
            "additional_info": "  symbol:   class Bootstrap\n  location: class com.wire.lithium.Server<Config>",
            "file_name": "Server.java",
            "uid": "6cefe2ff-9432-52b1-97a4-c5b2bbac39ad"
        },
        {
            "line_number": 129,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[129,42] cannot find symbol",
            "additional_info": "  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>",
            "file_name": "Server.java",
            "uid": "b003506e-fa9a-5a46-b6b7-c5bef8a09c39"
        },
        {
            "line_number": 159,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[159,52] cannot find symbol",
            "additional_info": "  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>",
            "file_name": "Server.java",
            "uid": "b003506e-fa9a-5a46-b6b7-c5bef8a09c39"
        },
        {
            "line_number": 174,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[174,63] cannot find symbol",
            "additional_info": "  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>",
            "file_name": "Server.java",
            "uid": "b003506e-fa9a-5a46-b6b7-c5bef8a09c39"
        },
        {
            "line_number": 292,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[292,12] cannot find symbol",
            "additional_info": "  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>",
            "file_name": "Server.java",
            "uid": "b003506e-fa9a-5a46-b6b7-c5bef8a09c39"
        },
        {
            "line_number": 296,
            "message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[296,12] cannot find symbol",
            "additional_info": "  symbol:   class Client\n  location: class com.wire.lithium.Server<Config>",
            "file_name": "Server.java",
            "uid": "224e9236-3215-5db6-a2a2-d4f41a908ff5"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: dropwizard-core 2.1.5->4.0.0\n\nthe following client code fails: \n'''java\n//\n// Wire\n// Copyright (C) 2016 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\npackage com.wire.lithium;\n\nimport com.codahale.metrics.Gauge;\nimport com.codahale.metrics.health.HealthCheck;\nimport com.codahale.metrics.jmx.JmxReporter;\nimport com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\nimport com.wire.lithium.healthchecks.Alice2Bob;\nimport com.wire.lithium.healthchecks.CryptoHealthCheck;\nimport com.wire.lithium.healthchecks.Outbound;\nimport com.wire.lithium.healthchecks.StorageHealthCheck;\nimport com.wire.lithium.server.filters.AuthenticationFeature;\nimport com.wire.lithium.server.monitoring.RequestMdcFactoryFilter;\nimport com.wire.lithium.server.monitoring.StatusResource;\nimport com.wire.lithium.server.monitoring.VersionResource;\nimport com.wire.lithium.server.resources.BotsResource;\nimport com.wire.lithium.server.resources.MessageResource;\nimport com.wire.lithium.server.tasks.AvailablePrekeysTask;\nimport com.wire.lithium.server.tasks.ConversationTask;\nimport com.wire.xenon.Const;\nimport com.wire.xenon.MessageHandlerBase;\nimport com.wire.xenon.crypto.CryptoDatabase;\nimport com.wire.xenon.crypto.CryptoFile;\nimport com.wire.xenon.crypto.storage.JdbiStorage;\nimport com.wire.xenon.factories.CryptoFactory;\nimport com.wire.xenon.factories.StorageFactory;\nimport com.wire.xenon.state.FileState;\nimport com.wire.xenon.state.JdbiState;\nimport com.wire.xenon.tools.Logger;\nimport io.dropwizard.Application;\nimport io.dropwizard.client.JerseyClientBuilder;\nimport io.dropwizard.configuration.EnvironmentVariableSubstitutor;\nimport io.dropwizard.configuration.SubstitutingSourceProvider;\nimport io.dropwizard.servlets.tasks.Task;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\nimport io.federecio.dropwizard.swagger.SwaggerBundle;\nimport io.federecio.dropwizard.swagger.SwaggerBundleConfiguration;\nimport org.flywaydb.core.Flyway;\nimport org.glassfish.jersey.media.multipart.MultiPartFeature;\nimport org.jdbi.v3.core.Jdbi;\nimport org.jdbi.v3.sqlobject.SqlObjectPlugin;\n\nimport javax.annotation.Nullable;\nimport javax.ws.rs.client.Client;\nimport java.util.SortedMap;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Entry point for your Application\n *\n * @param <Config> Dropwizard configuration\n */\npublic abstract class Server<Config extends Configuration> extends Application<Config> {\n    protected ClientRepo repo;\n    protected Config config;\n    protected Environment environment;\n    protected Client client;\n    protected MessageHandlerBase messageHandler;\n    protected Jdbi jdbi;\n\n    /**\n     * This method is called once by the sdk in order to create the main message handler\n     *\n     * @param config Configuration object (yaml)\n     * @param env    Environment object\n     * @return Instance of your class that implements {@link MessageHandlerBase}\n     * @throws Exception allowed to throw exception\n     */\n    protected abstract MessageHandlerBase createHandler(Config config, Environment env) throws Exception;\n\n    /**\n     * Override this method to put your custom initialization\n     * NOTE: MessageHandler is not yet set when this method is invoked!\n     *\n     * @param config Configuration object (yaml)\n     * @param env    Environment object\n     * @throws Exception allowed to throw exception\n     */\n    @SuppressWarnings(\"RedundantThrows\") // this method can be overridden\n    protected void initialize(Config config, Environment env) throws Exception {\n\n    }\n\n    /**\n     * Override this method in case you need to add custom Resource and/or Task\n     * {@link #addResource(Object)}\n     * and {@link #addTask(io.dropwizard.servlets.tasks.Task)}\n     *\n     * @param config Configuration object (yaml)\n     * @param env    Environment object\n     * @throws Exception allowed to throw exception\n     */\n    @SuppressWarnings(\"RedundantThrows\") // this method can be overridden\n    protected void onRun(Config config, Environment env) throws Exception {\n\n    }\n\n    @Override\n    public void initialize(Bootstrap<Config> bootstrap) {\n        bootstrap.setConfigurationSourceProvider(new SubstitutingSourceProvider(\n                bootstrap.getConfigurationSourceProvider(), new EnvironmentVariableSubstitutor(false)));\n        bootstrap.addBundle(new SwaggerBundle<>() {\n            @Override\n            protected SwaggerBundleConfiguration getSwaggerBundleConfiguration(Config configuration) {\n                return configuration.swagger;\n            }\n        });\n    }\n\n    @Override\n    public void run(final Config config, Environment env) throws Exception {\n        this.config = config;\n        this.environment = env;\n\n        System.setProperty(Const.WIRE_BOTS_SDK_TOKEN, config.token);\n        System.setProperty(Const.WIRE_BOTS_SDK_API, config.apiHost);\n\n        setupDatabase(config.database);\n\n        jdbi = buildJdbi(config.database, env);\n\n        client = createHttpClient(config, env);\n\n        repo = createClientRepo();\n\n        initialize(config, env);\n\n        messageHandler = createHandler(config, env);\n\n        addResources();\n\n        initTelemetry();\n\n        if (config.healthchecks) {\n            runHealthChecks();\n        }\n\n        onRun(config, env);\n    }\n\n    private Client createHttpClient(Config config, Environment env) {\n        return new JerseyClientBuilder(env)\n                .using(config.getJerseyClient())\n                .withProvider(MultiPartFeature.class)\n                .withProvider(JacksonJsonProvider.class)\n                .build(getName());\n    }\n\n    protected ClientRepo createClientRepo() {\n        StorageFactory storageFactory = getStorageFactory();\n        CryptoFactory cryptoFactory = getCryptoFactory();\n        return new ClientRepo(getClient(), cryptoFactory, storageFactory);\n    }\n\n    @Nullable\n    protected Jdbi buildJdbi(Configuration.Database database, Environment env) {\n        if (database.getDriverClass().equalsIgnoreCase(\"fs\"))\n            return null;\n\n        return Jdbi\n                .create(database.build(env.metrics(), getName()))\n                .installPlugin(new SqlObjectPlugin());\n    }\n\n    protected void setupDatabase(Configuration.Database database) {\n        if (!database.getDriverClass().equalsIgnoreCase(\"fs\")) {\n            Flyway flyway = Flyway\n                    .configure()\n                    .dataSource(database.getUrl(), database.getUser(), database.getPassword())\n                    .baselineOnMigrate(database.baseline)\n                    .load();\n            flyway.migrate();\n        }\n    }\n\n    public StorageFactory getStorageFactory() {\n        if (config.database.getDriverClass().equalsIgnoreCase(\"fs\")) {\n            return botId -> new FileState(config.database.getUrl(), botId);\n        }\n\n        return botId -> new JdbiState(botId, getJdbi());\n    }\n\n    public CryptoFactory getCryptoFactory() {\n        if (config.database.getDriverClass().equalsIgnoreCase(\"fs\")) {\n            return (botId) -> new CryptoFile(config.database.getUrl(), botId);\n        }\n\n        return (botId) -> new CryptoDatabase(botId, new JdbiStorage(getJdbi()));\n    }\n\n    private void addResources() {\n        /* --- Wire Common --- */\n        addResource(new VersionResource()); // add version endpoint\n        addResource(new StatusResource()); // empty status for k8s\n        addResource(new RequestMdcFactoryFilter()); // MDC data\n        /* //- Wire Common --- */\n\n        botResource();\n        messageResource();\n\n        addTask(new ConversationTask(getRepo()));\n        addTask(new AvailablePrekeysTask(getRepo()));\n    }\n\n    protected void messageResource() {\n        addResource(new MessageResource(messageHandler, getRepo()));\n    }\n\n    protected void botResource() {\n        StorageFactory storageFactory = getStorageFactory();\n        CryptoFactory cryptoFactory = getCryptoFactory();\n\n        addResource(new BotsResource(messageHandler, storageFactory, cryptoFactory));\n    }\n\n    protected void addTask(Task task) {\n        environment.admin().addTask(task);\n    }\n\n    protected void addResource(Object component) {\n        environment.jersey().register(component);\n    }\n\n    private void initTelemetry() {\n        /* --- Wire Common --- */\n        environment.jersey().register(new RequestMdcFactoryFilter());\n        /* //- Wire Common --- */\n\n        final CryptoFactory cryptoFactory = getCryptoFactory();\n        final StorageFactory storageFactory = getStorageFactory();\n\n        registerFeatures();\n\n        environment.healthChecks().register(\"Storage\", new StorageHealthCheck(storageFactory));\n        environment.healthChecks().register(\"Crypto\", new CryptoHealthCheck(cryptoFactory));\n        environment.healthChecks().register(\"Alice2Bob\", new Alice2Bob(cryptoFactory));\n        environment.healthChecks().register(\"Outbound\", new Outbound(getClient()));\n\n        environment.metrics().register(\"logger.errors\", (Gauge<Integer>) Logger::getErrorCount);\n        environment.metrics().register(\"logger.warnings\", (Gauge<Integer>) Logger::getWarningCount);\n\n        JmxReporter jmxReporter = JmxReporter.forRegistry(environment.metrics())\n                .convertRatesTo(TimeUnit.SECONDS)\n                .convertDurationsTo(TimeUnit.MILLISECONDS)\n                .build();\n        jmxReporter.start();\n    }\n\n    private void runHealthChecks() {\n        Logger.info(\"Running health checks...\");\n        final SortedMap<String, HealthCheck.Result> results = environment.healthChecks().runHealthChecks();\n        for (String name : results.keySet()) {\n            final HealthCheck.Result result = results.get(name);\n            if (!result.isHealthy()) {\n                Logger.error(\"%s failed with: %s\", name, result.getMessage());\n                throw new RuntimeException(result.getError());\n            }\n        }\n    }\n\n    protected void registerFeatures() {\n        this.environment.jersey().register(AuthenticationFeature.class);\n    }\n\n    public ClientRepo getRepo() {\n        return repo;\n    }\n\n    public Config getConfig() {\n        return config;\n    }\n\n    public Environment getEnvironment() {\n        return environment;\n    }\n\n    public Client getClient() {\n        return client;\n    }\n\n    public Jdbi getJdbi() {\n        return jdbi;\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\nimport io.dropwizard.Application;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\nimport javax.ws.rs.client.Client;\npublic abstract class Server<Config extends Configuration> extends Application<Config> {\n    protected Environment environment;\n    protected Client client;\n    protected abstract MessageHandlerBase createHandler(Config config, Environment env) throws Exception;\n    protected void initialize(Config config, Environment env) throws Exception {\n    protected void onRun(Config config, Environment env) throws Exception {\n    public void initialize(Bootstrap<Config> bootstrap) {\n    public void run(final Config config, Environment env) throws Exception {\n    private Client createHttpClient(Config config, Environment env) {\n    protected Jdbi buildJdbi(Configuration.Database database, Environment env) {\n    public Environment getEnvironment() {\n    public Client getClient() {\nwith the following error message:\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[24,40] package com.fasterxml.jackson.jaxrs.json does not exist\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[47,21] package io.dropwizard does not exist\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[52,27] package io.dropwizard.setup does not exist\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[53,27] package io.dropwizard.setup does not exist\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[62,26] package javax.ws.rs.client does not exist\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[71,68] cannot find symbol  symbol: class Application\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[74,15] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[75,15] cannot find symbol  symbol:   class Client\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[87,72] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[98,46] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[112,41] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[117,28] cannot find symbol  symbol:   class Bootstrap\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[129,42] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[159,52] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[174,63] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[292,12] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[296,12] cannot find symbol  symbol:   class Client\n  location: class com.wire.lithium.Server<Config>\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\nio.dropwizard.Configuration | DELETION | TYPE_REMOVED\nio.dropwizard.Application | DELETION | TYPE_REMOVED\nio.dropwizard.setup.HealthCheckConfiguration | DELETION | TYPE_REMOVED\nio.dropwizard.setup.Bootstrap | DELETION | TYPE_REMOVED\nio.dropwizard.cli.ConfiguredCommand | DELETION | TYPE_REMOVED\nio.dropwizard.ConfiguredBundle | DELETION | TYPE_REMOVED\nio.dropwizard.setup.Environment | DELETION | TYPE_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\nimport io.dropwizard.Application;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\nimport javax.ws.rs.client.Client;\npublic abstract class Server<Config extends Configuration> extends Application<Config> {\n    protected Environment environment;\n    protected Client client;\n    protected abstract MessageHandlerBase createHandler(Config config, Environment env) throws Exception;\n    protected void initialize(Config config, Environment env) throws Exception {\n    protected void onRun(Config config, Environment env) throws Exception {\n    public void initialize(Bootstrap<Config> bootstrap) {\n    public void run(final Config config, Environment env) throws Exception {\n    private Client createHttpClient(Config config, Environment env) {\n    protected Jdbi buildJdbi(Configuration.Database database, Environment env) {\n    public Environment getEnvironment() {\n    public Client getClient() {",
    "error_message": "[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[24,40] package com.fasterxml.jackson.jaxrs.json does not exist\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[47,21] package io.dropwizard does not exist\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[52,27] package io.dropwizard.setup does not exist\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[53,27] package io.dropwizard.setup does not exist\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[62,26] package javax.ws.rs.client does not exist\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[71,68] cannot find symbol  symbol: class Application\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[74,15] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[75,15] cannot find symbol  symbol:   class Client\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[87,72] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[98,46] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[112,41] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[117,28] cannot find symbol  symbol:   class Bootstrap\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[129,42] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[159,52] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[174,63] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[292,12] cannot find symbol  symbol:   class Environment\n  location: class com.wire.lithium.Server<Config>\n[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[296,12] cannot find symbol  symbol:   class Client\n  location: class com.wire.lithium.Server<Config>",
    "api_diff": "Format: element | nature | kind\nio.dropwizard.Configuration | DELETION | TYPE_REMOVED\nio.dropwizard.Application | DELETION | TYPE_REMOVED\nio.dropwizard.setup.HealthCheckConfiguration | DELETION | TYPE_REMOVED\nio.dropwizard.setup.Bootstrap | DELETION | TYPE_REMOVED\nio.dropwizard.cli.ConfiguredCommand | DELETION | TYPE_REMOVED\nio.dropwizard.ConfiguredBundle | DELETION | TYPE_REMOVED\nio.dropwizard.setup.Environment | DELETION | TYPE_REMOVED",
    "original_code": "//\n// Wire\n// Copyright (C) 2016 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\npackage com.wire.lithium;\n\nimport com.codahale.metrics.Gauge;\nimport com.codahale.metrics.health.HealthCheck;\nimport com.codahale.metrics.jmx.JmxReporter;\nimport com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\nimport com.wire.lithium.healthchecks.Alice2Bob;\nimport com.wire.lithium.healthchecks.CryptoHealthCheck;\nimport com.wire.lithium.healthchecks.Outbound;\nimport com.wire.lithium.healthchecks.StorageHealthCheck;\nimport com.wire.lithium.server.filters.AuthenticationFeature;\nimport com.wire.lithium.server.monitoring.RequestMdcFactoryFilter;\nimport com.wire.lithium.server.monitoring.StatusResource;\nimport com.wire.lithium.server.monitoring.VersionResource;\nimport com.wire.lithium.server.resources.BotsResource;\nimport com.wire.lithium.server.resources.MessageResource;\nimport com.wire.lithium.server.tasks.AvailablePrekeysTask;\nimport com.wire.lithium.server.tasks.ConversationTask;\nimport com.wire.xenon.Const;\nimport com.wire.xenon.MessageHandlerBase;\nimport com.wire.xenon.crypto.CryptoDatabase;\nimport com.wire.xenon.crypto.CryptoFile;\nimport com.wire.xenon.crypto.storage.JdbiStorage;\nimport com.wire.xenon.factories.CryptoFactory;\nimport com.wire.xenon.factories.StorageFactory;\nimport com.wire.xenon.state.FileState;\nimport com.wire.xenon.state.JdbiState;\nimport com.wire.xenon.tools.Logger;\nimport io.dropwizard.Application;\nimport io.dropwizard.client.JerseyClientBuilder;\nimport io.dropwizard.configuration.EnvironmentVariableSubstitutor;\nimport io.dropwizard.configuration.SubstitutingSourceProvider;\nimport io.dropwizard.servlets.tasks.Task;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\nimport io.federecio.dropwizard.swagger.SwaggerBundle;\nimport io.federecio.dropwizard.swagger.SwaggerBundleConfiguration;\nimport org.flywaydb.core.Flyway;\nimport org.glassfish.jersey.media.multipart.MultiPartFeature;\nimport org.jdbi.v3.core.Jdbi;\nimport org.jdbi.v3.sqlobject.SqlObjectPlugin;\n\nimport javax.annotation.Nullable;\nimport javax.ws.rs.client.Client;\nimport java.util.SortedMap;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Entry point for your Application\n *\n * @param <Config> Dropwizard configuration\n */\npublic abstract class Server<Config extends Configuration> extends Application<Config> {\n    protected ClientRepo repo;\n    protected Config config;\n    protected Environment environment;\n    protected Client client;\n    protected MessageHandlerBase messageHandler;\n    protected Jdbi jdbi;\n\n    /**\n     * This method is called once by the sdk in order to create the main message handler\n     *\n     * @param config Configuration object (yaml)\n     * @param env    Environment object\n     * @return Instance of your class that implements {@link MessageHandlerBase}\n     * @throws Exception allowed to throw exception\n     */\n    protected abstract MessageHandlerBase createHandler(Config config, Environment env) throws Exception;\n\n    /**\n     * Override this method to put your custom initialization\n     * NOTE: MessageHandler is not yet set when this method is invoked!\n     *\n     * @param config Configuration object (yaml)\n     * @param env    Environment object\n     * @throws Exception allowed to throw exception\n     */\n    @SuppressWarnings(\"RedundantThrows\") // this method can be overridden\n    protected void initialize(Config config, Environment env) throws Exception {\n\n    }\n\n    /**\n     * Override this method in case you need to add custom Resource and/or Task\n     * {@link #addResource(Object)}\n     * and {@link #addTask(io.dropwizard.servlets.tasks.Task)}\n     *\n     * @param config Configuration object (yaml)\n     * @param env    Environment object\n     * @throws Exception allowed to throw exception\n     */\n    @SuppressWarnings(\"RedundantThrows\") // this method can be overridden\n    protected void onRun(Config config, Environment env) throws Exception {\n\n    }\n\n    @Override\n    public void initialize(Bootstrap<Config> bootstrap) {\n        bootstrap.setConfigurationSourceProvider(new SubstitutingSourceProvider(\n                bootstrap.getConfigurationSourceProvider(), new EnvironmentVariableSubstitutor(false)));\n        bootstrap.addBundle(new SwaggerBundle<>() {\n            @Override\n            protected SwaggerBundleConfiguration getSwaggerBundleConfiguration(Config configuration) {\n                return configuration.swagger;\n            }\n        });\n    }\n\n    @Override\n    public void run(final Config config, Environment env) throws Exception {\n        this.config = config;\n        this.environment = env;\n\n        System.setProperty(Const.WIRE_BOTS_SDK_TOKEN, config.token);\n        System.setProperty(Const.WIRE_BOTS_SDK_API, config.apiHost);\n\n        setupDatabase(config.database);\n\n        jdbi = buildJdbi(config.database, env);\n\n        client = createHttpClient(config, env);\n\n        repo = createClientRepo();\n\n        initialize(config, env);\n\n        messageHandler = createHandler(config, env);\n\n        addResources();\n\n        initTelemetry();\n\n        if (config.healthchecks) {\n            runHealthChecks();\n        }\n\n        onRun(config, env);\n    }\n\n    private Client createHttpClient(Config config, Environment env) {\n        return new JerseyClientBuilder(env)\n                .using(config.getJerseyClient())\n                .withProvider(MultiPartFeature.class)\n                .withProvider(JacksonJsonProvider.class)\n                .build(getName());\n    }\n\n    protected ClientRepo createClientRepo() {\n        StorageFactory storageFactory = getStorageFactory();\n        CryptoFactory cryptoFactory = getCryptoFactory();\n        return new ClientRepo(getClient(), cryptoFactory, storageFactory);\n    }\n\n    @Nullable\n    protected Jdbi buildJdbi(Configuration.Database database, Environment env) {\n        if (database.getDriverClass().equalsIgnoreCase(\"fs\"))\n            return null;\n\n        return Jdbi\n                .create(database.build(env.metrics(), getName()))\n                .installPlugin(new SqlObjectPlugin());\n    }\n\n    protected void setupDatabase(Configuration.Database database) {\n        if (!database.getDriverClass().equalsIgnoreCase(\"fs\")) {\n            Flyway flyway = Flyway\n                    .configure()\n                    .dataSource(database.getUrl(), database.getUser(), database.getPassword())\n                    .baselineOnMigrate(database.baseline)\n                    .load();\n            flyway.migrate();\n        }\n    }\n\n    public StorageFactory getStorageFactory() {\n        if (config.database.getDriverClass().equalsIgnoreCase(\"fs\")) {\n            return botId -> new FileState(config.database.getUrl(), botId);\n        }\n\n        return botId -> new JdbiState(botId, getJdbi());\n    }\n\n    public CryptoFactory getCryptoFactory() {\n        if (config.database.getDriverClass().equalsIgnoreCase(\"fs\")) {\n            return (botId) -> new CryptoFile(config.database.getUrl(), botId);\n        }\n\n        return (botId) -> new CryptoDatabase(botId, new JdbiStorage(getJdbi()));\n    }\n\n    private void addResources() {\n        /* --- Wire Common --- */\n        addResource(new VersionResource()); // add version endpoint\n        addResource(new StatusResource()); // empty status for k8s\n        addResource(new RequestMdcFactoryFilter()); // MDC data\n        /* //- Wire Common --- */\n\n        botResource();\n        messageResource();\n\n        addTask(new ConversationTask(getRepo()));\n        addTask(new AvailablePrekeysTask(getRepo()));\n    }\n\n    protected void messageResource() {\n        addResource(new MessageResource(messageHandler, getRepo()));\n    }\n\n    protected void botResource() {\n        StorageFactory storageFactory = getStorageFactory();\n        CryptoFactory cryptoFactory = getCryptoFactory();\n\n        addResource(new BotsResource(messageHandler, storageFactory, cryptoFactory));\n    }\n\n    protected void addTask(Task task) {\n        environment.admin().addTask(task);\n    }\n\n    protected void addResource(Object component) {\n        environment.jersey().register(component);\n    }\n\n    private void initTelemetry() {\n        /* --- Wire Common --- */\n        environment.jersey().register(new RequestMdcFactoryFilter());\n        /* //- Wire Common --- */\n\n        final CryptoFactory cryptoFactory = getCryptoFactory();\n        final StorageFactory storageFactory = getStorageFactory();\n\n        registerFeatures();\n\n        environment.healthChecks().register(\"Storage\", new StorageHealthCheck(storageFactory));\n        environment.healthChecks().register(\"Crypto\", new CryptoHealthCheck(cryptoFactory));\n        environment.healthChecks().register(\"Alice2Bob\", new Alice2Bob(cryptoFactory));\n        environment.healthChecks().register(\"Outbound\", new Outbound(getClient()));\n\n        environment.metrics().register(\"logger.errors\", (Gauge<Integer>) Logger::getErrorCount);\n        environment.metrics().register(\"logger.warnings\", (Gauge<Integer>) Logger::getWarningCount);\n\n        JmxReporter jmxReporter = JmxReporter.forRegistry(environment.metrics())\n                .convertRatesTo(TimeUnit.SECONDS)\n                .convertDurationsTo(TimeUnit.MILLISECONDS)\n                .build();\n        jmxReporter.start();\n    }\n\n    private void runHealthChecks() {\n        Logger.info(\"Running health checks...\");\n        final SortedMap<String, HealthCheck.Result> results = environment.healthChecks().runHealthChecks();\n        for (String name : results.keySet()) {\n            final HealthCheck.Result result = results.get(name);\n            if (!result.isHealthy()) {\n                Logger.error(\"%s failed with: %s\", name, result.getMessage());\n                throw new RuntimeException(result.getError());\n            }\n        }\n    }\n\n    protected void registerFeatures() {\n        this.environment.jersey().register(AuthenticationFeature.class);\n    }\n\n    public ClientRepo getRepo() {\n        return repo;\n    }\n\n    public Config getConfig() {\n        return config;\n    }\n\n    public Environment getEnvironment() {\n        return environment;\n    }\n\n    public Client getClient() {\n        return client;\n    }\n\n    public Jdbi getJdbi() {\n        return jdbi;\n    }\n}\n",
    "project": "lithium",
    "libraryName": "dropwizard-core",
    "libraryGroupID": "io.dropwizard",
    "newVersion": "4.0.0",
    "previousVersion": "2.1.5",
    "breakingCommit": "686ea4e18114ac180e35ca1c07e1f2e6dfbffbe0"
}