{
    "relative_path": "polyglot-maven/polyglot-yaml/src/main/java/org/sonatype/maven/polyglot/yaml/YamlModelReader.java",
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nthe following client code fails: \n'''java\n/**\n * Copyright (c) 2012 to original author or authors\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n */\npackage org.sonatype.maven.polyglot.yaml;\n\nimport org.apache.maven.model.Model;\nimport org.apache.maven.model.io.ModelParseException;\nimport org.apache.maven.model.io.ModelReader;\nimport org.codehaus.plexus.component.annotations.Component;\nimport org.sonatype.maven.polyglot.io.ModelReaderSupport;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.util.Map;\n\n/**\n * YAML model reader.\n *\n * @author jvanzyl\n * @author bentmann\n *\n * @since 0.7\n */\n@Component(role = ModelReader.class, hint = \"yaml\")\npublic class YamlModelReader extends ModelReaderSupport {\n  private final Yaml yaml;\n\n  public YamlModelReader() {\n    ModelConstructor constructor = new ModelConstructor();\n    yaml = new Yaml(constructor, new Representer(), new DumperOptions(), new ModelResolver());\n  }\n\n  public Model read(Reader input, Map<String, ?> options) throws IOException, ModelParseException {\n    if (input == null) {\n      throw new IllegalArgumentException(\"YAML Reader is null.\");\n    }\n\n    return (Model) yaml.load(input);\n  }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n\nwith the following error message:\n[ERROR] /polyglot-maven/polyglot-yaml/src/main/java/org/sonatype/maven/polyglot/yaml/YamlModelReader.java:[37,34] The constructor Representer() is undefined\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.yaml.snakeyaml.introspector.Property | ADDITION | METHOD_ABSTRACT_ADDED_TO_CLASS\norg.yaml.snakeyaml.introspector.PropertyUtils.getProperties | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.yaml.snakeyaml.introspector.PropertyUtils.getProperty | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.yaml.snakeyaml.representer.Representer.getProperties | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.yaml.snakeyaml.introspector.PropertyUtils.getPropertiesMap | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.yaml.snakeyaml.introspector.PropertyUtils.createPropertySet | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.yaml.snakeyaml.representer.Representer.<init> | DELETION | CONSTRUCTOR_REMOVED\nBefore proposing a fix, please analyze the situation and plan your approach within\n<repair strategy> tags:\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "project": "polyglot-maven",
    "libraryName": "snakeyaml",
    "libraryGroupID": "org.yaml",
    "newVersion": "2.0",
    "previousVersion": "1.17"
}