{
    "absolute_path_to_file_in_container": "/java-pubsub-group-kafka-connector/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java",
    "errors": [
        {
            "line_number": 22,
            "message": "[ERROR] /java-pubsub-group-kafka-connector/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java:[22,35] cannot find symbol",
            "additional_info": "  symbol:   class PublishMetadata\n  location: package com.google.cloud.pubsublite",
            "file_name": "PubSubLiteSinkTask.java",
            "uid": "c730a59d-5e86-58d3-bae2-06cffe20ba32"
        },
        {
            "line_number": 43,
            "message": "[ERROR] /java-pubsub-group-kafka-connector/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java:[43,31] cannot find symbol",
            "additional_info": "  symbol:   class PublishMetadata\n  location: class com.google.pubsublite.kafka.sink.PubSubLiteSinkTask",
            "file_name": "PubSubLiteSinkTask.java",
            "uid": "c8da0f83-dd07-59ae-9f2e-4734f42abad3"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: google-cloud-pubsublite 0.6.0->0.18.0\n\nthe following client code fails: \n'''java\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;\n\nimport com.google.api.core.ApiService.State;\nimport com.google.cloud.pubsublite.Message;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.common.collect.ImmutableListMultimap;\nimport com.google.protobuf.ByteString;\nimport com.google.protobuf.util.Timestamps;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport javax.annotation.Nullable;\nimport org.apache.kafka.clients.consumer.OffsetAndMetadata;\nimport org.apache.kafka.common.TopicPartition;\nimport org.apache.kafka.common.utils.AppInfoParser;\nimport org.apache.kafka.connect.header.ConnectHeaders;\nimport org.apache.kafka.connect.header.Header;\nimport org.apache.kafka.connect.sink.SinkRecord;\nimport org.apache.kafka.connect.sink.SinkTask;\n\npublic class PubSubLiteSinkTask extends SinkTask {\n\n  private final PublisherFactory factory;\n  private @Nullable Publisher<PublishMetadata> publisher;\n\n  @VisibleForTesting\n  PubSubLiteSinkTask(PublisherFactory factory) {\n    this.factory = factory;\n  }\n\n  public PubSubLiteSinkTask() {\n    this(new PublisherFactoryImpl());\n  }\n\n  @Override\n  public String version() {\n    return AppInfoParser.getVersion();\n  }\n\n  @Override\n  public void start(Map<String, String> map) {\n    if (publisher != null) {\n      throw new IllegalStateException(\"Called start when publisher already exists.\");\n    }\n    publisher = factory.newPublisher(map);\n    publisher.startAsync().awaitRunning();\n  }\n\n  @Override\n  public void put(Collection<SinkRecord> collection) {\n    if (publisher.state() != State.RUNNING) {\n      if (publisher.state() == State.FAILED) {\n        throw new IllegalStateException(\"Publisher has failed.\", publisher.failureCause());\n      } else {\n        throw new IllegalStateException(\"Publisher not currently running.\");\n      }\n    }\n    for (SinkRecord record : collection) {\n      Message.Builder message = Message.builder();\n      if (record.key() != null) {\n        message.setKey(encodeToBytes(record.keySchema(), record.key()));\n      }\n      if (record.value() != null) {\n        message.setData(encodeToBytes(record.valueSchema(), record.value()));\n      }\n      ImmutableListMultimap.Builder<String, ByteString> attributes =\n          ImmutableListMultimap.builder();\n      getRecordHeaders(record)\n          .forEach(\n              header ->\n                  attributes.put(\n                      header.key(), Schemas.encodeToBytes(header.schema(), header.value())));\n      if (record.topic() != null) {\n        attributes.put(Constants.KAFKA_TOPIC_HEADER, ByteString.copyFromUtf8(record.topic()));\n      }\n      if (record.kafkaPartition() != null) {\n        attributes.put(\n            Constants.KAFKA_PARTITION_HEADER,\n            ByteString.copyFromUtf8(record.kafkaPartition().toString()));\n        attributes.put(\n            Constants.KAFKA_OFFSET_HEADER,\n            ByteString.copyFromUtf8(Long.toString(record.kafkaOffset())));\n      }\n      if (record.timestamp() != null) {\n        attributes.put(\n            Constants.KAFKA_EVENT_TIME_TYPE_HEADER,\n            ByteString.copyFromUtf8(record.timestampType().name));\n        message.setEventTime(Timestamps.fromMillis(record.timestamp()));\n      }\n      message.setAttributes(attributes.build());\n      publisher.publish(message.build());\n    }\n  }\n\n  private Iterable<? extends Header> getRecordHeaders(SinkRecord record) {\n    ConnectHeaders headers = new ConnectHeaders();\n    if (record.headers() != null) {\n      for (Header header : record.headers()) {\n        headers.add(header);\n      }\n    }\n    return headers;\n  }\n\n  @Override\n  public void flush(Map<TopicPartition, OffsetAndMetadata> currentOffsets) {\n    try {\n      if (publisher != null) {\n        publisher.flush();\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  @Override\n  public void stop() {\n    if (publisher == null) {\n      throw new IllegalStateException(\"Called stop when publisher doesn't exist.\");\n    }\n    try {\n      publisher.flush();\n      publisher.stopAsync().awaitTerminated();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    } finally {\n      publisher = null;\n    }\n  }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport com.google.cloud.pubsublite.PublishMetadata;\n  private @Nullable Publisher<PublishMetadata> publisher;\nwith the following error message:\n[ERROR] /java-pubsub-group-kafka-connector/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java:[22,35] cannot find symbol  symbol:   class PublishMetadata\n  location: package com.google.cloud.pubsublite\n[ERROR] /java-pubsub-group-kafka-connector/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java:[43,31] cannot find symbol  symbol:   class PublishMetadata\n  location: class com.google.pubsublite.kafka.sink.PubSubLiteSinkTask\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\ncom.google.cloud.pubsublite.PublishMetadata | DELETION | TYPE_REMOVED\ncom.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder$Builder.build | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.google.cloud.pubsublite.TopicPath.location | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder$Builder.setContext | DELETION | METHOD_REMOVED\ncom.google.cloud.pubsublite.cloudpubsub.SubscriberSettings$Builder.build | MUTATION | METHOD_NOW_ABSTRACT\ncom.google.cloud.pubsublite.internal.Publisher | ADDITION | METHOD_ADDED_TO_INTERFACE\ncom.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder$Builder.build | MUTATION | METHOD_RETURN_TYPE_CHANGED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import com.google.cloud.pubsublite.PublishMetadata;\n  private @Nullable Publisher<PublishMetadata> publisher;",
    "error_message": "[ERROR] /java-pubsub-group-kafka-connector/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java:[22,35] cannot find symbol  symbol:   class PublishMetadata\n  location: package com.google.cloud.pubsublite\n[ERROR] /java-pubsub-group-kafka-connector/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java:[43,31] cannot find symbol  symbol:   class PublishMetadata\n  location: class com.google.pubsublite.kafka.sink.PubSubLiteSinkTask",
    "api_diff": "Format: element | nature | kind\ncom.google.cloud.pubsublite.PublishMetadata | DELETION | TYPE_REMOVED\ncom.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder$Builder.build | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.google.cloud.pubsublite.TopicPath.location | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder$Builder.setContext | DELETION | METHOD_REMOVED\ncom.google.cloud.pubsublite.cloudpubsub.SubscriberSettings$Builder.build | MUTATION | METHOD_NOW_ABSTRACT\ncom.google.cloud.pubsublite.internal.Publisher | ADDITION | METHOD_ADDED_TO_INTERFACE\ncom.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder$Builder.build | MUTATION | METHOD_RETURN_TYPE_CHANGED",
    "original_code": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;\n\nimport com.google.api.core.ApiService.State;\nimport com.google.cloud.pubsublite.Message;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.common.collect.ImmutableListMultimap;\nimport com.google.protobuf.ByteString;\nimport com.google.protobuf.util.Timestamps;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport javax.annotation.Nullable;\nimport org.apache.kafka.clients.consumer.OffsetAndMetadata;\nimport org.apache.kafka.common.TopicPartition;\nimport org.apache.kafka.common.utils.AppInfoParser;\nimport org.apache.kafka.connect.header.ConnectHeaders;\nimport org.apache.kafka.connect.header.Header;\nimport org.apache.kafka.connect.sink.SinkRecord;\nimport org.apache.kafka.connect.sink.SinkTask;\n\npublic class PubSubLiteSinkTask extends SinkTask {\n\n  private final PublisherFactory factory;\n  private @Nullable Publisher<PublishMetadata> publisher;\n\n  @VisibleForTesting\n  PubSubLiteSinkTask(PublisherFactory factory) {\n    this.factory = factory;\n  }\n\n  public PubSubLiteSinkTask() {\n    this(new PublisherFactoryImpl());\n  }\n\n  @Override\n  public String version() {\n    return AppInfoParser.getVersion();\n  }\n\n  @Override\n  public void start(Map<String, String> map) {\n    if (publisher != null) {\n      throw new IllegalStateException(\"Called start when publisher already exists.\");\n    }\n    publisher = factory.newPublisher(map);\n    publisher.startAsync().awaitRunning();\n  }\n\n  @Override\n  public void put(Collection<SinkRecord> collection) {\n    if (publisher.state() != State.RUNNING) {\n      if (publisher.state() == State.FAILED) {\n        throw new IllegalStateException(\"Publisher has failed.\", publisher.failureCause());\n      } else {\n        throw new IllegalStateException(\"Publisher not currently running.\");\n      }\n    }\n    for (SinkRecord record : collection) {\n      Message.Builder message = Message.builder();\n      if (record.key() != null) {\n        message.setKey(encodeToBytes(record.keySchema(), record.key()));\n      }\n      if (record.value() != null) {\n        message.setData(encodeToBytes(record.valueSchema(), record.value()));\n      }\n      ImmutableListMultimap.Builder<String, ByteString> attributes =\n          ImmutableListMultimap.builder();\n      getRecordHeaders(record)\n          .forEach(\n              header ->\n                  attributes.put(\n                      header.key(), Schemas.encodeToBytes(header.schema(), header.value())));\n      if (record.topic() != null) {\n        attributes.put(Constants.KAFKA_TOPIC_HEADER, ByteString.copyFromUtf8(record.topic()));\n      }\n      if (record.kafkaPartition() != null) {\n        attributes.put(\n            Constants.KAFKA_PARTITION_HEADER,\n            ByteString.copyFromUtf8(record.kafkaPartition().toString()));\n        attributes.put(\n            Constants.KAFKA_OFFSET_HEADER,\n            ByteString.copyFromUtf8(Long.toString(record.kafkaOffset())));\n      }\n      if (record.timestamp() != null) {\n        attributes.put(\n            Constants.KAFKA_EVENT_TIME_TYPE_HEADER,\n            ByteString.copyFromUtf8(record.timestampType().name));\n        message.setEventTime(Timestamps.fromMillis(record.timestamp()));\n      }\n      message.setAttributes(attributes.build());\n      publisher.publish(message.build());\n    }\n  }\n\n  private Iterable<? extends Header> getRecordHeaders(SinkRecord record) {\n    ConnectHeaders headers = new ConnectHeaders();\n    if (record.headers() != null) {\n      for (Header header : record.headers()) {\n        headers.add(header);\n      }\n    }\n    return headers;\n  }\n\n  @Override\n  public void flush(Map<TopicPartition, OffsetAndMetadata> currentOffsets) {\n    try {\n      if (publisher != null) {\n        publisher.flush();\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  @Override\n  public void stop() {\n    if (publisher == null) {\n      throw new IllegalStateException(\"Called stop when publisher doesn't exist.\");\n    }\n    try {\n      publisher.flush();\n      publisher.stopAsync().awaitTerminated();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    } finally {\n      publisher = null;\n    }\n  }\n}\n",
    "project": "java-pubsub-group-kafka-connector",
    "libraryName": "google-cloud-pubsublite",
    "libraryGroupID": "com.google.cloud",
    "newVersion": "0.18.0",
    "previousVersion": "0.6.0",
    "breakingCommit": "d54b56b91c11f21b97d4903143b04b7c1f10c255"
}