{
    "absolute_path_to_file_in_container": "/google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java",
    "errors": [
        {
            "line_number": 23,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java:[23,58] package com.google.api.services.cloudresourcemanager.model does not exist",
            "additional_info": "",
            "file_name": "ResourceManagerImpl.java",
            "uid": "545cb093-4ce2-5795-b2e8-0221fe37f0ad"
        },
        {
            "line_number": 24,
            "message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java:[24,58] package com.google.api.services.cloudresourcemanager.model does not exist",
            "additional_info": "",
            "file_name": "ResourceManagerImpl.java",
            "uid": "545cb093-4ce2-5795-b2e8-0221fe37f0ad"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: google-api-services-cloudresourcemanager v1-rev20220807-2.0.0->v3-rev20220807-2.0.0\n\nthe following client code fails: \n'''java\n/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.cloud.RetryHelper.runWithRetries;\nimport static com.google.common.base.Preconditions.checkArgument;\n\nimport com.google.api.gax.paging.Page;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.cloud.BaseService;\nimport com.google.cloud.PageImpl;\nimport com.google.cloud.PageImpl.NextPageFetcher;\nimport com.google.cloud.Policy;\nimport com.google.cloud.RetryHelper.RetryHelperException;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc;\nimport com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc.ListResult;\nimport com.google.common.base.Function;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Maps;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\nfinal class ResourceManagerImpl extends BaseService<ResourceManagerOptions>\n    implements ResourceManager {\n\n  private final ResourceManagerRpc resourceManagerRpc;\n\n  ResourceManagerImpl(ResourceManagerOptions options) {\n    super(options);\n    resourceManagerRpc = options.getResourceManagerRpcV1Beta1();\n  }\n\n  @Override\n  public Project create(final ProjectInfo project) {\n    try {\n      return Project.fromPb(\n          this,\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.create(project.toPb());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void delete(final String projectId) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() {\n              resourceManagerRpc.delete(projectId);\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Project get(final String projectId, ProjectGetOption... options) {\n    final Map<ResourceManagerRpc.Option, ?> optionsMap = optionMap(options);\n    try {\n      com.google.api.services.cloudresourcemanager.model.Project answer =\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.get(projectId, optionsMap);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock());\n      return answer == null ? null : Project.fromPb(this, answer);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class ProjectPageFetcher implements NextPageFetcher<Project> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    ProjectPageFetcher(\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<Project> getNextPage() {\n      return listProjects(serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<Project> list(ProjectListOption... options) {\n    return listProjects(getOptions(), optionMap(options));\n  }\n\n  private static Page<Project> listProjects(\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      Tuple<String, Iterable<com.google.api.services.cloudresourcemanager.model.Project>> result =\n          runWithRetries(\n              new Callable<\n                  Tuple<\n                      String,\n                      Iterable<com.google.api.services.cloudresourcemanager.model.Project>>>() {\n                @Override\n                public Tuple<\n                        String,\n                        Iterable<com.google.api.services.cloudresourcemanager.model.Project>>\n                    call() {\n                  return serviceOptions.getResourceManagerRpcV1Beta1().list(optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = result.x();\n      Iterable<Project> projects =\n          result.y() == null\n              ? ImmutableList.<Project>of()\n              : Iterables.transform(\n                  result.y(),\n                  new Function<\n                      com.google.api.services.cloudresourcemanager.model.Project, Project>() {\n                    @Override\n                    public Project apply(\n                        com.google.api.services.cloudresourcemanager.model.Project projectPb) {\n                      return new Project(\n                          serviceOptions.getService(),\n                          new ProjectInfo.BuilderImpl(ProjectInfo.fromPb(projectPb)));\n                    }\n                  });\n      return new PageImpl<>(\n          new ProjectPageFetcher(serviceOptions, cursor, optionsMap), cursor, projects);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Project replace(final ProjectInfo newProject) {\n    try {\n      return Project.fromPb(\n          this,\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.replace(newProject.toPb());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void undelete(final String projectId) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() {\n              resourceManagerRpc.undelete(projectId);\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Policy getPolicy(final String projectId) {\n    try {\n      com.google.api.services.cloudresourcemanager.model.Policy answer =\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Policy>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Policy call() {\n                  return resourceManagerRpc.getPolicy(projectId);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock());\n      return answer == null ? null : PolicyMarshaller.INSTANCE.fromPb(answer);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Policy replacePolicy(final String projectId, final Policy newPolicy) {\n    try {\n      return PolicyMarshaller.INSTANCE.fromPb(\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Policy>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Policy call() {\n                  return resourceManagerRpc.replacePolicy(\n                      projectId, PolicyMarshaller.INSTANCE.toPb(newPolicy));\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public List<Boolean> testPermissions(final String projectId, final List<String> permissions) {\n    try {\n      return runWithRetries(\n          new Callable<List<Boolean>>() {\n            @Override\n            public List<Boolean> call() {\n              return resourceManagerRpc.testPermissions(projectId, permissions);\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Map<String, Boolean> testOrgPermissions(\n      final String resource, final List<String> permissions) {\n    try {\n      return runWithRetries(\n          new Callable<Map<String, Boolean>>() {\n            @Override\n            public Map<String, Boolean> call() throws IOException {\n              return resourceManagerRpc.testOrgPermissions(resource, permissions);\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void clearOrgPolicy(final String resource, final OrgPolicyInfo orgPolicy) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() throws IOException {\n              resourceManagerRpc.clearOrgPolicy(resource, orgPolicy.toProtobuf());\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo getEffectiveOrgPolicy(final String resource, final String constraint) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.getEffectiveOrgPolicy(resource, constraint);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo getOrgPolicy(final String resource, final String constraint) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.getOrgPolicy(resource, constraint);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class ConstraintPageFetcher implements NextPageFetcher<ConstraintInfo> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final String resource;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    ConstraintPageFetcher(\n        String resource,\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.resource = resource;\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<ConstraintInfo> getNextPage() {\n      return listAvailableOrgPolicyConstraints(resource, serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<ConstraintInfo> listAvailableOrgPolicyConstraints(\n      String resource, ListOption... options) {\n    return listAvailableOrgPolicyConstraints(resource, getOptions(), optionMap(options));\n  }\n\n  private static Page<ConstraintInfo> listAvailableOrgPolicyConstraints(\n      final String resource,\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      final ResourceManagerRpc rpc = serviceOptions.getResourceManagerRpcV1Beta1();\n      ListResult<Constraint> constraintList =\n          runWithRetries(\n              new Callable<ListResult<Constraint>>() {\n                @Override\n                public ListResult<Constraint> call() throws IOException {\n                  return rpc.listAvailableOrgPolicyConstraints(resource, optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = constraintList.pageToken();\n      Iterable<ConstraintInfo> constraints =\n          constraintList.results() == null\n              ? ImmutableList.<ConstraintInfo>of()\n              : Iterables.transform(\n                  constraintList.results(), ConstraintInfo.FROM_PROTOBUF_FUNCTION);\n      return new PageImpl<>(\n          new ConstraintPageFetcher(resource, serviceOptions, cursor, optionsMap),\n          cursor,\n          constraints);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class OrgPolicyPageFetcher implements NextPageFetcher<OrgPolicyInfo> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final String resource;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    OrgPolicyPageFetcher(\n        String resource,\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.resource = resource;\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<OrgPolicyInfo> getNextPage() {\n      return listOrgPolicies(resource, serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<OrgPolicyInfo> listOrgPolicies(final String resource, ListOption... options) {\n    return listOrgPolicies(resource, getOptions(), optionMap(options));\n  }\n\n  private static PageImpl<OrgPolicyInfo> listOrgPolicies(\n      final String resource,\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      final ResourceManagerRpc rpc = serviceOptions.getResourceManagerRpcV1Beta1();\n      ListResult<OrgPolicy> orgPolicy =\n          runWithRetries(\n              new Callable<ListResult<OrgPolicy>>() {\n                @Override\n                public ListResult<OrgPolicy> call() throws IOException {\n                  return rpc.listOrgPolicies(resource, optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = orgPolicy.pageToken();\n      Iterable<OrgPolicyInfo> orgPolicies =\n          orgPolicy.results() == null\n              ? ImmutableList.<OrgPolicyInfo>of()\n              : Iterables.transform(orgPolicy.results(), OrgPolicyInfo.FROM_PROTOBUF_FUNCTION);\n      return new PageImpl<>(\n          new OrgPolicyPageFetcher(resource, serviceOptions, cursor, optionsMap),\n          cursor,\n          orgPolicies);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo replaceOrgPolicy(final String resource, final OrgPolicyInfo orgPolicy) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.replaceOrgPolicy(resource, orgPolicy.toProtobuf());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private Map<ResourceManagerRpc.Option, ?> optionMap(Option... options) {\n    Map<ResourceManagerRpc.Option, Object> temp = Maps.newEnumMap(ResourceManagerRpc.Option.class);\n    for (Option option : options) {\n      Object prev = temp.put(option.getRpcOption(), option.getValue());\n      checkArgument(prev == null, \"Duplicate option %s\", option);\n    }\n    return ImmutableMap.copyOf(temp);\n  }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nwith the following error message:\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java:[23,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java:[24,58] package com.google.api.services.cloudresourcemanager.model does not exist\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\ncom.google.api.services.cloudresourcemanager.model.ListPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Update | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ClearOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.UndeleteProjectRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$ListOrgPolicies | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$GetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.BooleanConstraint | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManagerScopes | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.RestoreDefault | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListOrgPoliciesRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$GetEffectiveOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Create | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$ListAvailableOrgPolicyConstraints | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Project | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$Create | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$Search | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListProjectsResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Operations$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Delete | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$GetEffectiveOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListOrgPoliciesResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$SetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$List | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ResourceId | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListConstraint | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$ClearOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$SetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Operations | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$TestIamPermissions | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$SetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$SetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$SetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManagerRequestInitializer | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.SetOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Builder | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$ClearOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.BooleanPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Binding | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.OrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$TestIamPermissions | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.GetOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Status | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Constraint | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$ListOrgPolicies | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManagerRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetEffectiveOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$ListAvailableOrgPolicyConstraints | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetAncestry | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$GetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ProjectCreationStatus | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$ListOrgPolicies | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Operation | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.GetEffectiveOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$Delete | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Policy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$ClearOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Undelete | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$ListAvailableOrgPolicyConstraints | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$GetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$List | DELETION | TYPE_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;",
    "error_message": "[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java:[23,58] package com.google.api.services.cloudresourcemanager.model does not exist\n[ERROR] /google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java:[24,58] package com.google.api.services.cloudresourcemanager.model does not exist",
    "api_diff": "Format: element | nature | kind\ncom.google.api.services.cloudresourcemanager.model.ListPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Update | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ClearOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.UndeleteProjectRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$ListOrgPolicies | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$GetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.BooleanConstraint | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManagerScopes | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.RestoreDefault | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListOrgPoliciesRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$GetEffectiveOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Create | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$ListAvailableOrgPolicyConstraints | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Project | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$Create | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$Search | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListProjectsResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Operations$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Delete | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$GetEffectiveOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListOrgPoliciesResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$SetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$List | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ResourceId | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListConstraint | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$ClearOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$SetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Operations | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$TestIamPermissions | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$SetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$SetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$SetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManagerRequestInitializer | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.SetOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Builder | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$ClearOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.BooleanPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Binding | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.OrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$TestIamPermissions | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.GetOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Status | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Constraint | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$ListOrgPolicies | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManagerRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetEffectiveOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$ListAvailableOrgPolicyConstraints | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$GetAncestry | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$GetOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ProjectCreationStatus | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsResponse | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$ListOrgPolicies | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Operation | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.GetEffectiveOrgPolicyRequest | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Get | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$Delete | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.model.Policy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$ClearOrgPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Projects$Undelete | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Folders$ListAvailableOrgPolicyConstraints | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Organizations$GetIamPolicy | DELETION | TYPE_REMOVED\ncom.google.api.services.cloudresourcemanager.CloudResourceManager$Liens$List | DELETION | TYPE_REMOVED",
    "original_code": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.cloud.RetryHelper.runWithRetries;\nimport static com.google.common.base.Preconditions.checkArgument;\n\nimport com.google.api.gax.paging.Page;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.cloud.BaseService;\nimport com.google.cloud.PageImpl;\nimport com.google.cloud.PageImpl.NextPageFetcher;\nimport com.google.cloud.Policy;\nimport com.google.cloud.RetryHelper.RetryHelperException;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc;\nimport com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc.ListResult;\nimport com.google.common.base.Function;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Maps;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\nfinal class ResourceManagerImpl extends BaseService<ResourceManagerOptions>\n    implements ResourceManager {\n\n  private final ResourceManagerRpc resourceManagerRpc;\n\n  ResourceManagerImpl(ResourceManagerOptions options) {\n    super(options);\n    resourceManagerRpc = options.getResourceManagerRpcV1Beta1();\n  }\n\n  @Override\n  public Project create(final ProjectInfo project) {\n    try {\n      return Project.fromPb(\n          this,\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.create(project.toPb());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void delete(final String projectId) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() {\n              resourceManagerRpc.delete(projectId);\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Project get(final String projectId, ProjectGetOption... options) {\n    final Map<ResourceManagerRpc.Option, ?> optionsMap = optionMap(options);\n    try {\n      com.google.api.services.cloudresourcemanager.model.Project answer =\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.get(projectId, optionsMap);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock());\n      return answer == null ? null : Project.fromPb(this, answer);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class ProjectPageFetcher implements NextPageFetcher<Project> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    ProjectPageFetcher(\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<Project> getNextPage() {\n      return listProjects(serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<Project> list(ProjectListOption... options) {\n    return listProjects(getOptions(), optionMap(options));\n  }\n\n  private static Page<Project> listProjects(\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      Tuple<String, Iterable<com.google.api.services.cloudresourcemanager.model.Project>> result =\n          runWithRetries(\n              new Callable<\n                  Tuple<\n                      String,\n                      Iterable<com.google.api.services.cloudresourcemanager.model.Project>>>() {\n                @Override\n                public Tuple<\n                        String,\n                        Iterable<com.google.api.services.cloudresourcemanager.model.Project>>\n                    call() {\n                  return serviceOptions.getResourceManagerRpcV1Beta1().list(optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = result.x();\n      Iterable<Project> projects =\n          result.y() == null\n              ? ImmutableList.<Project>of()\n              : Iterables.transform(\n                  result.y(),\n                  new Function<\n                      com.google.api.services.cloudresourcemanager.model.Project, Project>() {\n                    @Override\n                    public Project apply(\n                        com.google.api.services.cloudresourcemanager.model.Project projectPb) {\n                      return new Project(\n                          serviceOptions.getService(),\n                          new ProjectInfo.BuilderImpl(ProjectInfo.fromPb(projectPb)));\n                    }\n                  });\n      return new PageImpl<>(\n          new ProjectPageFetcher(serviceOptions, cursor, optionsMap), cursor, projects);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Project replace(final ProjectInfo newProject) {\n    try {\n      return Project.fromPb(\n          this,\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.replace(newProject.toPb());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void undelete(final String projectId) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() {\n              resourceManagerRpc.undelete(projectId);\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Policy getPolicy(final String projectId) {\n    try {\n      com.google.api.services.cloudresourcemanager.model.Policy answer =\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Policy>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Policy call() {\n                  return resourceManagerRpc.getPolicy(projectId);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock());\n      return answer == null ? null : PolicyMarshaller.INSTANCE.fromPb(answer);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Policy replacePolicy(final String projectId, final Policy newPolicy) {\n    try {\n      return PolicyMarshaller.INSTANCE.fromPb(\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Policy>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Policy call() {\n                  return resourceManagerRpc.replacePolicy(\n                      projectId, PolicyMarshaller.INSTANCE.toPb(newPolicy));\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public List<Boolean> testPermissions(final String projectId, final List<String> permissions) {\n    try {\n      return runWithRetries(\n          new Callable<List<Boolean>>() {\n            @Override\n            public List<Boolean> call() {\n              return resourceManagerRpc.testPermissions(projectId, permissions);\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Map<String, Boolean> testOrgPermissions(\n      final String resource, final List<String> permissions) {\n    try {\n      return runWithRetries(\n          new Callable<Map<String, Boolean>>() {\n            @Override\n            public Map<String, Boolean> call() throws IOException {\n              return resourceManagerRpc.testOrgPermissions(resource, permissions);\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void clearOrgPolicy(final String resource, final OrgPolicyInfo orgPolicy) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() throws IOException {\n              resourceManagerRpc.clearOrgPolicy(resource, orgPolicy.toProtobuf());\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo getEffectiveOrgPolicy(final String resource, final String constraint) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.getEffectiveOrgPolicy(resource, constraint);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo getOrgPolicy(final String resource, final String constraint) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.getOrgPolicy(resource, constraint);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class ConstraintPageFetcher implements NextPageFetcher<ConstraintInfo> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final String resource;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    ConstraintPageFetcher(\n        String resource,\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.resource = resource;\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<ConstraintInfo> getNextPage() {\n      return listAvailableOrgPolicyConstraints(resource, serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<ConstraintInfo> listAvailableOrgPolicyConstraints(\n      String resource, ListOption... options) {\n    return listAvailableOrgPolicyConstraints(resource, getOptions(), optionMap(options));\n  }\n\n  private static Page<ConstraintInfo> listAvailableOrgPolicyConstraints(\n      final String resource,\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      final ResourceManagerRpc rpc = serviceOptions.getResourceManagerRpcV1Beta1();\n      ListResult<Constraint> constraintList =\n          runWithRetries(\n              new Callable<ListResult<Constraint>>() {\n                @Override\n                public ListResult<Constraint> call() throws IOException {\n                  return rpc.listAvailableOrgPolicyConstraints(resource, optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = constraintList.pageToken();\n      Iterable<ConstraintInfo> constraints =\n          constraintList.results() == null\n              ? ImmutableList.<ConstraintInfo>of()\n              : Iterables.transform(\n                  constraintList.results(), ConstraintInfo.FROM_PROTOBUF_FUNCTION);\n      return new PageImpl<>(\n          new ConstraintPageFetcher(resource, serviceOptions, cursor, optionsMap),\n          cursor,\n          constraints);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class OrgPolicyPageFetcher implements NextPageFetcher<OrgPolicyInfo> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final String resource;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    OrgPolicyPageFetcher(\n        String resource,\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.resource = resource;\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<OrgPolicyInfo> getNextPage() {\n      return listOrgPolicies(resource, serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<OrgPolicyInfo> listOrgPolicies(final String resource, ListOption... options) {\n    return listOrgPolicies(resource, getOptions(), optionMap(options));\n  }\n\n  private static PageImpl<OrgPolicyInfo> listOrgPolicies(\n      final String resource,\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      final ResourceManagerRpc rpc = serviceOptions.getResourceManagerRpcV1Beta1();\n      ListResult<OrgPolicy> orgPolicy =\n          runWithRetries(\n              new Callable<ListResult<OrgPolicy>>() {\n                @Override\n                public ListResult<OrgPolicy> call() throws IOException {\n                  return rpc.listOrgPolicies(resource, optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = orgPolicy.pageToken();\n      Iterable<OrgPolicyInfo> orgPolicies =\n          orgPolicy.results() == null\n              ? ImmutableList.<OrgPolicyInfo>of()\n              : Iterables.transform(orgPolicy.results(), OrgPolicyInfo.FROM_PROTOBUF_FUNCTION);\n      return new PageImpl<>(\n          new OrgPolicyPageFetcher(resource, serviceOptions, cursor, optionsMap),\n          cursor,\n          orgPolicies);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo replaceOrgPolicy(final String resource, final OrgPolicyInfo orgPolicy) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.replaceOrgPolicy(resource, orgPolicy.toProtobuf());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private Map<ResourceManagerRpc.Option, ?> optionMap(Option... options) {\n    Map<ResourceManagerRpc.Option, Object> temp = Maps.newEnumMap(ResourceManagerRpc.Option.class);\n    for (Option option : options) {\n      Object prev = temp.put(option.getRpcOption(), option.getValue());\n      checkArgument(prev == null, \"Duplicate option %s\", option);\n    }\n    return ImmutableMap.copyOf(temp);\n  }\n}\n",
    "project": "google-cloud-java",
    "libraryName": "google-api-services-cloudresourcemanager",
    "libraryGroupID": "com.google.apis",
    "newVersion": "v3-rev20220807-2.0.0",
    "previousVersion": "v1-rev20220807-2.0.0",
    "breakingCommit": "471d07e01cd0c79dc9bed5344ed46418f4c078a2"
}