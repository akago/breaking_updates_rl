{
    "absolute_path_to_file_in_container": "/plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java",
    "errors": [
        {
            "line_number": 28,
            "message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java:[28,35] cannot find symbol",
            "additional_info": "  symbol:   class BoundedInputStream\n  location: package org.apache.commons.io.input",
            "file_name": "AbstractZipUnArchiver.java",
            "uid": "9795ef17-e9fa-5cd7-ae19-78cce23e50f0"
        },
        {
            "line_number": 204,
            "message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java:[204,25] cannot find symbol",
            "additional_info": "  symbol:   class BoundedInputStream\n  location: class org.codehaus.plexus.archiver.zip.AbstractZipUnArchiver",
            "file_name": "AbstractZipUnArchiver.java",
            "uid": "48e287bb-3475-557d-9aa1-deccbfc806c4"
        },
        {
            "line_number": 211,
            "message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java:[211,46] cannot find symbol",
            "additional_info": "  symbol:   method getByteCount()\n  location: variable cis of type org.apache.commons.io.input.CountingInputStream",
            "file_name": "AbstractZipUnArchiver.java",
            "uid": "67745bcf-33d8-527f-b048-91e97cbb4ccc"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: commons-io 2.11.0->20030203.000550\n\nthe following client code fails: \n'''java\n/**\n *\n * Copyright 2004 The Apache Software Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.codehaus.plexus.archiver.zip;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.Date;\nimport java.util.Enumeration;\nimport javax.annotation.Nonnull;\nimport org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport org.apache.commons.compress.archivers.zip.ZipFile;\nimport org.apache.commons.io.input.BoundedInputStream;\nimport org.apache.commons.io.input.CountingInputStream;\nimport org.codehaus.plexus.archiver.AbstractUnArchiver;\nimport org.codehaus.plexus.archiver.ArchiverException;\nimport org.codehaus.plexus.components.io.resources.PlexusIoResource;\n\n/**\n * @author <a href=\"mailto:evenisse@codehaus.org\">Emmanuel Venisse</a>\n */\npublic abstract class AbstractZipUnArchiver\n    extends AbstractUnArchiver\n{\n\n    private static final String NATIVE_ENCODING = \"native-encoding\";\n\n    private String encoding = \"UTF8\";\n\n    private long maxOutputSize = Long.MAX_VALUE;\n\n    public AbstractZipUnArchiver()\n    {\n    }\n\n    public AbstractZipUnArchiver( final File sourceFile )\n    {\n        super( sourceFile );\n    }\n\n    /**\n     * Sets the encoding to assume for file names and comments.\n     * <p>\n     * Set to <code>native-encoding</code> if you want your platform's native encoding, defaults to UTF8.\n     * </p>\n     */\n    public void setEncoding( String encoding )\n    {\n        if ( NATIVE_ENCODING.equals( encoding ) )\n        {\n            encoding = null;\n        }\n        this.encoding = encoding;\n    }\n\n    /**\n     * Set maximum allowed size of the produced output.\n     *\n     * It may be used as a protection against <a href=\"https://en.wikipedia.org/wiki/Zip_bomb\">zip bombs</a>.\n     *\n     * @param maxOutputSize max size of the produced output, in bytes. Must be greater than 0\n     * @throws IllegalArgumentException if specified output size is less or equal to 0\n     */\n    public void setMaxOutputSize( long maxOutputSize ) {\n        if ( maxOutputSize <= 0 ) {\n            throw new IllegalArgumentException( \"Invalid max output size specified: \" + maxOutputSize );\n        }\n        this.maxOutputSize = maxOutputSize;\n    }\n\n    private static class ZipEntryFileInfo\n        implements PlexusIoResource\n    {\n\n        private final org.apache.commons.compress.archivers.zip.ZipFile zipFile;\n\n        private final ZipArchiveEntry zipEntry;\n\n        ZipEntryFileInfo( final org.apache.commons.compress.archivers.zip.ZipFile zipFile,\n                          final ZipArchiveEntry zipEntry )\n        {\n            this.zipFile = zipFile;\n            this.zipEntry = zipEntry;\n        }\n\n        public String getName()\n        {\n            return zipEntry.getName();\n        }\n\n        @Override\n        public boolean isDirectory()\n        {\n            return zipEntry.isDirectory();\n        }\n\n        @Override\n        public boolean isFile()\n        {\n            return !zipEntry.isDirectory() && !zipEntry.isUnixSymlink();\n        }\n\n        @Override\n        public boolean isSymbolicLink()\n        {\n            return zipEntry.isUnixSymlink();\n        }\n\n        @Nonnull\n        @Override\n        public InputStream getContents()\n            throws IOException\n        {\n            return zipFile.getInputStream( zipEntry );\n        }\n\n        @Override\n        public long getLastModified()\n        {\n            final long l = zipEntry.getTime();\n            return l == 0 ? PlexusIoResource.UNKNOWN_MODIFICATION_DATE : l;\n        }\n\n        @Override\n        public long getSize()\n        {\n            final long l = zipEntry.getSize();\n            return l == -1 ? PlexusIoResource.UNKNOWN_RESOURCE_SIZE : l;\n        }\n\n        @Override\n        public URL getURL()\n            throws IOException\n        {\n            return null;\n        }\n\n        @Override\n        public boolean isExisting()\n        {\n            return true;\n        }\n\n    }\n\n    @Override\n    protected void execute()\n        throws ArchiverException\n    {\n        execute( \"\", getDestDirectory() );\n    }\n\n    private String resolveSymlink( ZipFile zf, ZipArchiveEntry ze )\n        throws IOException\n    {\n        if ( ze.isUnixSymlink() )\n        {\n            return zf.getUnixSymlink( ze );\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    @Override\n    protected void execute( final String path, final File outputDirectory )\n        throws ArchiverException\n    {\n        getLogger().debug( \"Expanding: \" + getSourceFile() + \" into \" + outputDirectory );\n        try ( ZipFile zipFile = new ZipFile( getSourceFile(), encoding, true ) )\n        {\n            long remainingSpace = maxOutputSize;\n            final Enumeration<ZipArchiveEntry> e = zipFile.getEntriesInPhysicalOrder();\n\n            while ( e.hasMoreElements() )\n            {\n                final ZipArchiveEntry ze = e.nextElement();\n                final ZipEntryFileInfo fileInfo = new ZipEntryFileInfo( zipFile, ze );\n                if ( !isSelected( ze.getName(), fileInfo ) )\n                {\n                    continue;\n                }\n\n                if ( ze.getName().startsWith( path ) )\n                {\n                    try ( InputStream in = zipFile.getInputStream( ze ) )\n                    {\n                        BoundedInputStream bis = new BoundedInputStream( in, remainingSpace + 1 );\n                        CountingInputStream cis = new CountingInputStream( bis );\n                        extractFile( getSourceFile(), outputDirectory, cis,\n                                     ze.getName(), new Date( ze.getTime() ), ze.isDirectory(),\n                                     ze.getUnixMode() != 0 ? ze.getUnixMode() : null,\n                                     resolveSymlink( zipFile, ze ), getFileMappers() );\n\n                        remainingSpace -= cis.getByteCount();\n                        if ( remainingSpace < 0 )\n                        {\n                            throw new ArchiverException( \"Maximum output size limit reached\" );\n                        }\n                    }\n                }\n            }\n            getLogger().debug( \"expand complete\" );\n        }\n        catch ( final IOException ioe )\n        {\n            throw new ArchiverException( \"Error while expanding \" + getSourceFile().getAbsolutePath(), ioe );\n        }\n    }\n\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport org.apache.commons.io.input.BoundedInputStream;\n                        BoundedInputStream bis = new BoundedInputStream( in, remainingSpace + 1 );\n                        remainingSpace -= cis.getByteCount();\nwith the following error message:\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java:[28,35] cannot find symbol  symbol:   class BoundedInputStream\n  location: package org.apache.commons.io.input\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java:[204,25] cannot find symbol  symbol:   class BoundedInputStream\n  location: class org.codehaus.plexus.archiver.zip.AbstractZipUnArchiver\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java:[211,46] cannot find symbol  symbol:   method getByteCount()\n  location: variable cis of type org.apache.commons.io.input.CountingInputStream\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.apache.commons.io.output.ThresholdingOutputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream.afterRead | DELETION | METHOD_REMOVED\norg.apache.commons.io.output.ByteArrayOutputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.BoundedInputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.output.DemuxOutputStream.close | MUTATION | METHOD_NOW_FINAL\njava.io.InputStream.readNBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.filefilter.PrefixFileFilter.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.output.LockableFileWriter.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.io.InputStream.skipNBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.HexDump.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.input.CountingInputStream.resetCount | DELETION | METHOD_REMOVED\njava.io.InputStream.transferTo | DELETION | METHOD_REMOVED\norg.apache.commons.io.input.CountingInputStream.resetByteCount | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.isDirectory | DELETION | METHOD_REMOVED\norg.apache.commons.io.output.CountingOutputStream.getByteCount | DELETION | METHOD_REMOVED\norg.apache.commons.io.input.ClosedInputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream.getByteCount | DELETION | METHOD_REMOVED\njava.io.InputStream.readAllBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.input.DemuxInputStream.close | MUTATION | METHOD_NOW_FINAL\norg.apache.commons.io.output.DemuxOutputStream.write | MUTATION | METHOD_NOW_FINAL\norg.apache.commons.io.output.NullPrintStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream | MUTATION | SUPERTYPE_REMOVED\njava.io.InputStream.nullInputStream | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.write | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import org.apache.commons.io.input.BoundedInputStream;\n                        BoundedInputStream bis = new BoundedInputStream( in, remainingSpace + 1 );\n                        remainingSpace -= cis.getByteCount();",
    "error_message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java:[28,35] cannot find symbol  symbol:   class BoundedInputStream\n  location: package org.apache.commons.io.input\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java:[204,25] cannot find symbol  symbol:   class BoundedInputStream\n  location: class org.codehaus.plexus.archiver.zip.AbstractZipUnArchiver\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java:[211,46] cannot find symbol  symbol:   method getByteCount()\n  location: variable cis of type org.apache.commons.io.input.CountingInputStream",
    "api_diff": "Format: element | nature | kind\norg.apache.commons.io.output.ThresholdingOutputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream.afterRead | DELETION | METHOD_REMOVED\norg.apache.commons.io.output.ByteArrayOutputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.BoundedInputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.output.DemuxOutputStream.close | MUTATION | METHOD_NOW_FINAL\njava.io.InputStream.readNBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.filefilter.PrefixFileFilter.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.output.LockableFileWriter.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.io.InputStream.skipNBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.HexDump.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.input.CountingInputStream.resetCount | DELETION | METHOD_REMOVED\njava.io.InputStream.transferTo | DELETION | METHOD_REMOVED\norg.apache.commons.io.input.CountingInputStream.resetByteCount | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.isDirectory | DELETION | METHOD_REMOVED\norg.apache.commons.io.output.CountingOutputStream.getByteCount | DELETION | METHOD_REMOVED\norg.apache.commons.io.input.ClosedInputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream.getByteCount | DELETION | METHOD_REMOVED\njava.io.InputStream.readAllBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.input.DemuxInputStream.close | MUTATION | METHOD_NOW_FINAL\norg.apache.commons.io.output.DemuxOutputStream.write | MUTATION | METHOD_NOW_FINAL\norg.apache.commons.io.output.NullPrintStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream | MUTATION | SUPERTYPE_REMOVED\njava.io.InputStream.nullInputStream | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.write | DELETION | METHOD_REMOVED",
    "original_code": "/**\n *\n * Copyright 2004 The Apache Software Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.codehaus.plexus.archiver.zip;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.Date;\nimport java.util.Enumeration;\nimport javax.annotation.Nonnull;\nimport org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport org.apache.commons.compress.archivers.zip.ZipFile;\nimport org.apache.commons.io.input.BoundedInputStream;\nimport org.apache.commons.io.input.CountingInputStream;\nimport org.codehaus.plexus.archiver.AbstractUnArchiver;\nimport org.codehaus.plexus.archiver.ArchiverException;\nimport org.codehaus.plexus.components.io.resources.PlexusIoResource;\n\n/**\n * @author <a href=\"mailto:evenisse@codehaus.org\">Emmanuel Venisse</a>\n */\npublic abstract class AbstractZipUnArchiver\n    extends AbstractUnArchiver\n{\n\n    private static final String NATIVE_ENCODING = \"native-encoding\";\n\n    private String encoding = \"UTF8\";\n\n    private long maxOutputSize = Long.MAX_VALUE;\n\n    public AbstractZipUnArchiver()\n    {\n    }\n\n    public AbstractZipUnArchiver( final File sourceFile )\n    {\n        super( sourceFile );\n    }\n\n    /**\n     * Sets the encoding to assume for file names and comments.\n     * <p>\n     * Set to <code>native-encoding</code> if you want your platform's native encoding, defaults to UTF8.\n     * </p>\n     */\n    public void setEncoding( String encoding )\n    {\n        if ( NATIVE_ENCODING.equals( encoding ) )\n        {\n            encoding = null;\n        }\n        this.encoding = encoding;\n    }\n\n    /**\n     * Set maximum allowed size of the produced output.\n     *\n     * It may be used as a protection against <a href=\"https://en.wikipedia.org/wiki/Zip_bomb\">zip bombs</a>.\n     *\n     * @param maxOutputSize max size of the produced output, in bytes. Must be greater than 0\n     * @throws IllegalArgumentException if specified output size is less or equal to 0\n     */\n    public void setMaxOutputSize( long maxOutputSize ) {\n        if ( maxOutputSize <= 0 ) {\n            throw new IllegalArgumentException( \"Invalid max output size specified: \" + maxOutputSize );\n        }\n        this.maxOutputSize = maxOutputSize;\n    }\n\n    private static class ZipEntryFileInfo\n        implements PlexusIoResource\n    {\n\n        private final org.apache.commons.compress.archivers.zip.ZipFile zipFile;\n\n        private final ZipArchiveEntry zipEntry;\n\n        ZipEntryFileInfo( final org.apache.commons.compress.archivers.zip.ZipFile zipFile,\n                          final ZipArchiveEntry zipEntry )\n        {\n            this.zipFile = zipFile;\n            this.zipEntry = zipEntry;\n        }\n\n        public String getName()\n        {\n            return zipEntry.getName();\n        }\n\n        @Override\n        public boolean isDirectory()\n        {\n            return zipEntry.isDirectory();\n        }\n\n        @Override\n        public boolean isFile()\n        {\n            return !zipEntry.isDirectory() && !zipEntry.isUnixSymlink();\n        }\n\n        @Override\n        public boolean isSymbolicLink()\n        {\n            return zipEntry.isUnixSymlink();\n        }\n\n        @Nonnull\n        @Override\n        public InputStream getContents()\n            throws IOException\n        {\n            return zipFile.getInputStream( zipEntry );\n        }\n\n        @Override\n        public long getLastModified()\n        {\n            final long l = zipEntry.getTime();\n            return l == 0 ? PlexusIoResource.UNKNOWN_MODIFICATION_DATE : l;\n        }\n\n        @Override\n        public long getSize()\n        {\n            final long l = zipEntry.getSize();\n            return l == -1 ? PlexusIoResource.UNKNOWN_RESOURCE_SIZE : l;\n        }\n\n        @Override\n        public URL getURL()\n            throws IOException\n        {\n            return null;\n        }\n\n        @Override\n        public boolean isExisting()\n        {\n            return true;\n        }\n\n    }\n\n    @Override\n    protected void execute()\n        throws ArchiverException\n    {\n        execute( \"\", getDestDirectory() );\n    }\n\n    private String resolveSymlink( ZipFile zf, ZipArchiveEntry ze )\n        throws IOException\n    {\n        if ( ze.isUnixSymlink() )\n        {\n            return zf.getUnixSymlink( ze );\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    @Override\n    protected void execute( final String path, final File outputDirectory )\n        throws ArchiverException\n    {\n        getLogger().debug( \"Expanding: \" + getSourceFile() + \" into \" + outputDirectory );\n        try ( ZipFile zipFile = new ZipFile( getSourceFile(), encoding, true ) )\n        {\n            long remainingSpace = maxOutputSize;\n            final Enumeration<ZipArchiveEntry> e = zipFile.getEntriesInPhysicalOrder();\n\n            while ( e.hasMoreElements() )\n            {\n                final ZipArchiveEntry ze = e.nextElement();\n                final ZipEntryFileInfo fileInfo = new ZipEntryFileInfo( zipFile, ze );\n                if ( !isSelected( ze.getName(), fileInfo ) )\n                {\n                    continue;\n                }\n\n                if ( ze.getName().startsWith( path ) )\n                {\n                    try ( InputStream in = zipFile.getInputStream( ze ) )\n                    {\n                        BoundedInputStream bis = new BoundedInputStream( in, remainingSpace + 1 );\n                        CountingInputStream cis = new CountingInputStream( bis );\n                        extractFile( getSourceFile(), outputDirectory, cis,\n                                     ze.getName(), new Date( ze.getTime() ), ze.isDirectory(),\n                                     ze.getUnixMode() != 0 ? ze.getUnixMode() : null,\n                                     resolveSymlink( zipFile, ze ), getFileMappers() );\n\n                        remainingSpace -= cis.getByteCount();\n                        if ( remainingSpace < 0 )\n                        {\n                            throw new ArchiverException( \"Maximum output size limit reached\" );\n                        }\n                    }\n                }\n            }\n            getLogger().debug( \"expand complete\" );\n        }\n        catch ( final IOException ioe )\n        {\n            throw new ArchiverException( \"Error while expanding \" + getSourceFile().getAbsolutePath(), ioe );\n        }\n    }\n\n}\n",
    "project": "plexus-archiver",
    "libraryName": "commons-io",
    "libraryGroupID": "commons-io",
    "newVersion": "20030203.000550",
    "previousVersion": "2.11.0",
    "breakingCommit": "ee0827d4c9bf80982241e8c3559dceb8b39063e4"
}