{
    "absolute_path_to_file_in_container": "/java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java",
    "errors": [
        {
            "line_number": 57,
            "message": "[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[57,25] cannot find symbol",
            "additional_info": "  symbol:   class ECKey\n  location: package org.bitcoinj.core",
            "file_name": "Client.java",
            "uid": "d62a1362-e4f4-5fd5-830a-925aab1e062f"
        },
        {
            "line_number": 169,
            "message": "[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[169,9] cannot find symbol",
            "additional_info": "  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client",
            "file_name": "Client.java",
            "uid": "73df8f6b-7b30-560a-bf4b-b778b44a8faa"
        },
        {
            "line_number": 200,
            "message": "[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[200,9] cannot find symbol",
            "additional_info": "  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client",
            "file_name": "Client.java",
            "uid": "73df8f6b-7b30-560a-bf4b-b778b44a8faa"
        },
        {
            "line_number": 228,
            "message": "[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[228,9] cannot find symbol",
            "additional_info": "  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client",
            "file_name": "Client.java",
            "uid": "73df8f6b-7b30-560a-bf4b-b778b44a8faa"
        },
        {
            "line_number": 261,
            "message": "[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[261,9] cannot find symbol",
            "additional_info": "  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client",
            "file_name": "Client.java",
            "uid": "73df8f6b-7b30-560a-bf4b-b778b44a8faa"
        },
        {
            "line_number": 1482,
            "message": "[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[1482,15] cannot find symbol",
            "additional_info": "  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client",
            "file_name": "Client.java",
            "uid": "73df8f6b-7b30-560a-bf4b-b778b44a8faa"
        },
        {
            "line_number": 1508,
            "message": "[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[1508,15] cannot find symbol",
            "additional_info": "  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client",
            "file_name": "Client.java",
            "uid": "73df8f6b-7b30-560a-bf4b-b778b44a8faa"
        },
        {
            "line_number": 1536,
            "message": "[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[1536,35] cannot find symbol",
            "additional_info": "  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client",
            "file_name": "Client.java",
            "uid": "73df8f6b-7b30-560a-bf4b-b778b44a8faa"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: bitcoinj-core 0.16.3->0.17\n\nthe following client code fails: \n'''java\n/*\n * Copyright (c) 2019 BitPay.\n * All rights reserved.\n */\n\npackage com.bitpay.sdk;\n\nimport com.bitpay.sdk.client.AuthorizationClient;\nimport com.bitpay.sdk.client.BillClient;\nimport com.bitpay.sdk.client.BitPayClient;\nimport com.bitpay.sdk.client.CurrencyClient;\nimport com.bitpay.sdk.client.HttpRequestFactory;\nimport com.bitpay.sdk.client.InvoiceClient;\nimport com.bitpay.sdk.client.LedgerClient;\nimport com.bitpay.sdk.client.PayoutClient;\nimport com.bitpay.sdk.client.PayoutGroupClient;\nimport com.bitpay.sdk.client.PayoutRecipientsClient;\nimport com.bitpay.sdk.client.RateClient;\nimport com.bitpay.sdk.client.RefundClient;\nimport com.bitpay.sdk.client.SettlementClient;\nimport com.bitpay.sdk.client.WalletClient;\nimport com.bitpay.sdk.exceptions.BitPayApiException;\nimport com.bitpay.sdk.exceptions.BitPayExceptionProvider;\nimport com.bitpay.sdk.exceptions.BitPayGenericException;\nimport com.bitpay.sdk.model.Facade;\nimport com.bitpay.sdk.model.bill.Bill;\nimport com.bitpay.sdk.model.invoice.Invoice;\nimport com.bitpay.sdk.model.invoice.InvoiceEventToken;\nimport com.bitpay.sdk.model.invoice.Refund;\nimport com.bitpay.sdk.model.ledger.Ledger;\nimport com.bitpay.sdk.model.ledger.LedgerEntry;\nimport com.bitpay.sdk.model.payout.Payout;\nimport com.bitpay.sdk.model.payout.PayoutGroup;\nimport com.bitpay.sdk.model.payout.PayoutRecipient;\nimport com.bitpay.sdk.model.payout.PayoutRecipients;\nimport com.bitpay.sdk.model.rate.Rate;\nimport com.bitpay.sdk.model.rate.Rates;\nimport com.bitpay.sdk.model.settlement.Settlement;\nimport com.bitpay.sdk.model.wallet.Wallet;\nimport com.bitpay.sdk.util.GuidGenerator;\nimport com.bitpay.sdk.util.JsonMapperFactory;\nimport com.bitpay.sdk.util.KeyUtils;\nimport com.bitpay.sdk.util.TokenContainer;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport org.apache.http.HttpHost;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.bitcoinj.core.ECKey;\n\n/**\n * The type Client.\n */\npublic class Client {\n\n    protected static final String LOAD_PRIVATE_KEY_EXCEPTION =\n        \"When trying to load private key. Make sure the configuration details are correct \"\n            + \"and the private key and tokens are valid : \";\n    protected GuidGenerator guidGenerator;\n    protected BitPayClient bitPayClient;\n    protected TokenContainer tokenContainer;\n\n    /**\n     * Return the identity of this client (i.e. the public key).\n     */\n    private String identity;\n\n    /**\n     * Constructor for POS facade.\n     *\n     * @param token POS token\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(PosToken token) throws BitPayGenericException {\n        this(token, Environment.PROD);\n    }\n\n    /**\n     * Constructor for POS facade.\n     *\n     * @param token        POS token\n     * @param platformInfo Platform info\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(PosToken token, String platformInfo) throws BitPayGenericException {\n        this(token, Environment.PROD, platformInfo);\n    }\n\n    /**\n     * Constructor for POS facade.\n     *\n     * @param token       POS token\n     * @param environment Environment\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(\n        PosToken token,\n        Environment environment\n    ) throws BitPayGenericException {\n        if (Objects.isNull(token) || Objects.isNull(environment)) {\n            BitPayExceptionProvider.throwMissingParameterException();\n        }\n\n        this.tokenContainer = new TokenContainer();\n        this.tokenContainer.addPos(token.value());\n        this.bitPayClient = new BitPayClient(\n            getHttpClient(null, null),\n            new HttpRequestFactory(),\n            getBaseUrl(environment),\n            null\n        );\n        this.guidGenerator = new GuidGenerator();\n    }\n\n    /**\n     * Constructor for POS facade.\n     *\n     * @param token        POS token\n     * @param environment  Environment\n     * @param platformInfo Platform info\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(\n        PosToken token,\n        Environment environment,\n        String platformInfo\n    ) throws BitPayGenericException {\n        if (Objects.isNull(token) || Objects.isNull(environment)) {\n            BitPayExceptionProvider.throwMissingParameterException();\n        }\n\n        this.tokenContainer = new TokenContainer();\n        this.tokenContainer.addPos(token.value());\n        this.bitPayClient = new BitPayClient(\n            getHttpClient(null, null),\n            new HttpRequestFactory(),\n            getBaseUrl(environment),\n            null,\n            platformInfo\n        );\n        this.guidGenerator = new GuidGenerator();\n    }\n\n    /**\n     * Constructor for use if the keys and SIN are managed by this library.\n     *\n     * @param environment      Target environment. Options: Env.Test / Env.Prod\n     * @param privateKey       The full path to the securely located private key or the HEX key value.\n     * @param tokenContainer   Object containing the available tokens.\n     * @param proxyDetails     HttpHost Optional Proxy setting (set to NULL to ignore)\n     * @param proxyCredentials CredentialsProvider Optional Proxy Basic Auth Credentials (set to NULL to ignore)\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(\n        Environment environment,\n        PrivateKey privateKey,\n        TokenContainer tokenContainer,\n        HttpHost proxyDetails,\n        CredentialsProvider proxyCredentials\n    ) throws BitPayGenericException {\n        ECKey ecKey = getEcKey(privateKey);\n        this.tokenContainer = tokenContainer;\n        this.deriveIdentity(ecKey);\n        this.bitPayClient = new BitPayClient(\n            getHttpClient(proxyDetails, proxyCredentials),\n            new HttpRequestFactory(),\n            getBaseUrl(environment),\n            ecKey\n        );\n        this.guidGenerator = new GuidGenerator();\n    }\n\n    /**\n     * Constructor for use if the keys and SIN are managed by this library.\n     *\n     * @param environment      Target environment. Options: Env.Test / Env.Prod\n     * @param privateKey       The full path to the securely located private key or the HEX key value.\n     * @param tokenContainer   Object containing the available tokens.\n     * @param proxyDetails     HttpHost Optional Proxy setting (set to NULL to ignore)\n     * @param proxyCredentials CredentialsProvider Optional Proxy Basic Auth Credentials (set to NULL to ignore)\n     * @param platformInfo     Platform Info\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(\n        Environment environment,\n        PrivateKey privateKey,\n        TokenContainer tokenContainer,\n        HttpHost proxyDetails,\n        CredentialsProvider proxyCredentials,\n        String platformInfo\n    ) throws BitPayGenericException {\n        ECKey ecKey = getEcKey(privateKey);\n        this.tokenContainer = tokenContainer;\n        this.deriveIdentity(ecKey);\n        this.bitPayClient = new BitPayClient(\n            getHttpClient(proxyDetails, proxyCredentials),\n            new HttpRequestFactory(),\n            getBaseUrl(environment),\n            ecKey,\n            platformInfo\n        );\n        this.guidGenerator = new GuidGenerator();\n    }\n\n    /**\n     * Constructor for use if the keys and SIN are managed by this library.\n     *\n     * @param configFilePath   The path to the configuration file.\n     * @param proxy            HttpHost Optional Proxy setting (set to NULL to ignore)\n     * @param proxyCredentials CredentialsProvider Optional Proxy Basic Auth Credentials (set to NULL to ignore)\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(\n        ConfigFilePath configFilePath,\n        HttpHost proxy,\n        CredentialsProvider proxyCredentials\n    ) throws BitPayGenericException {\n        Config config = this.buildConfigFromFile(configFilePath);\n        this.tokenContainer = new TokenContainer(config);\n        ECKey ecKey = this.getEcKey(config);\n        if (Objects.isNull(ecKey)) {\n            BitPayExceptionProvider.throwValidationException(\"Missing ECKey\");\n        }\n\n        this.deriveIdentity(ecKey);\n        this.bitPayClient = new BitPayClient(\n            getHttpClient(proxy, proxyCredentials),\n            new HttpRequestFactory(),\n            getBaseUrl(config.getEnvironment()),\n            ecKey\n        );\n        this.guidGenerator = new GuidGenerator();\n    }\n\n\n    /**\n     * Constructor for use if the keys and SIN are managed by this library.\n     *\n     * @param configFilePath   The path to the configuration file.\n     * @param proxy            HttpHost Optional Proxy setting (set to NULL to ignore)\n     * @param proxyCredentials CredentialsProvider Optional Proxy Basic Auth Credentials (set to NULL to ignore)\n     * @param platformInfo     Platform Info\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(\n        ConfigFilePath configFilePath,\n        HttpHost proxy,\n        CredentialsProvider proxyCredentials,\n        String platformInfo\n    ) throws BitPayGenericException {\n        Config config = this.buildConfigFromFile(configFilePath);\n        this.tokenContainer = new TokenContainer(config);\n        ECKey ecKey = this.getEcKey(config);\n        if (Objects.isNull(ecKey)) {\n            BitPayExceptionProvider.throwValidationException(\"Missing ECKey\");\n        }\n\n        this.deriveIdentity(ecKey);\n        this.bitPayClient = new BitPayClient(\n            getHttpClient(proxy, proxyCredentials),\n            new HttpRequestFactory(),\n            getBaseUrl(config.getEnvironment()),\n            ecKey,\n            platformInfo\n        );\n        this.guidGenerator = new GuidGenerator();\n    }\n\n    /**\n     * Constructor for all injected classes.\n     *\n     * @param bitPayClient   BitPayClient\n     * @param identity       Identity\n     * @param tokenContainer TokenContainer\n     * @param guidGenerator  GuidGenerator\n     */\n    public Client(\n        BitPayClient bitPayClient,\n        String identity,\n        TokenContainer tokenContainer,\n        GuidGenerator guidGenerator\n    ) {\n        this.bitPayClient = bitPayClient;\n        this.identity = identity;\n        this.tokenContainer = tokenContainer;\n        this.guidGenerator = guidGenerator;\n    }\n\n    /**\n     * Create pos (light) client.\n     *\n     * @param token the token\n     * @return the client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createPosClient(PosToken token) throws BitPayGenericException {\n        return new Client(token);\n    }\n\n    /**\n     * Create pos (light) client.\n     *\n     * @param token the token\n     * @param platformInfo the platform info\n     * @return the client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createPosClient(PosToken token, String platformInfo) throws BitPayGenericException {\n        return new Client(token, platformInfo);\n    }\n\n    /**\n     * Create pos (light) client.\n     *\n     * @param token the token\n     * @param environment environment\n     * @return the client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createPosClient(\n        PosToken token,\n        Environment environment\n    ) throws BitPayGenericException {\n        return new Client(token, environment);\n    }\n\n    /**\n     * Create pos (light) client.\n     *\n     * @param token the token\n     * @param environment environment\n     * @param platformInfo the platform info\n     * @return the client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createPosClient(\n        PosToken token,\n        Environment environment,\n        String platformInfo\n    ) throws BitPayGenericException {\n        return new Client(token, environment, platformInfo);\n    }\n\n    /**\n     * Create standard client.\n     *\n     * @param privateKey the private key\n     * @param tokenContainer the token container\n     * @param environment environment\n     * @return Client Client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createClientByPrivateKey(\n        PrivateKey privateKey,\n        TokenContainer tokenContainer,\n        Environment environment\n    ) throws BitPayGenericException {\n        Environment env = Objects.isNull(environment) ? Environment.PROD : environment;\n\n        return new Client(env, privateKey, tokenContainer, null, null);\n    }\n\n    /**\n     * Create standard client.\n     *\n     * @param privateKey the private key\n     * @param tokenContainer the token container\n     * @param environment environment\n     * @param platformInfo the platform info\n     * @return Client Client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createClientByPrivateKey(\n        PrivateKey privateKey,\n        TokenContainer tokenContainer,\n        Environment environment,\n        String platformInfo\n    ) throws BitPayGenericException {\n        Environment env = Objects.isNull(environment) ? Environment.PROD : environment;\n\n        return new Client(env, privateKey, tokenContainer, null, null, platformInfo);\n    }\n\n    /**\n     * Create standard client.\n     *\n     * @param configFilePath the config file path\n     * @return the client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createClientByConfigFilePath(ConfigFilePath configFilePath) throws BitPayGenericException {\n        return new Client(configFilePath, null, null);\n    }\n\n    /**\n     * Create standard client.\n     *\n     * @param configFilePath the config file path\n     * @param platformInfo the platform info\n     * @return the client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createClientByConfigFilePath(\n        ConfigFilePath configFilePath,\n        String platformInfo\n    ) throws BitPayGenericException {\n        return new Client(configFilePath, null, null, platformInfo);\n    }\n\n\n    /**\n     * Authorize this client with the server using the specified pairing code (Server Initiated Pairing).\n     *\n     * @param pairingCode A code obtained from the server; typically from bitpay.com/api-tokens.\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/get-token\">Request an API Token</a>\n     */\n    public void authorizeClient(String pairingCode) throws BitPayApiException, BitPayGenericException {\n        this.createAuthorizationClient().authorizeClient(pairingCode);\n    }\n\n    /**\n     * Request a pairing code from the BitPay server (Client Initiated Pairing).\n     *\n     * @param facade Defines the level of API access being requested\n     * @return A pairing code for claim at https://bitpay.com/dashboard/merchant/api-tokens.\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/get-token\">Request an API Token</a>\n     */\n    public String authorizeClient(Facade facade) throws BitPayApiException, BitPayGenericException {\n        return this.createAuthorizationClient().authorizeClient(facade);\n    }\n\n    /**\n     * Retrieve a token associated with a known resource. The token is used to access other related resources.\n     *\n     * @param facade The identifier for the desired resource.\n     * @return The token associated with resource.\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public String getAccessToken(Facade facade) throws BitPayGenericException {\n        return this.tokenContainer.getAccessToken(facade);\n    }\n\n    /**\n     * Retrieve a token associated with a known resource. The token is used to access other related resources.\n     *\n     * @param key The identifier for the desired resource.\n     * @return The token associated with resource.\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public String getAccessToken(String key) throws BitPayGenericException {\n        return this.tokenContainer.getAccessToken(key);\n    }\n\n    /**\n     * Gets info for specific currency.\n     *\n     * @param currencyCode String Currency code for which the info will be retrieved.\n     * @return Map|null\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Map<String, Object> getCurrencyInfo(String currencyCode) throws BitPayGenericException {\n        CurrencyClient client = CurrencyClient.getInstance(this.bitPayClient);\n        return client.getInfo(currencyCode);\n    }\n\n    /**\n     * Create a BitPay invoice.\n     *\n     * @param invoice An Invoice object with request parameters defined.\n     * @return A BitPay generated Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-an-invoice\">Create an Invoice</a>\n     */\n    public Invoice createInvoice(Invoice invoice) throws BitPayGenericException, BitPayApiException {\n        InvoiceClient client = getInvoiceClient();\n        Facade facade = getFacadeBasedOnAccessToken();\n        boolean signRequest = isSignRequest(facade);\n\n        return client.create(invoice, facade, signRequest);\n    }\n\n    /**\n     * Create a BitPay invoice.\n     *\n     * @param invoice An Invoice object with request parameters defined.\n     * @param facade The facade used to create it.\n     * @param signRequest Signed request.\n     * @return A BitPay generated Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-an-invoice\">Create an Invoice</a>\n     */\n    public Invoice createInvoice(\n        Invoice invoice,\n        Facade facade,\n        boolean signRequest\n    ) throws BitPayGenericException, BitPayApiException {\n        InvoiceClient client = getInvoiceClient();\n\n        return client.create(invoice, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a BitPay invoice by invoice id using the public facade.\n     *\n     * @param invoiceId The id of the invoice to retrieve.\n     * @return A BitPay Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-an-invoice\">Retrieve an Invoice</a>\n     */\n    public Invoice getInvoice(String invoiceId) throws BitPayGenericException, BitPayApiException {\n        Facade facade = getFacadeBasedOnAccessToken();\n        boolean signRequest = isSignRequest(facade);\n\n        return this.getInvoiceClient().get(invoiceId, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a BitPay invoice by invoice id.\n     *\n     * @param invoiceId The id of the invoice to retrieve.\n     * @param facade The facade used to create it.\n     * @param signRequest Signed request.\n     * @return A BitPay Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-an-invoice\">Retrieve an Invoice</a>\n     */\n    public Invoice getInvoice(\n        String invoiceId,\n        Facade facade,\n        boolean signRequest\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().get(invoiceId, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a BitPay invoice by guid using the specified facade.\n     * The client must have been previously authorized for the specified facade.\n     *\n     * @param guid The guid of the invoice to retrieve.\n     * @return A BitPay Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-an-invoice-by-guid\">Retrieve an Invoice by GUID</a>\n     */\n    public Invoice getInvoiceByGuid(String guid) throws BitPayGenericException, BitPayApiException {\n        Facade facade = getFacadeBasedOnAccessToken();\n        boolean signRequest = isSignRequest(facade);\n        return this.getInvoiceClient().getByGuid(guid, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a BitPay invoice by guid using the specified facade.\n     * The client must have been previously authorized for the specified facade.\n     *\n     * @param guid        The guid of the invoice to retrieve.\n     * @param facade      The facade used to create it.\n     * @param signRequest Signed request.\n     * @return A BitPay Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-an-invoice-by-guid\">Retrieve an Invoice by GUID</a>\n     */\n    public Invoice getInvoiceByGuid(\n        String guid,\n        Facade facade,\n        Boolean signRequest\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().getByGuid(guid, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a collection of BitPay invoices.\n     *\n     * @param dateStart The first date for the query filter.\n     * @param dateEnd   The last date for the query filter.\n     * @param status    The invoice status you want to query on.\n     * @param orderId   The optional order id specified at time of invoice creation.\n     * @param limit     Maximum results that the query will return (useful for paging results).\n     * @param offset    Number of results to offset (ex. skip 10 will give you results starting with the 11th\n     * @return A list of BitPay Invoice objects.\n     * @throws BitPayGenericException       BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-invoices-filtered-by-query\">Retrieve Invoices Filtered by Query</a>\n     */\n    public List<Invoice> getInvoices(\n        String dateStart,\n        String dateEnd,\n        String status,\n        String orderId,\n        Integer limit,\n        Integer offset\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().getInvoices(dateStart, dateEnd, status, orderId, limit, offset);\n    }\n\n    /**\n     * Retrieves a bus token which can be used to subscribe to invoice events.\n     *\n     * @param invoiceId the id of the invoice for which you want to fetch an event token.\n     * @return InvoiceEventToken event token\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @since 8.8.0\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-an-event-token\">Retrieve an Event Token</a>\n     */\n    public InvoiceEventToken getInvoiceEventToken(String invoiceId) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().getInvoiceEventToken(invoiceId);\n    }\n\n    /**\n     * Update a BitPay invoice with communication method.\n     *\n     * @param invoiceId  The id of the invoice to updated.\n     * @param buyerSms   The buyer's cell number.\n     * @param smsCode    The buyer's received verification code.\n     * @param buyerEmail The buyer's email address.\n     * @param autoVerify Skip the user verification on sandbox ONLY.\n     * @return A BitPay generated Invoice object.\n     * @throws BitPayGenericException        BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/update-an-invoice\">Update an Invoice</a>\n     */\n    public Invoice updateInvoice(\n        String invoiceId,\n        String buyerSms,\n        String smsCode,\n        String buyerEmail,\n        Boolean autoVerify\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().update(invoiceId, buyerSms, smsCode, buyerEmail, autoVerify);\n    }\n\n    /**\n     * Pay a BitPay invoice with a mock transaction. Available only on test env.\n     *\n     * @param invoiceId The id of the invoice to updated.\n     * @param status    The status of the invoice to be updated, can be \"confirmed\" or \"complete\".\n     * @return A BitPay generated Invoice object.\n     * @throws BitPayGenericException        BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     */\n    public Invoice payInvoice(\n        String invoiceId,\n        String status\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().pay(invoiceId, status);\n    }\n\n    /**\n     * Delete a previously created BitPay invoice.\n     *\n     * @param invoiceId The Id of the BitPay invoice to be canceled.\n     * @return A BitPay generated Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException              BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-an-invoice\">Cancel an Invoice</a>\n     */\n    public Invoice cancelInvoice(String invoiceId) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().cancel(invoiceId);\n    }\n\n    /**\n     * Cancellation will require EITHER an SMS or E-mail to have already been set if the invoice has proceeded to\n     * the point where it may have been paid, unless using forceCancel parameter.\n     *\n     * @param invoiceId   The Id of the BitPay invoice to be canceled.\n     * @param forceCancel If 'true' it will cancel the invoice even if no contact information is present.\n     * @return A BitPay generated Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException              BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-an-invoice\">Cancel an Invoice</a>\n     */\n    public Invoice cancelInvoice(\n        String invoiceId,\n        Boolean forceCancel\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().cancel(invoiceId, forceCancel);\n    }\n\n    /**\n     * Cancellation will require EITHER an SMS or E-mail to have already been set if the invoice has proceeded to\n     * the point where it may have been paid, unless using forceCancel parameter.\n     *\n     * @param guid GUID A passthru variable provided by the merchant and designed to be used by the merchant to\n     *             correlate the invoice with an order ID in their system, which can be used as a lookup variable\n     *             in Retrieve Invoice by GUID.\n     * @return Invoice Invoice\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-an-invoice-by-guid\">Cancel an Invoice by GUID</a>\n     */\n    public Invoice cancelInvoiceByGuid(String guid) throws BitPayApiException, BitPayGenericException {\n        return this.getInvoiceClient().cancelByGuid(guid, false);\n    }\n\n    /**\n     * Cancellation will require EITHER an SMS or E-mail to have already been set if the invoice has proceeded to\n     * the point where it may have been paid, unless using forceCancel parameter.\n     *\n     * @param guid GUID A passthru variable provided by the merchant and designed to be used by the merchant to\n     *             correlate the invoice with an order ID in their system, which can be used as a lookup variable\n     *             in Retrieve Invoice by GUID.\n     * @param forceCancel Parameter that will cancel the invoice even if no contact information is present.\n     *                    Note: Canceling a paid invoice without contact information requires a manual support\n     *                    process and is not recommended.\n     * @return Invoice Invoice\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-an-invoice-by-guid\">Cancel an Invoice by GUID</a>\n     */\n    public Invoice cancelInvoiceByGuid(\n        String guid,\n        Boolean forceCancel\n    ) throws BitPayApiException, BitPayGenericException {\n        return this.getInvoiceClient().cancelByGuid(guid, forceCancel);\n    }\n\n    /**\n     * The intent of this call is to address issues when BitPay sends a webhook but the client doesn't receive it,\n     * so the client can request that BitPay resend it.\n     *\n     * @param invoiceId The id of the invoice for which you want the last webhook to be resent.\n     * @return Boolean status of request\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/request-an-invoice-webhook-to-be-resent\">Request an Invoice Webhook to be Resent</a>\n     */\n    public Boolean requestInvoiceWebhookToBeResent(String invoiceId) throws BitPayApiException, BitPayGenericException {\n        return this.getInvoiceClient().requestInvoiceWebhookToBeResent(invoiceId);\n    }\n\n    /**\n     * Create a refund for a BitPay invoice.\n     *\n     * @param invoiceId          The BitPay invoice Id having the associated refund to be created.\n     * @param amount             Amount to be refunded in the currency indicated.\n     * @param preview            Whether to create the refund request as a preview\n     *                           (which will not be acted on until status is updated)\n     * @param immediate          Whether funds should be removed from merchant ledger immediately on submission\n     *                           or at time of processing\n     * @param buyerPaysRefundFee Whether the buyer should pay the refund fee (default is merchant)\n     * @param reference          Present only if specified. Used as reference label for the refund. Max str length = 100\n     * @return An updated Refund Object\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException         BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-a-refund-request\">Create a Refund Request</a>\n     */\n    public Refund createRefund(\n        String invoiceId,\n        Double amount,\n        Boolean preview,\n        Boolean immediate,\n        Boolean buyerPaysRefundFee,\n        String reference\n    ) throws BitPayGenericException, BitPayApiException {\n        Refund refund = new Refund();\n        refund.setInvoice(invoiceId);\n        refund.setAmount(amount);\n        refund.setPreview(preview);\n        refund.setImmediate(immediate);\n        refund.setBuyerPaysRefundFee(buyerPaysRefundFee);\n        refund.setReference(reference);\n\n        return this.getRefundClient().create(refund);\n    }\n\n    /**\n     * Create a refund for a BitPay invoice.\n     *\n     * @param invoiceId          The BitPay invoice Id having the associated refund to be created.\n     * @param amount             Amount to be refunded in the currency indicated.\n     * @param preview            Whether to create the refund request as a preview\n     *                           (which will not be acted on until status is updated)\n     * @param immediate          Whether funds should be removed from merchant ledger immediately on submission\n     *                           or at time of processing\n     * @param buyerPaysRefundFee Whether the buyer should pay the refund fee (default is merchant)\n     * @param reference          Present only if specified. Used as reference label for the refund. Max str length = 100\n     * @param guid               Variable provided by the merchant and designed to be used by the merchant\n     *                           to correlate the refund with a refund ID in their system\n     * @return An updated Refund Object\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException         BitPayApiException class\n     * @since 8.7.0\n     * @see <a href=\"https://developer.bitpay.com/reference/create-a-refund-request\">Create a Refund Request</a>\n     */\n    public Refund createRefund(\n        String invoiceId,\n        Double amount,\n        Boolean preview,\n        Boolean immediate,\n        Boolean buyerPaysRefundFee,\n        String reference,\n        String guid\n    ) throws BitPayGenericException, BitPayApiException {\n        Refund refund = new Refund();\n        refund.setInvoice(invoiceId);\n        refund.setAmount(amount);\n        refund.setPreview(preview);\n        refund.setImmediate(immediate);\n        refund.setBuyerPaysRefundFee(buyerPaysRefundFee);\n        refund.setReference(reference);\n        refund.setGuid(guid);\n\n        return this.getRefundClient().create(refund);\n    }\n\n    /**\n     * Create a refund for a BitPay invoice.\n     *\n     * @param refund Refund class which provided data - invoice id, amount, preview, immediate, buyerPaysRefundFee,\n     *               reference and guid for create request\n     * @return An updated Refund Object\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException         BitPayApiException class\n     * @since 8.7.0\n     * @see <a href=\"https://developer.bitpay.com/reference/create-a-refund-request\">Create a Refund Request</a>\n     */\n    public Refund createRefund(Refund refund) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().create(refund);\n    }\n\n    /**\n     * Retrieve a previously made refund request on a BitPay invoice.\n     *\n     * @param refundId The BitPay refund ID.\n     * @return A BitPay Refund object with the associated Refund object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException      BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-refund-request\">Retrieve a Refund Request</a>\n     */\n    public Refund getRefund(String refundId) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().getById(refundId);\n    }\n\n    /**\n     * Retrieve a previously made refund request on a BitPay invoice.\n     *\n     * @param guid The BitPay refund GUID.\n     * @return A BitPay Refund object with the associated Refund object.\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @since 8.7.0\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-refund-by-guid-request\">Retrieve a Refund by GUID Request</a>\n     */\n    public Refund getRefundByGuid(String guid) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().getByGuid(guid);\n    }\n\n    /**\n     * Retrieve all refund requests on a BitPay invoice.\n     *\n     * @param invoiceId The BitPay invoice object having the associated refunds.\n     * @return A list of BitPay Refund objects with the associated Refund objects.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-refunds-of-an-invoice\">Retrieve Refunds of an Invoice</a>\n     */\n    public List<Refund> getRefunds(String invoiceId) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().getRefundsByInvoiceId(invoiceId);\n    }\n\n    /**\n     * Update the status of a BitPay invoice.\n     *\n     * @param refundId A BitPay refund ID.\n     * @param status   The new status for the refund to be updated.\n     * @return A BitPay generated Refund object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/update-a-refund-request\">Update a Refund Request</a>\n     */\n    public Refund updateRefund(String refundId, String status) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().update(refundId, status);\n    }\n\n    /**\n     * Update the status of a BitPay invoice.\n     *\n     * @param guid A BitPay refund Guid.\n     * @param status   The new status for the refund to be updated.\n     * @return A BitPay generated Refund object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @since 8.7.0\n     * @see <a href=\"https://developer.bitpay.com/reference/update-a-refund-by-guid-request\">Update a Refund by GUID Request</a>\n     */\n    public Refund updateRefundByGuid(String guid, String status) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().updateByGuid(guid, status);\n    }\n\n    /**\n     * Send a refund notification.\n     *\n     * @param refundId A BitPay refund ID.\n     * @return An updated Refund Object\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/request-a-refund-notification-to-be-resent\">Request a Refund Notification to be Resent</a>\n     */\n    public Boolean sendRefundNotification(String refundId) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().sendRefundNotification(refundId);\n    }\n\n    /**\n     * Cancel a previously submitted refund request on a BitPay invoice.\n     *\n     * @param refundId The refund Id for the refund to be canceled.\n     * @return An updated Refund Object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-a-refund-request\">Cancel a Refund Request</a>\n     */\n    public Refund cancelRefund(String refundId) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().cancel(refundId);\n    }\n\n    /**\n     * Cancel a previously submitted refund request on a BitPay invoice.\n     *\n     * @param guid The refund Guid for the refund to be canceled.\n     * @return An updated Refund Object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @since 8.7.0\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-a-refund-by-guid-request\">Cancel a Refund by GUID Request</a>\n     */\n    public Refund cancelRefundByGuid(String guid) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().cancelByGuid(guid);\n    }\n\n    /**\n     * Create a BitPay bill.\n     *\n     * @param bill An Bill object with request parameters defined.\n     * @return A BitPay generated Bill object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-a-bill\">Create a Bill</a>\n     */\n    public Bill createBill(Bill bill) throws BitPayGenericException, BitPayApiException {\n        Facade facade = this.getFacadeBasedOnAccessToken();\n        boolean signRequest = isSignRequest(facade);\n\n        return this.createBill(bill, facade, signRequest);\n    }\n\n    /**\n     * Create a BitPay Bill.\n     *\n     * @param bill        A Bill object with request parameters defined.\n     * @param facade      The facade used to create it.\n     * @param signRequest Signed request.\n     * @return A BitPay generated Bill object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-a-bill\">Create a Bill</a>\n     */\n    public Bill createBill(\n        Bill bill,\n        Facade facade,\n        boolean signRequest\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getBillClient().create(bill, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a BitPay bill by bill id using the public facade.\n     *\n     * @param billId The id of the bill to retrieve.\n     * @return A BitPay Bill object.\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-bill\">Retrieve a Bill</a>\n     */\n    public Bill getBill(String billId) throws BitPayGenericException, BitPayApiException {\n        Facade facade = this.getFacadeBasedOnAccessToken();\n        boolean signRequest = isSignRequest(facade);\n\n        return this.getBill(billId, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a BitPay bill by bill id using the specified facade.\n     *\n     * @param billId      The id of the bill to retrieve.\n     * @param facade      The facade used to retrieve it.\n     * @param signRequest Signed request.\n     * @return A BitPay Bill object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-bill\">Retrieve a Bill</a>\n     */\n    public Bill getBill(\n        String billId,\n        Facade facade,\n        boolean signRequest\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getBillClient().get(billId, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a collection of BitPay bills.\n     *\n     * @param status The status to filter the bills.\n     * @return A list of BitPay Bill objects.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-bills-by-status\">Retrieve Bills by Status</a>\n     */\n    public List<Bill> getBills(String status) throws BitPayGenericException, BitPayApiException {\n        return this.getBillClient().getBills(status);\n    }\n\n    /**\n     * Retrieve a collection of BitPay bills.\n     *\n     * @return A list of BitPay Bill objects.\n     * @throws BitPayGenericException BitPayApiException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-bills-by-status\">Retrieve Bills by Status</a>\n     */\n    public List<Bill> getBills() throws BitPayGenericException, BitPayApiException {\n        return this.getBillClient().getBills();\n    }\n\n    /**\n     * Update a BitPay Bill.\n     *\n     * @param bill   A Bill object with the parameters to update defined.\n     * @param billId The Id of the Bill to udpate.\n     * @return An updated Bill object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/update-a-bill\">Update a Bill</a>\n     */\n    public Bill updateBill(Bill bill, String billId) throws BitPayGenericException, BitPayApiException {\n        return this.getBillClient().update(bill, billId);\n    }\n\n    /**\n     * Deliver a BitPay Bill.\n     *\n     * @param billId    The id of the requested bill.\n     * @param billToken The token of the requested bill.\n     * @return A response status returned from the API.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/deliver-a-bill-via-email\">Deliver a Bill Via Email</a>\n     */\n    public String deliverBill(\n        String billId,\n        String billToken\n    ) throws BitPayGenericException, BitPayApiException {\n        Facade facade = this.getFacadeBasedOnAccessToken();\n        boolean signRequest = isSignRequest(facade);\n\n        return this.deliverBill(billId, billToken, signRequest);\n    }\n\n    /**\n     * Deliver a BitPay Bill.\n     *\n     * @param billId      The id of the requested bill.\n     * @param billToken   The token of the requested bill.\n     * @param signRequest Allow unsigned request\n     * @return A response status returned from the API.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/deliver-a-bill-via-email\">Deliver a Bill Via Email</a>\n     */\n    public String deliverBill(\n        String billId,\n        String billToken,\n        boolean signRequest\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getBillClient().deliver(billId, billToken, signRequest);\n    }\n\n    /**\n     * Retrieve the rates for a cryptocurrency / fiat pair. See https://bitpay.com/bitcoin-exchange-rates.\n     *\n     * @param baseCurrency the cryptocurrency for which you want to fetch the rates.\n     *                     Current supported values are BTC and BCH.\n     * @param currency the fiat currency for which you want to fetch the baseCurrency rates\n     * @return A Rate object populated with the BitPay exchange rate table.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @since 8.8.0\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-the-rates-for-a-cryptocurrency-fiat-pair\">Retrieve the rates for a cryptocurrency / fiat pair</a>\n     */\n    public Rate getRate(\n        String baseCurrency,\n        String currency\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getRateClient().get(baseCurrency, currency);\n    }\n\n    /**\n     * Retrieve the exchange rate table maintained by BitPay.  See https://bitpay.com/bitcoin-exchange-rates.\n     *\n     * @return A Rates object populated with the BitPay exchange rate table.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     */\n    public Rates getRates() throws BitPayGenericException, BitPayApiException {\n        return this.getRateClient().getRates();\n    }\n\n    /**\n     * Retrieve the exchange rate table maintained by BitPay by baseCurrency. See https://bitpay.com/bitcoin-exchange-rates.\n     *\n     * @param baseCurrency the cryptocurrency for which you want to fetch the rates.\n     *                     Current supported values are BTC and BCH.\n     * @return A Rates object populated with the BitPay exchange rate table.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @since 8.8.0\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-all-the-rates-for-a-given-cryptocurrency\">Retrieve all the rates for a given cryptocurrency</a>\n     */\n    public Rates getRates(String baseCurrency) throws BitPayGenericException, BitPayApiException {\n        return this.getRateClient().getRates(baseCurrency);\n    }\n\n    /**\n     * Retrieve a list of ledgers entries by currency and date range using the merchant facade.\n     *\n     * @param currency  The three digit currency string for the ledger to retrieve.\n     * @param dateStart The first date for the query filter.\n     * @param dateEnd   The last date for the query filter.\n     * @return Ledger entries list.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-ledger-entries\">Retrieve Ledger Entries</a>\n     */\n    public List<LedgerEntry> getLedgerEntries(\n        String currency,\n        String dateStart,\n        String dateEnd\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getLedgerClient().getEntries(currency, dateStart, dateEnd);\n    }\n\n    /**\n     * Retrieve a list of ledgers using the merchant facade.\n     *\n     * @return A list of Ledger objects populated with the currency and current balance of each one.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-account-balances\">Retrieve Account Balances</a>\n     */\n    public List<Ledger> getLedgers() throws BitPayGenericException, BitPayApiException {\n        return this.getLedgerClient().getLedgers();\n    }\n\n    /**\n     * Submit BitPay Payout Recipients.\n     *\n     * @param recipients PayoutRecipients A PayoutRecipients object with request parameters defined.\n     * @return array A list of BitPay PayoutRecipients objects.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/invite-recipients\">Invite Recipients</a>\n     */\n    public List<PayoutRecipient> submitPayoutRecipients(PayoutRecipients recipients)\n        throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutRecipientsClient().submit(recipients);\n    }\n\n    /**\n     * Retrieve a collection of BitPay Payout Recipients.\n     *\n     * @param status String|null The recipient status you want to query on.\n     * @param limit  int Maximum results that the query will return (useful for\n     *               paging results). result).\n     * @param offset int Offset for paging.\n     * @return array A list of BitPayRecipient objects.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-recipients-by-status\">Retrieve Recipients by Status</a>\n     */\n    public List<PayoutRecipient> getPayoutRecipients(\n        String status,\n        Integer limit,\n        Integer offset\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutRecipientsClient().getRecipientsByFilters(status, limit, offset);\n    }\n\n    /**\n     * Retrieve a BitPay payout recipient by batch id using.  The client must have been previously authorized for the\n     * payout facade.\n     *\n     * @param recipientId String The id of the recipient to retrieve.\n     * @return PayoutRecipient A BitPay PayoutRecipient object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-recipient\">Retrieve a Recipient</a>\n     */\n    public PayoutRecipient getPayoutRecipient(String recipientId) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutRecipientsClient().get(recipientId);\n    }\n\n    /**\n     * Update a Payout Recipient.\n     *\n     * @param recipientId String The recipient id for the recipient to be updated.\n     * @param recipient   PayoutRecipients A PayoutRecipient object with updated\n     *                    parameters defined.\n     * @return The updated recipient object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/update-a-recipient\">Update a Recipient</a>\n     */\n    public PayoutRecipient updatePayoutRecipient(\n        String recipientId,\n        PayoutRecipient recipient\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutRecipientsClient().update(recipientId, recipient);\n    }\n\n    /**\n     * Cancel a BitPay Payout recipient.\n     *\n     * @param recipientId String The id of the recipient to cancel.\n     * @return True if the delete operation was successful, false otherwise.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/remove-a-recipient\">Remove a Recipient</a>\n     */\n    public Boolean deletePayoutRecipient(String recipientId) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutRecipientsClient().delete(recipientId);\n    }\n\n    /**\n     * Request a payout recipient notification.\n     *\n     * @param recipientId String A BitPay recipient ID.\n     * @return True if the notification was successfully sent, false otherwise.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/request-a-recipient-webhook-to-be-resent\">Request a Recipient Webhook to be Resent</a>\n     */\n    public Boolean requestPayoutRecipientNotification(String recipientId)\n        throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutRecipientsClient().requestNotification(recipientId);\n    }\n\n    /**\n     * Submit a BitPay Payout.\n     *\n     * @param payout Payout A Payout object with request parameters defined.\n     * @return A BitPay generated Payout object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-a-payout\">Create a Payout</a>\n     */\n    public Payout submitPayout(Payout payout) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutClient().submit(payout);\n    }\n\n    /**\n     * Submit a BitPay Payouts.\n     *\n     * @param payouts Collection of Payout objects with request parameters defined.\n     * @return A BitPay PayoutGroup with generated Payout objects and information's about not created payouts.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-payout-group\">Create a Payouts</a>\n     */\n    public PayoutGroup submitPayouts(Collection<Payout> payouts) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutGroupClient().submit(payouts);\n    }\n\n    /**\n     * Retrieve a BitPay payout by payout id using. The client must have been\n     * previously authorized for the payout facade.\n     *\n     * @param payoutId String The id of the payout to retrieve.\n     * @return A BitPay Payout object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-payout\">Retrieve a Payout</a>\n     */\n    public Payout getPayout(String payoutId) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutClient().get(payoutId);\n    }\n\n    /**\n     * Cancel a BitPay Payout.\n     *\n     * @param payoutId String The id of the payout to cancel.\n     * @return True if the refund was successfully canceled, false otherwise.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-a-payout\">Cancel a Payout</a>\n     */\n    public Boolean cancelPayout(String payoutId) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutClient().cancel(payoutId);\n    }\n\n    /**\n     * Cancel a BitPay Payouts.\n     *\n     * @param groupId String The id of the payout group to cancel.\n     * @return A BitPay PayoutGroup with cancelled Payout objects and information's about not cancelled payouts.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-a-payout-group\">Cancel a Payouts</a>\n     */\n    public PayoutGroup cancelPayouts(String groupId) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutGroupClient().cancel(groupId);\n    }\n\n    /**\n     * Retrieve a collection of BitPay payouts.\n     *\n     * @param startDate String The start date for the query.\n     * @param endDate   String The end date for the query.\n     * @param status    String The status to filter(optional).\n     * @param reference String The optional reference specified at payout request creation.\n     * @param limit     int Maximum results that the query will return (useful for\n     *                  paging results).\n     * @param offset    int Offset for paging.\n     * @param groupId   String The optional group id assigned to payout.\n     * @return A list of BitPay Payout objects.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-payouts-filtered-by-query\">Retrieve Payouts Filtered by Query</a>\n     */\n    public List<Payout> getPayouts(\n        String startDate,\n        String endDate,\n        String status,\n        String reference,\n        Integer limit,\n        Integer offset,\n        String groupId\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutClient().getPayouts(startDate, endDate, status, reference, limit, offset, groupId);\n    }\n\n    /**\n     * Request a payout notification.\n     *\n     * @param payoutId String The id of the payout to notify.\n     * @return True if the notification was successfully sent, false otherwise.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/request-a-payout-webhook-to-be-resent\">Request a Payout Webhook to be Resent</a>\n     */\n    public Boolean requestPayoutNotification(String payoutId) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutClient().requestNotification(payoutId);\n    }\n\n    /**\n     * Retrieves settlement reports for the calling merchant filtered by query.\n     * The `limit` and `offset` parameters\n     * specify pages for large query sets.\n     *\n     * @param currency  The three digit currency string for the ledger to retrieve.\n     * @param dateStart The start date for the query.\n     * @param dateEnd   The end date for the query.\n     * @param status    Can be `processing`, `completed`, or `failed`.\n     * @param limit     Maximum number of settlements to retrieve.\n     * @param offset    Offset for paging.\n     * @return A list of BitPay Settlement objects.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-settlements\">Retrieve Settlements</a>\n     */\n    public List<Settlement> getSettlements(\n        String currency,\n        String dateStart,\n        String dateEnd,\n        String status,\n        Integer limit,\n        Integer offset\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getSettlementClient().getSettlements(currency, dateStart, dateEnd, status, limit, offset);\n    }\n\n    /**\n     * Retrieves a summary of the specified settlement.\n     *\n     * @param settlementId Settlement Id.\n     * @return A BitPay Settlement object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-settlement\">Retrieve a Settlement</a>\n     */\n    public Settlement getSettlement(String settlementId) throws BitPayGenericException, BitPayApiException {\n        return this.getSettlementClient().get(settlementId);\n    }\n\n    /**\n     * Gets a detailed reconciliation report of the activity within the settlement period.\n     * Required id and settlement token.\n     *\n     * @param settlementId Settlement ID.\n     * @param token Settlement token.\n     * @return A detailed BitPay Settlement object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/fetch-a-reconciliation-report\">Fetch a Reconciliation Report</a>\n     */\n    public Settlement getSettlementReconciliationReport(String settlementId, String token)\n        throws BitPayGenericException, BitPayApiException {\n        return this.getSettlementClient().getSettlementReconciliationReport(settlementId, token);\n    }\n\n    /**\n     * Retrieve all supported wallets.\n     *\n     * @return A list of wallet objets.\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-the-supported-wallets\">Retrieve the Supported Wallets</a>\n     */\n    public List<Wallet> getSupportedWallets() throws BitPayGenericException, BitPayApiException {\n        return this.getWalletClient().getSupportedWallets();\n    }\n\n    /**\n     * Gets rates client.\n     *\n     * @return the rates client\n     */\n    public RateClient getRateClient() {\n        return RateClient.getInstance(this.bitPayClient);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Gets http client.\n     *\n     * @param proxyDetails the proxy details\n     * @param proxyCreds   the proxy creds\n     * @return the http client\n     */\n    protected HttpClient getHttpClient(\n        HttpHost proxyDetails,\n        CredentialsProvider proxyCreds\n    ) {\n        if (proxyDetails != null) {\n            if (proxyCreds != null) {\n                return HttpClientBuilder.create().setProxy(proxyDetails).setDefaultCredentialsProvider(\n                    proxyCreds).build();\n            } else {\n                return HttpClientBuilder.create().setProxy(proxyDetails).build();\n            }\n        } else {\n            return HttpClientBuilder.create().build();\n        }\n    }\n\n    /**\n     * Gets ECKey.\n     *\n     * @param privateKey the private key\n     * @return ECKey\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    protected ECKey getEcKey(PrivateKey privateKey) throws BitPayGenericException {\n        File privateKeyFile = new File(privateKey.value());\n        if (privateKeyFile.exists() && KeyUtils.privateKeyExists(privateKey.value().replace(\"\\\"\", \"\"))) {\n            try {\n                return KeyUtils.loadEcKey();\n            } catch (Exception e) {\n                BitPayExceptionProvider.throwGenericExceptionWithMessage(LOAD_PRIVATE_KEY_EXCEPTION + e.getMessage());\n            }\n        } else {\n            try {\n                return KeyUtils.createEcKeyFromHexString(privateKey.value());\n            } catch (Exception e) {\n                BitPayExceptionProvider.throwGenericExceptionWithMessage(\"Private Key file not found\");\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Initialize the public/private key pair by either loading the existing one or by creating a new one.\n     *\n     * @param config the config\n     * @return ECKey\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    protected ECKey getEcKey(Config config) throws BitPayGenericException {\n        try {\n            if (KeyUtils.privateKeyExists(\n                config.getEnvConfig(config.getEnvironment()).path(\"PrivateKeyPath\").toString()\n                    .replace(\"\\\"\", \"\"))) {\n                return KeyUtils.loadEcKey();\n            } else {\n                String keyHex =\n                    config.getEnvConfig(config.getEnvironment()).path(\"PrivateKey\").toString()\n                        .replace(\"\\\"\", \"\");\n                if (!keyHex.isEmpty()) {\n                    return KeyUtils.createEcKeyFromHexString(keyHex);\n                }\n            }\n        } catch (Exception e) {\n            BitPayExceptionProvider.throwGenericExceptionWithMessage(LOAD_PRIVATE_KEY_EXCEPTION + e.getMessage());\n        }\n\n        return null;\n    }\n\n    /**\n     * Derive identity.\n     *\n     * @param ecKey ECKey\n     * @throws IllegalArgumentException the illegal argument exception\n     * @throws BitPayGenericException          BitPayGenericException class\n     */\n    protected void deriveIdentity(ECKey ecKey) throws BitPayGenericException {\n        // Identity in this implementation is defined to be the SIN.\n        try {\n            this.identity = KeyUtils.deriveSin(ecKey);\n        } catch (Exception e) {\n            BitPayExceptionProvider.throwDeserializeResourceException(\"Token array\", e.getMessage());\n        }\n    }\n\n    /**\n     * Gets facade based on access token.\n     *\n     * @return the facade based on access token\n     */\n    protected Facade getFacadeBasedOnAccessToken() {\n        if (this.tokenContainer.tokenExists(Facade.MERCHANT)) {\n            return Facade.MERCHANT;\n        }\n\n        return Facade.POS;\n    }\n\n    /**\n     * Is sign request boolean.\n     *\n     * @param facade the facade\n     * @return the boolean\n     */\n    protected boolean isSignRequest(Facade facade) {\n        return !facade.equals(Facade.POS);\n    }\n\n    /**\n     * Gets base url.\n     *\n     * @param environment the environment\n     * @return the base url\n     */\n    protected String getBaseUrl(Environment environment) {\n        return environment.equals(Environment.TEST) ? Config.TEST_URL : Config.PROD_URL;\n    }\n\n    /**\n     * Loads the configuration file (JSON).\n     *\n     * @param configFilePath the config file path\n     * @return the Config class\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    protected Config buildConfigFromFile(ConfigFilePath configFilePath) throws BitPayGenericException {\n        Config config = null;\n        try {\n            byte[] jsonData = Files.readAllBytes(Paths.get(configFilePath.value()));\n            JsonMapper mapper = JsonMapperFactory.create();\n            //read JSON like DOM Parser\n            JsonNode rootNode = mapper.readTree(jsonData);\n            JsonNode bitPayConfiguration = rootNode.path(\"BitPayConfiguration\");\n            config = mapper.readValue(bitPayConfiguration.toString(), Config.class);\n        } catch (Exception e) {\n            BitPayExceptionProvider.throwGenericExceptionWithMessage(\n                \"Failed to read configuration file : \" + e.getMessage());\n        }\n\n        return config;\n    }\n\n    /**\n     * Create authorization client.\n     *\n     * @return the authorization client\n     */\n    protected AuthorizationClient createAuthorizationClient() {\n        return new AuthorizationClient(this.bitPayClient, this.guidGenerator, this.tokenContainer, this.identity);\n    }\n\n    /**\n     * Get invoice client.\n     *\n     * @return the invoice client\n     */\n    protected InvoiceClient getInvoiceClient() {\n        return InvoiceClient.getInstance(this.bitPayClient, this.tokenContainer, this.guidGenerator);\n    }\n\n    /**\n     * Get refund client.\n     *\n     * @return the refund client\n     */\n    protected RefundClient getRefundClient() {\n        return RefundClient.getInstance(this.bitPayClient, this.tokenContainer, this.guidGenerator);\n    }\n\n    /**\n     * Get bill client.\n     *\n     * @return the bill client\n     */\n    protected BillClient getBillClient() {\n        return BillClient.getInstance(this.bitPayClient, this.tokenContainer);\n    }\n\n    /**\n     * Get ledger client.\n     *\n     * @return the ledger client\n     */\n    protected LedgerClient getLedgerClient() {\n        return LedgerClient.getInstance(this.bitPayClient, this.tokenContainer);\n    }\n\n    /**\n     * Get payout recipients client.\n     *\n     * @return the payout recipients client\n     */\n    protected PayoutRecipientsClient getPayoutRecipientsClient() {\n        return PayoutRecipientsClient.getInstance(this.bitPayClient, this.tokenContainer, this.guidGenerator);\n    }\n\n    /**\n     * Get payout client.\n     *\n     * @return the payout client\n     */\n    protected PayoutClient getPayoutClient() {\n        return PayoutClient.getInstance(this.bitPayClient, this.tokenContainer);\n    }\n\n    protected PayoutGroupClient getPayoutGroupClient() {\n        return PayoutGroupClient.getInstance(this.bitPayClient, this.tokenContainer);\n    }\n\n    /**\n     * Get settlement client.\n     *\n     * @return the settlement client\n     */\n    protected SettlementClient getSettlementClient() {\n        return SettlementClient.getInstance(this.bitPayClient, this.tokenContainer);\n    }\n\n    /**\n     * Get wallet client.\n     *\n     * @return the wallet client\n     */\n    protected WalletClient getWalletClient() {\n        return WalletClient.getInstance(this.bitPayClient);\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport org.bitcoinj.core.ECKey;\n        ECKey ecKey = getEcKey(privateKey);\n        ECKey ecKey = getEcKey(privateKey);\n        ECKey ecKey = this.getEcKey(config);\n        ECKey ecKey = this.getEcKey(config);\n    protected ECKey getEcKey(PrivateKey privateKey) throws BitPayGenericException {\n    protected ECKey getEcKey(Config config) throws BitPayGenericException {\n    protected void deriveIdentity(ECKey ecKey) throws BitPayGenericException {\nwith the following error message:\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[57,25] cannot find symbol  symbol:   class ECKey\n  location: package org.bitcoinj.core\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[169,9] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[200,9] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[228,9] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[261,9] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[1482,15] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[1508,15] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[1536,35] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.bitcoinj.wallet.BasicKeyChain.toString | DELETION | METHOD_REMOVED\njava.lang.Object.hashCode | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.verify | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.store.BlockStore.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.findRecoveryId | DELETION | METHOD_REMOVED\norg.bitcoinj.core.FeeFilterMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.PUBKEY_COMPARATOR | MUTATION | FIELD_TYPE_CHANGED\norg.bitcoinj.core.ECKey.doSign | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.Wallet.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.fromPublicOnly | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.fromASN1 | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.BitcoinSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.verifyOrThrow | DELETION | METHOD_REMOVED\norg.bitcoinj.core.BlockLocator.get | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.TransactionInput.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.DefaultCoinSelector.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.SendHeadersMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.protocols.payments.PaymentSession.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.VersionAck.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.creationTimeSeconds | DELETION | FIELD_REMOVED\norg.bitcoinj.core.BlockLocator.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Context.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.getClass | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.signedMessageToKey | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.TransactionOutPoint.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.GetDataMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.InventoryMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.FullPrunedBlockChain.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.getEncryptionType | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.wallet.RedeemData.of | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey$ECDSASignature.decodeFromDER | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\njava.lang.Object.clone | DELETION | METHOD_REMOVED\njava.lang.Object.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.utils.ExchangeRate.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.encryptionIsReversible | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.AllowUnconfirmedCoinSelector.get | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.ECKey.verifyOrThrow | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.store.MemoryFullPrunedBlockStore.get | DELETION | METHOD_REMOVED\norg.bitcoinj.store.MemoryBlockStore.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey$MissingPrivateKeyException | DELETION | TYPE_REMOVED\norg.bitcoinj.core.TransactionConfidence.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Base58 | DELETION | TYPE_REMOVED\norg.bitcoinj.core.Message.length | DELETION | FIELD_REMOVED\norg.bitcoinj.core.VersionMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.CheckpointManager.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.NotFoundMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.crypto.TransactionSignature.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.net.NioClient.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.TransactionWitness.toString | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.net.BlockingClient.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.UnknownMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.fromEncrypted | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.ECKey.fromPrivate | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.ECKey.decompressPoint | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.KeyChainGroup.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.core.GetHeadersMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.compressPoint | DELETION | METHOD_REMOVED\norg.bitcoinj.utils.ExponentialBackoff$Params.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Sha256Hash | DELETION | TYPE_REMOVED\norg.bitcoinj.wallet.Wallet.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.FilteringCoinSelector.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.getPrivateKeyEncoded | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.protocols.payments.PaymentProtocol$Output.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.wait | DELETION | METHOD_REMOVED\norg.bitcoinj.core.HeadersMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Block.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.AbstractBlockChain.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.PrunedException.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.fromPublicOnly | MUTATION | METHOD_RETURN_TYPE_CHANGED\njava.lang.Object.notify | DELETION | METHOD_REMOVED\njava.lang.Object.finalize | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.FAKE_SIGNATURES | DELETION | FIELD_REMOVED\norg.bitcoinj.core.ECKey$ECDSASignature | DELETION | TYPE_REMOVED\norg.bitcoinj.core.GetBlocksMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.notifyAll | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.AGE_COMPARATOR | MUTATION | FIELD_TYPE_CHANGED\norg.bitcoinj.core.PeerAddress.toString | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.core.ECKey.fromPrivateAndPrecalculatedPublic | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.InventoryItem.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.store.MemoryBlockStore.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.GetAddrMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.maybeDecrypt | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ListMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.kits.WalletAppKit.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Transaction.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.signMessage | DELETION | METHOD_REMOVED\norg.bitcoinj.core.TransactionWitness.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.InsufficientMoneyException.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.toStringWithPrivate | DELETION | METHOD_REMOVED\norg.bitcoinj.core.SendAddrV2Message.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.uri.BitcoinURI.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.RejectMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.NetworkParameters.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey$ECDSASignature.decodeFromDER | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.core.UTXO.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.verify | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.verifyOrThrow | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.core.BloomFilter.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.DeterministicSeed.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.crypto.DeterministicKey.sign | DELETION | METHOD_REMOVED\norg.bitcoinj.signers.CustomTransactionSigner$SignatureAndKey.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.store.SPVBlockStore.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.Transaction.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.core.BlockChain.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.EmptyMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey$ECDSASignature.decodeFromDER | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.TransactionOutputChanges.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.FeeFilterMessage.toString | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.core.ECKey.CURVE | DELETION | FIELD_REMOVED\norg.bitcoinj.core.Ping.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Pong.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.PeerGroup.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.FilteredBlock.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.StoredUndoableBlock.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.verify | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.core.ECKey.recoverFromSignature | DELETION | METHOD_REMOVED\norg.bitcoinj.core.TransactionOutput.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.decompress | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.wallet.DecryptingKeyBag.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.utils.BlockFileLoader.next | DELETION | METHOD_REMOVED\norg.bitcoinj.core.PeerAddress.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.HALF_CURVE_ORDER | DELETION | FIELD_REMOVED\norg.bitcoinj.core.TxConfidenceTable.get | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.RedeemData.of | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\norg.bitcoinj.wallet.Wallet$CouldNotAdjustDownwards.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.DeterministicSeed.<init> | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.wallet.DeterministicKeyChain.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.DeterministicKeyChain.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.equals | DELETION | METHOD_REMOVED\norg.bitcoinj.core.PartialMerkleTree.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey | DELETION | TYPE_REMOVED\norg.bitcoinj.crypto.KeyCrypterScrypt.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.CoinSelection.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey$KeyIsEncryptedException | DELETION | TYPE_REMOVED\norg.bitcoinj.core.PeerAddress.equals | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.core.ECKey.sign | DELETION | METHOD_REMOVED\norg.bitcoinj.core.TransactionWitness.equals | MUTATION | METHOD_NOW_FINAL\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import org.bitcoinj.core.ECKey;\n        ECKey ecKey = getEcKey(privateKey);\n        ECKey ecKey = getEcKey(privateKey);\n        ECKey ecKey = this.getEcKey(config);\n        ECKey ecKey = this.getEcKey(config);\n    protected ECKey getEcKey(PrivateKey privateKey) throws BitPayGenericException {\n    protected ECKey getEcKey(Config config) throws BitPayGenericException {\n    protected void deriveIdentity(ECKey ecKey) throws BitPayGenericException {",
    "error_message": "[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[57,25] cannot find symbol  symbol:   class ECKey\n  location: package org.bitcoinj.core\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[169,9] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[200,9] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[228,9] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[261,9] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[1482,15] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[1508,15] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client\n[ERROR] /java-bitpay-client/src/main/java/com/bitpay/sdk/Client.java:[1536,35] cannot find symbol  symbol:   class ECKey\n  location: class com.bitpay.sdk.Client",
    "api_diff": "Format: element | nature | kind\norg.bitcoinj.wallet.BasicKeyChain.toString | DELETION | METHOD_REMOVED\njava.lang.Object.hashCode | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.verify | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.store.BlockStore.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.findRecoveryId | DELETION | METHOD_REMOVED\norg.bitcoinj.core.FeeFilterMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.PUBKEY_COMPARATOR | MUTATION | FIELD_TYPE_CHANGED\norg.bitcoinj.core.ECKey.doSign | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.Wallet.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.fromPublicOnly | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.fromASN1 | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.BitcoinSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.verifyOrThrow | DELETION | METHOD_REMOVED\norg.bitcoinj.core.BlockLocator.get | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.TransactionInput.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.DefaultCoinSelector.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.SendHeadersMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.protocols.payments.PaymentSession.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.VersionAck.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.creationTimeSeconds | DELETION | FIELD_REMOVED\norg.bitcoinj.core.BlockLocator.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Context.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.getClass | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.signedMessageToKey | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.TransactionOutPoint.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.GetDataMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.InventoryMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.FullPrunedBlockChain.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.getEncryptionType | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.wallet.RedeemData.of | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey$ECDSASignature.decodeFromDER | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\njava.lang.Object.clone | DELETION | METHOD_REMOVED\njava.lang.Object.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.utils.ExchangeRate.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.encryptionIsReversible | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.AllowUnconfirmedCoinSelector.get | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.ECKey.verifyOrThrow | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.store.MemoryFullPrunedBlockStore.get | DELETION | METHOD_REMOVED\norg.bitcoinj.store.MemoryBlockStore.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey$MissingPrivateKeyException | DELETION | TYPE_REMOVED\norg.bitcoinj.core.TransactionConfidence.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Base58 | DELETION | TYPE_REMOVED\norg.bitcoinj.core.Message.length | DELETION | FIELD_REMOVED\norg.bitcoinj.core.VersionMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.CheckpointManager.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.NotFoundMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.crypto.TransactionSignature.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.net.NioClient.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.TransactionWitness.toString | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.net.BlockingClient.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.UnknownMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.fromEncrypted | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.ECKey.fromPrivate | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.ECKey.decompressPoint | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.KeyChainGroup.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.core.GetHeadersMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.compressPoint | DELETION | METHOD_REMOVED\norg.bitcoinj.utils.ExponentialBackoff$Params.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Sha256Hash | DELETION | TYPE_REMOVED\norg.bitcoinj.wallet.Wallet.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.FilteringCoinSelector.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.getPrivateKeyEncoded | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.protocols.payments.PaymentProtocol$Output.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.wait | DELETION | METHOD_REMOVED\norg.bitcoinj.core.HeadersMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Block.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.AbstractBlockChain.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.PrunedException.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.fromPublicOnly | MUTATION | METHOD_RETURN_TYPE_CHANGED\njava.lang.Object.notify | DELETION | METHOD_REMOVED\njava.lang.Object.finalize | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.FAKE_SIGNATURES | DELETION | FIELD_REMOVED\norg.bitcoinj.core.ECKey$ECDSASignature | DELETION | TYPE_REMOVED\norg.bitcoinj.core.GetBlocksMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.notifyAll | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.AGE_COMPARATOR | MUTATION | FIELD_TYPE_CHANGED\norg.bitcoinj.core.PeerAddress.toString | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.core.ECKey.fromPrivateAndPrecalculatedPublic | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.InventoryItem.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.store.MemoryBlockStore.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.GetAddrMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.maybeDecrypt | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ListMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.kits.WalletAppKit.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Transaction.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.signMessage | DELETION | METHOD_REMOVED\norg.bitcoinj.core.TransactionWitness.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.InsufficientMoneyException.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.toStringWithPrivate | DELETION | METHOD_REMOVED\norg.bitcoinj.core.SendAddrV2Message.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.uri.BitcoinURI.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.RejectMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.NetworkParameters.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey$ECDSASignature.decodeFromDER | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.core.UTXO.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.verify | DELETION | METHOD_REMOVED\norg.bitcoinj.core.ECKey.verifyOrThrow | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.core.BloomFilter.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.DeterministicSeed.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.crypto.DeterministicKey.sign | DELETION | METHOD_REMOVED\norg.bitcoinj.signers.CustomTransactionSigner$SignatureAndKey.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.store.SPVBlockStore.get | DELETION | METHOD_REMOVED\norg.bitcoinj.core.Transaction.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.core.BlockChain.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.EmptyMessage.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey$ECDSASignature.decodeFromDER | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.core.TransactionOutputChanges.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.FeeFilterMessage.toString | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.core.ECKey.CURVE | DELETION | FIELD_REMOVED\norg.bitcoinj.core.Ping.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.Pong.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.PeerGroup.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.FilteredBlock.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.StoredUndoableBlock.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.verify | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.core.ECKey.recoverFromSignature | DELETION | METHOD_REMOVED\norg.bitcoinj.core.TransactionOutput.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.decompress | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.bitcoinj.wallet.DecryptingKeyBag.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.utils.BlockFileLoader.next | DELETION | METHOD_REMOVED\norg.bitcoinj.core.PeerAddress.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey.HALF_CURVE_ORDER | DELETION | FIELD_REMOVED\norg.bitcoinj.core.TxConfidenceTable.get | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.RedeemData.of | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\norg.bitcoinj.wallet.Wallet$CouldNotAdjustDownwards.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.DeterministicSeed.<init> | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\norg.bitcoinj.wallet.DeterministicKeyChain.toString | DELETION | METHOD_REMOVED\norg.bitcoinj.wallet.DeterministicKeyChain.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.lang.Object.equals | DELETION | METHOD_REMOVED\norg.bitcoinj.core.PartialMerkleTree.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey | DELETION | TYPE_REMOVED\norg.bitcoinj.crypto.KeyCrypterScrypt.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.wallet.CoinSelection.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.bitcoinj.core.ECKey$KeyIsEncryptedException | DELETION | TYPE_REMOVED\norg.bitcoinj.core.PeerAddress.equals | MUTATION | METHOD_NOW_FINAL\norg.bitcoinj.core.ECKey.sign | DELETION | METHOD_REMOVED\norg.bitcoinj.core.TransactionWitness.equals | MUTATION | METHOD_NOW_FINAL",
    "original_code": "/*\n * Copyright (c) 2019 BitPay.\n * All rights reserved.\n */\n\npackage com.bitpay.sdk;\n\nimport com.bitpay.sdk.client.AuthorizationClient;\nimport com.bitpay.sdk.client.BillClient;\nimport com.bitpay.sdk.client.BitPayClient;\nimport com.bitpay.sdk.client.CurrencyClient;\nimport com.bitpay.sdk.client.HttpRequestFactory;\nimport com.bitpay.sdk.client.InvoiceClient;\nimport com.bitpay.sdk.client.LedgerClient;\nimport com.bitpay.sdk.client.PayoutClient;\nimport com.bitpay.sdk.client.PayoutGroupClient;\nimport com.bitpay.sdk.client.PayoutRecipientsClient;\nimport com.bitpay.sdk.client.RateClient;\nimport com.bitpay.sdk.client.RefundClient;\nimport com.bitpay.sdk.client.SettlementClient;\nimport com.bitpay.sdk.client.WalletClient;\nimport com.bitpay.sdk.exceptions.BitPayApiException;\nimport com.bitpay.sdk.exceptions.BitPayExceptionProvider;\nimport com.bitpay.sdk.exceptions.BitPayGenericException;\nimport com.bitpay.sdk.model.Facade;\nimport com.bitpay.sdk.model.bill.Bill;\nimport com.bitpay.sdk.model.invoice.Invoice;\nimport com.bitpay.sdk.model.invoice.InvoiceEventToken;\nimport com.bitpay.sdk.model.invoice.Refund;\nimport com.bitpay.sdk.model.ledger.Ledger;\nimport com.bitpay.sdk.model.ledger.LedgerEntry;\nimport com.bitpay.sdk.model.payout.Payout;\nimport com.bitpay.sdk.model.payout.PayoutGroup;\nimport com.bitpay.sdk.model.payout.PayoutRecipient;\nimport com.bitpay.sdk.model.payout.PayoutRecipients;\nimport com.bitpay.sdk.model.rate.Rate;\nimport com.bitpay.sdk.model.rate.Rates;\nimport com.bitpay.sdk.model.settlement.Settlement;\nimport com.bitpay.sdk.model.wallet.Wallet;\nimport com.bitpay.sdk.util.GuidGenerator;\nimport com.bitpay.sdk.util.JsonMapperFactory;\nimport com.bitpay.sdk.util.KeyUtils;\nimport com.bitpay.sdk.util.TokenContainer;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport org.apache.http.HttpHost;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.bitcoinj.core.ECKey;\n\n/**\n * The type Client.\n */\npublic class Client {\n\n    protected static final String LOAD_PRIVATE_KEY_EXCEPTION =\n        \"When trying to load private key. Make sure the configuration details are correct \"\n            + \"and the private key and tokens are valid : \";\n    protected GuidGenerator guidGenerator;\n    protected BitPayClient bitPayClient;\n    protected TokenContainer tokenContainer;\n\n    /**\n     * Return the identity of this client (i.e. the public key).\n     */\n    private String identity;\n\n    /**\n     * Constructor for POS facade.\n     *\n     * @param token POS token\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(PosToken token) throws BitPayGenericException {\n        this(token, Environment.PROD);\n    }\n\n    /**\n     * Constructor for POS facade.\n     *\n     * @param token        POS token\n     * @param platformInfo Platform info\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(PosToken token, String platformInfo) throws BitPayGenericException {\n        this(token, Environment.PROD, platformInfo);\n    }\n\n    /**\n     * Constructor for POS facade.\n     *\n     * @param token       POS token\n     * @param environment Environment\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(\n        PosToken token,\n        Environment environment\n    ) throws BitPayGenericException {\n        if (Objects.isNull(token) || Objects.isNull(environment)) {\n            BitPayExceptionProvider.throwMissingParameterException();\n        }\n\n        this.tokenContainer = new TokenContainer();\n        this.tokenContainer.addPos(token.value());\n        this.bitPayClient = new BitPayClient(\n            getHttpClient(null, null),\n            new HttpRequestFactory(),\n            getBaseUrl(environment),\n            null\n        );\n        this.guidGenerator = new GuidGenerator();\n    }\n\n    /**\n     * Constructor for POS facade.\n     *\n     * @param token        POS token\n     * @param environment  Environment\n     * @param platformInfo Platform info\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(\n        PosToken token,\n        Environment environment,\n        String platformInfo\n    ) throws BitPayGenericException {\n        if (Objects.isNull(token) || Objects.isNull(environment)) {\n            BitPayExceptionProvider.throwMissingParameterException();\n        }\n\n        this.tokenContainer = new TokenContainer();\n        this.tokenContainer.addPos(token.value());\n        this.bitPayClient = new BitPayClient(\n            getHttpClient(null, null),\n            new HttpRequestFactory(),\n            getBaseUrl(environment),\n            null,\n            platformInfo\n        );\n        this.guidGenerator = new GuidGenerator();\n    }\n\n    /**\n     * Constructor for use if the keys and SIN are managed by this library.\n     *\n     * @param environment      Target environment. Options: Env.Test / Env.Prod\n     * @param privateKey       The full path to the securely located private key or the HEX key value.\n     * @param tokenContainer   Object containing the available tokens.\n     * @param proxyDetails     HttpHost Optional Proxy setting (set to NULL to ignore)\n     * @param proxyCredentials CredentialsProvider Optional Proxy Basic Auth Credentials (set to NULL to ignore)\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(\n        Environment environment,\n        PrivateKey privateKey,\n        TokenContainer tokenContainer,\n        HttpHost proxyDetails,\n        CredentialsProvider proxyCredentials\n    ) throws BitPayGenericException {\n        ECKey ecKey = getEcKey(privateKey);\n        this.tokenContainer = tokenContainer;\n        this.deriveIdentity(ecKey);\n        this.bitPayClient = new BitPayClient(\n            getHttpClient(proxyDetails, proxyCredentials),\n            new HttpRequestFactory(),\n            getBaseUrl(environment),\n            ecKey\n        );\n        this.guidGenerator = new GuidGenerator();\n    }\n\n    /**\n     * Constructor for use if the keys and SIN are managed by this library.\n     *\n     * @param environment      Target environment. Options: Env.Test / Env.Prod\n     * @param privateKey       The full path to the securely located private key or the HEX key value.\n     * @param tokenContainer   Object containing the available tokens.\n     * @param proxyDetails     HttpHost Optional Proxy setting (set to NULL to ignore)\n     * @param proxyCredentials CredentialsProvider Optional Proxy Basic Auth Credentials (set to NULL to ignore)\n     * @param platformInfo     Platform Info\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(\n        Environment environment,\n        PrivateKey privateKey,\n        TokenContainer tokenContainer,\n        HttpHost proxyDetails,\n        CredentialsProvider proxyCredentials,\n        String platformInfo\n    ) throws BitPayGenericException {\n        ECKey ecKey = getEcKey(privateKey);\n        this.tokenContainer = tokenContainer;\n        this.deriveIdentity(ecKey);\n        this.bitPayClient = new BitPayClient(\n            getHttpClient(proxyDetails, proxyCredentials),\n            new HttpRequestFactory(),\n            getBaseUrl(environment),\n            ecKey,\n            platformInfo\n        );\n        this.guidGenerator = new GuidGenerator();\n    }\n\n    /**\n     * Constructor for use if the keys and SIN are managed by this library.\n     *\n     * @param configFilePath   The path to the configuration file.\n     * @param proxy            HttpHost Optional Proxy setting (set to NULL to ignore)\n     * @param proxyCredentials CredentialsProvider Optional Proxy Basic Auth Credentials (set to NULL to ignore)\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(\n        ConfigFilePath configFilePath,\n        HttpHost proxy,\n        CredentialsProvider proxyCredentials\n    ) throws BitPayGenericException {\n        Config config = this.buildConfigFromFile(configFilePath);\n        this.tokenContainer = new TokenContainer(config);\n        ECKey ecKey = this.getEcKey(config);\n        if (Objects.isNull(ecKey)) {\n            BitPayExceptionProvider.throwValidationException(\"Missing ECKey\");\n        }\n\n        this.deriveIdentity(ecKey);\n        this.bitPayClient = new BitPayClient(\n            getHttpClient(proxy, proxyCredentials),\n            new HttpRequestFactory(),\n            getBaseUrl(config.getEnvironment()),\n            ecKey\n        );\n        this.guidGenerator = new GuidGenerator();\n    }\n\n\n    /**\n     * Constructor for use if the keys and SIN are managed by this library.\n     *\n     * @param configFilePath   The path to the configuration file.\n     * @param proxy            HttpHost Optional Proxy setting (set to NULL to ignore)\n     * @param proxyCredentials CredentialsProvider Optional Proxy Basic Auth Credentials (set to NULL to ignore)\n     * @param platformInfo     Platform Info\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Client(\n        ConfigFilePath configFilePath,\n        HttpHost proxy,\n        CredentialsProvider proxyCredentials,\n        String platformInfo\n    ) throws BitPayGenericException {\n        Config config = this.buildConfigFromFile(configFilePath);\n        this.tokenContainer = new TokenContainer(config);\n        ECKey ecKey = this.getEcKey(config);\n        if (Objects.isNull(ecKey)) {\n            BitPayExceptionProvider.throwValidationException(\"Missing ECKey\");\n        }\n\n        this.deriveIdentity(ecKey);\n        this.bitPayClient = new BitPayClient(\n            getHttpClient(proxy, proxyCredentials),\n            new HttpRequestFactory(),\n            getBaseUrl(config.getEnvironment()),\n            ecKey,\n            platformInfo\n        );\n        this.guidGenerator = new GuidGenerator();\n    }\n\n    /**\n     * Constructor for all injected classes.\n     *\n     * @param bitPayClient   BitPayClient\n     * @param identity       Identity\n     * @param tokenContainer TokenContainer\n     * @param guidGenerator  GuidGenerator\n     */\n    public Client(\n        BitPayClient bitPayClient,\n        String identity,\n        TokenContainer tokenContainer,\n        GuidGenerator guidGenerator\n    ) {\n        this.bitPayClient = bitPayClient;\n        this.identity = identity;\n        this.tokenContainer = tokenContainer;\n        this.guidGenerator = guidGenerator;\n    }\n\n    /**\n     * Create pos (light) client.\n     *\n     * @param token the token\n     * @return the client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createPosClient(PosToken token) throws BitPayGenericException {\n        return new Client(token);\n    }\n\n    /**\n     * Create pos (light) client.\n     *\n     * @param token the token\n     * @param platformInfo the platform info\n     * @return the client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createPosClient(PosToken token, String platformInfo) throws BitPayGenericException {\n        return new Client(token, platformInfo);\n    }\n\n    /**\n     * Create pos (light) client.\n     *\n     * @param token the token\n     * @param environment environment\n     * @return the client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createPosClient(\n        PosToken token,\n        Environment environment\n    ) throws BitPayGenericException {\n        return new Client(token, environment);\n    }\n\n    /**\n     * Create pos (light) client.\n     *\n     * @param token the token\n     * @param environment environment\n     * @param platformInfo the platform info\n     * @return the client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createPosClient(\n        PosToken token,\n        Environment environment,\n        String platformInfo\n    ) throws BitPayGenericException {\n        return new Client(token, environment, platformInfo);\n    }\n\n    /**\n     * Create standard client.\n     *\n     * @param privateKey the private key\n     * @param tokenContainer the token container\n     * @param environment environment\n     * @return Client Client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createClientByPrivateKey(\n        PrivateKey privateKey,\n        TokenContainer tokenContainer,\n        Environment environment\n    ) throws BitPayGenericException {\n        Environment env = Objects.isNull(environment) ? Environment.PROD : environment;\n\n        return new Client(env, privateKey, tokenContainer, null, null);\n    }\n\n    /**\n     * Create standard client.\n     *\n     * @param privateKey the private key\n     * @param tokenContainer the token container\n     * @param environment environment\n     * @param platformInfo the platform info\n     * @return Client Client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createClientByPrivateKey(\n        PrivateKey privateKey,\n        TokenContainer tokenContainer,\n        Environment environment,\n        String platformInfo\n    ) throws BitPayGenericException {\n        Environment env = Objects.isNull(environment) ? Environment.PROD : environment;\n\n        return new Client(env, privateKey, tokenContainer, null, null, platformInfo);\n    }\n\n    /**\n     * Create standard client.\n     *\n     * @param configFilePath the config file path\n     * @return the client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createClientByConfigFilePath(ConfigFilePath configFilePath) throws BitPayGenericException {\n        return new Client(configFilePath, null, null);\n    }\n\n    /**\n     * Create standard client.\n     *\n     * @param configFilePath the config file path\n     * @param platformInfo the platform info\n     * @return the client\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public static Client createClientByConfigFilePath(\n        ConfigFilePath configFilePath,\n        String platformInfo\n    ) throws BitPayGenericException {\n        return new Client(configFilePath, null, null, platformInfo);\n    }\n\n\n    /**\n     * Authorize this client with the server using the specified pairing code (Server Initiated Pairing).\n     *\n     * @param pairingCode A code obtained from the server; typically from bitpay.com/api-tokens.\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/get-token\">Request an API Token</a>\n     */\n    public void authorizeClient(String pairingCode) throws BitPayApiException, BitPayGenericException {\n        this.createAuthorizationClient().authorizeClient(pairingCode);\n    }\n\n    /**\n     * Request a pairing code from the BitPay server (Client Initiated Pairing).\n     *\n     * @param facade Defines the level of API access being requested\n     * @return A pairing code for claim at https://bitpay.com/dashboard/merchant/api-tokens.\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/get-token\">Request an API Token</a>\n     */\n    public String authorizeClient(Facade facade) throws BitPayApiException, BitPayGenericException {\n        return this.createAuthorizationClient().authorizeClient(facade);\n    }\n\n    /**\n     * Retrieve a token associated with a known resource. The token is used to access other related resources.\n     *\n     * @param facade The identifier for the desired resource.\n     * @return The token associated with resource.\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public String getAccessToken(Facade facade) throws BitPayGenericException {\n        return this.tokenContainer.getAccessToken(facade);\n    }\n\n    /**\n     * Retrieve a token associated with a known resource. The token is used to access other related resources.\n     *\n     * @param key The identifier for the desired resource.\n     * @return The token associated with resource.\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public String getAccessToken(String key) throws BitPayGenericException {\n        return this.tokenContainer.getAccessToken(key);\n    }\n\n    /**\n     * Gets info for specific currency.\n     *\n     * @param currencyCode String Currency code for which the info will be retrieved.\n     * @return Map|null\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    public Map<String, Object> getCurrencyInfo(String currencyCode) throws BitPayGenericException {\n        CurrencyClient client = CurrencyClient.getInstance(this.bitPayClient);\n        return client.getInfo(currencyCode);\n    }\n\n    /**\n     * Create a BitPay invoice.\n     *\n     * @param invoice An Invoice object with request parameters defined.\n     * @return A BitPay generated Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-an-invoice\">Create an Invoice</a>\n     */\n    public Invoice createInvoice(Invoice invoice) throws BitPayGenericException, BitPayApiException {\n        InvoiceClient client = getInvoiceClient();\n        Facade facade = getFacadeBasedOnAccessToken();\n        boolean signRequest = isSignRequest(facade);\n\n        return client.create(invoice, facade, signRequest);\n    }\n\n    /**\n     * Create a BitPay invoice.\n     *\n     * @param invoice An Invoice object with request parameters defined.\n     * @param facade The facade used to create it.\n     * @param signRequest Signed request.\n     * @return A BitPay generated Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-an-invoice\">Create an Invoice</a>\n     */\n    public Invoice createInvoice(\n        Invoice invoice,\n        Facade facade,\n        boolean signRequest\n    ) throws BitPayGenericException, BitPayApiException {\n        InvoiceClient client = getInvoiceClient();\n\n        return client.create(invoice, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a BitPay invoice by invoice id using the public facade.\n     *\n     * @param invoiceId The id of the invoice to retrieve.\n     * @return A BitPay Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-an-invoice\">Retrieve an Invoice</a>\n     */\n    public Invoice getInvoice(String invoiceId) throws BitPayGenericException, BitPayApiException {\n        Facade facade = getFacadeBasedOnAccessToken();\n        boolean signRequest = isSignRequest(facade);\n\n        return this.getInvoiceClient().get(invoiceId, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a BitPay invoice by invoice id.\n     *\n     * @param invoiceId The id of the invoice to retrieve.\n     * @param facade The facade used to create it.\n     * @param signRequest Signed request.\n     * @return A BitPay Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-an-invoice\">Retrieve an Invoice</a>\n     */\n    public Invoice getInvoice(\n        String invoiceId,\n        Facade facade,\n        boolean signRequest\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().get(invoiceId, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a BitPay invoice by guid using the specified facade.\n     * The client must have been previously authorized for the specified facade.\n     *\n     * @param guid The guid of the invoice to retrieve.\n     * @return A BitPay Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-an-invoice-by-guid\">Retrieve an Invoice by GUID</a>\n     */\n    public Invoice getInvoiceByGuid(String guid) throws BitPayGenericException, BitPayApiException {\n        Facade facade = getFacadeBasedOnAccessToken();\n        boolean signRequest = isSignRequest(facade);\n        return this.getInvoiceClient().getByGuid(guid, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a BitPay invoice by guid using the specified facade.\n     * The client must have been previously authorized for the specified facade.\n     *\n     * @param guid        The guid of the invoice to retrieve.\n     * @param facade      The facade used to create it.\n     * @param signRequest Signed request.\n     * @return A BitPay Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-an-invoice-by-guid\">Retrieve an Invoice by GUID</a>\n     */\n    public Invoice getInvoiceByGuid(\n        String guid,\n        Facade facade,\n        Boolean signRequest\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().getByGuid(guid, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a collection of BitPay invoices.\n     *\n     * @param dateStart The first date for the query filter.\n     * @param dateEnd   The last date for the query filter.\n     * @param status    The invoice status you want to query on.\n     * @param orderId   The optional order id specified at time of invoice creation.\n     * @param limit     Maximum results that the query will return (useful for paging results).\n     * @param offset    Number of results to offset (ex. skip 10 will give you results starting with the 11th\n     * @return A list of BitPay Invoice objects.\n     * @throws BitPayGenericException       BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-invoices-filtered-by-query\">Retrieve Invoices Filtered by Query</a>\n     */\n    public List<Invoice> getInvoices(\n        String dateStart,\n        String dateEnd,\n        String status,\n        String orderId,\n        Integer limit,\n        Integer offset\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().getInvoices(dateStart, dateEnd, status, orderId, limit, offset);\n    }\n\n    /**\n     * Retrieves a bus token which can be used to subscribe to invoice events.\n     *\n     * @param invoiceId the id of the invoice for which you want to fetch an event token.\n     * @return InvoiceEventToken event token\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @since 8.8.0\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-an-event-token\">Retrieve an Event Token</a>\n     */\n    public InvoiceEventToken getInvoiceEventToken(String invoiceId) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().getInvoiceEventToken(invoiceId);\n    }\n\n    /**\n     * Update a BitPay invoice with communication method.\n     *\n     * @param invoiceId  The id of the invoice to updated.\n     * @param buyerSms   The buyer's cell number.\n     * @param smsCode    The buyer's received verification code.\n     * @param buyerEmail The buyer's email address.\n     * @param autoVerify Skip the user verification on sandbox ONLY.\n     * @return A BitPay generated Invoice object.\n     * @throws BitPayGenericException        BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/update-an-invoice\">Update an Invoice</a>\n     */\n    public Invoice updateInvoice(\n        String invoiceId,\n        String buyerSms,\n        String smsCode,\n        String buyerEmail,\n        Boolean autoVerify\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().update(invoiceId, buyerSms, smsCode, buyerEmail, autoVerify);\n    }\n\n    /**\n     * Pay a BitPay invoice with a mock transaction. Available only on test env.\n     *\n     * @param invoiceId The id of the invoice to updated.\n     * @param status    The status of the invoice to be updated, can be \"confirmed\" or \"complete\".\n     * @return A BitPay generated Invoice object.\n     * @throws BitPayGenericException        BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     */\n    public Invoice payInvoice(\n        String invoiceId,\n        String status\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().pay(invoiceId, status);\n    }\n\n    /**\n     * Delete a previously created BitPay invoice.\n     *\n     * @param invoiceId The Id of the BitPay invoice to be canceled.\n     * @return A BitPay generated Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException              BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-an-invoice\">Cancel an Invoice</a>\n     */\n    public Invoice cancelInvoice(String invoiceId) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().cancel(invoiceId);\n    }\n\n    /**\n     * Cancellation will require EITHER an SMS or E-mail to have already been set if the invoice has proceeded to\n     * the point where it may have been paid, unless using forceCancel parameter.\n     *\n     * @param invoiceId   The Id of the BitPay invoice to be canceled.\n     * @param forceCancel If 'true' it will cancel the invoice even if no contact information is present.\n     * @return A BitPay generated Invoice object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException              BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-an-invoice\">Cancel an Invoice</a>\n     */\n    public Invoice cancelInvoice(\n        String invoiceId,\n        Boolean forceCancel\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getInvoiceClient().cancel(invoiceId, forceCancel);\n    }\n\n    /**\n     * Cancellation will require EITHER an SMS or E-mail to have already been set if the invoice has proceeded to\n     * the point where it may have been paid, unless using forceCancel parameter.\n     *\n     * @param guid GUID A passthru variable provided by the merchant and designed to be used by the merchant to\n     *             correlate the invoice with an order ID in their system, which can be used as a lookup variable\n     *             in Retrieve Invoice by GUID.\n     * @return Invoice Invoice\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-an-invoice-by-guid\">Cancel an Invoice by GUID</a>\n     */\n    public Invoice cancelInvoiceByGuid(String guid) throws BitPayApiException, BitPayGenericException {\n        return this.getInvoiceClient().cancelByGuid(guid, false);\n    }\n\n    /**\n     * Cancellation will require EITHER an SMS or E-mail to have already been set if the invoice has proceeded to\n     * the point where it may have been paid, unless using forceCancel parameter.\n     *\n     * @param guid GUID A passthru variable provided by the merchant and designed to be used by the merchant to\n     *             correlate the invoice with an order ID in their system, which can be used as a lookup variable\n     *             in Retrieve Invoice by GUID.\n     * @param forceCancel Parameter that will cancel the invoice even if no contact information is present.\n     *                    Note: Canceling a paid invoice without contact information requires a manual support\n     *                    process and is not recommended.\n     * @return Invoice Invoice\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-an-invoice-by-guid\">Cancel an Invoice by GUID</a>\n     */\n    public Invoice cancelInvoiceByGuid(\n        String guid,\n        Boolean forceCancel\n    ) throws BitPayApiException, BitPayGenericException {\n        return this.getInvoiceClient().cancelByGuid(guid, forceCancel);\n    }\n\n    /**\n     * The intent of this call is to address issues when BitPay sends a webhook but the client doesn't receive it,\n     * so the client can request that BitPay resend it.\n     *\n     * @param invoiceId The id of the invoice for which you want the last webhook to be resent.\n     * @return Boolean status of request\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/request-an-invoice-webhook-to-be-resent\">Request an Invoice Webhook to be Resent</a>\n     */\n    public Boolean requestInvoiceWebhookToBeResent(String invoiceId) throws BitPayApiException, BitPayGenericException {\n        return this.getInvoiceClient().requestInvoiceWebhookToBeResent(invoiceId);\n    }\n\n    /**\n     * Create a refund for a BitPay invoice.\n     *\n     * @param invoiceId          The BitPay invoice Id having the associated refund to be created.\n     * @param amount             Amount to be refunded in the currency indicated.\n     * @param preview            Whether to create the refund request as a preview\n     *                           (which will not be acted on until status is updated)\n     * @param immediate          Whether funds should be removed from merchant ledger immediately on submission\n     *                           or at time of processing\n     * @param buyerPaysRefundFee Whether the buyer should pay the refund fee (default is merchant)\n     * @param reference          Present only if specified. Used as reference label for the refund. Max str length = 100\n     * @return An updated Refund Object\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException         BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-a-refund-request\">Create a Refund Request</a>\n     */\n    public Refund createRefund(\n        String invoiceId,\n        Double amount,\n        Boolean preview,\n        Boolean immediate,\n        Boolean buyerPaysRefundFee,\n        String reference\n    ) throws BitPayGenericException, BitPayApiException {\n        Refund refund = new Refund();\n        refund.setInvoice(invoiceId);\n        refund.setAmount(amount);\n        refund.setPreview(preview);\n        refund.setImmediate(immediate);\n        refund.setBuyerPaysRefundFee(buyerPaysRefundFee);\n        refund.setReference(reference);\n\n        return this.getRefundClient().create(refund);\n    }\n\n    /**\n     * Create a refund for a BitPay invoice.\n     *\n     * @param invoiceId          The BitPay invoice Id having the associated refund to be created.\n     * @param amount             Amount to be refunded in the currency indicated.\n     * @param preview            Whether to create the refund request as a preview\n     *                           (which will not be acted on until status is updated)\n     * @param immediate          Whether funds should be removed from merchant ledger immediately on submission\n     *                           or at time of processing\n     * @param buyerPaysRefundFee Whether the buyer should pay the refund fee (default is merchant)\n     * @param reference          Present only if specified. Used as reference label for the refund. Max str length = 100\n     * @param guid               Variable provided by the merchant and designed to be used by the merchant\n     *                           to correlate the refund with a refund ID in their system\n     * @return An updated Refund Object\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException         BitPayApiException class\n     * @since 8.7.0\n     * @see <a href=\"https://developer.bitpay.com/reference/create-a-refund-request\">Create a Refund Request</a>\n     */\n    public Refund createRefund(\n        String invoiceId,\n        Double amount,\n        Boolean preview,\n        Boolean immediate,\n        Boolean buyerPaysRefundFee,\n        String reference,\n        String guid\n    ) throws BitPayGenericException, BitPayApiException {\n        Refund refund = new Refund();\n        refund.setInvoice(invoiceId);\n        refund.setAmount(amount);\n        refund.setPreview(preview);\n        refund.setImmediate(immediate);\n        refund.setBuyerPaysRefundFee(buyerPaysRefundFee);\n        refund.setReference(reference);\n        refund.setGuid(guid);\n\n        return this.getRefundClient().create(refund);\n    }\n\n    /**\n     * Create a refund for a BitPay invoice.\n     *\n     * @param refund Refund class which provided data - invoice id, amount, preview, immediate, buyerPaysRefundFee,\n     *               reference and guid for create request\n     * @return An updated Refund Object\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException         BitPayApiException class\n     * @since 8.7.0\n     * @see <a href=\"https://developer.bitpay.com/reference/create-a-refund-request\">Create a Refund Request</a>\n     */\n    public Refund createRefund(Refund refund) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().create(refund);\n    }\n\n    /**\n     * Retrieve a previously made refund request on a BitPay invoice.\n     *\n     * @param refundId The BitPay refund ID.\n     * @return A BitPay Refund object with the associated Refund object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException      BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-refund-request\">Retrieve a Refund Request</a>\n     */\n    public Refund getRefund(String refundId) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().getById(refundId);\n    }\n\n    /**\n     * Retrieve a previously made refund request on a BitPay invoice.\n     *\n     * @param guid The BitPay refund GUID.\n     * @return A BitPay Refund object with the associated Refund object.\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @since 8.7.0\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-refund-by-guid-request\">Retrieve a Refund by GUID Request</a>\n     */\n    public Refund getRefundByGuid(String guid) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().getByGuid(guid);\n    }\n\n    /**\n     * Retrieve all refund requests on a BitPay invoice.\n     *\n     * @param invoiceId The BitPay invoice object having the associated refunds.\n     * @return A list of BitPay Refund objects with the associated Refund objects.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-refunds-of-an-invoice\">Retrieve Refunds of an Invoice</a>\n     */\n    public List<Refund> getRefunds(String invoiceId) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().getRefundsByInvoiceId(invoiceId);\n    }\n\n    /**\n     * Update the status of a BitPay invoice.\n     *\n     * @param refundId A BitPay refund ID.\n     * @param status   The new status for the refund to be updated.\n     * @return A BitPay generated Refund object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/update-a-refund-request\">Update a Refund Request</a>\n     */\n    public Refund updateRefund(String refundId, String status) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().update(refundId, status);\n    }\n\n    /**\n     * Update the status of a BitPay invoice.\n     *\n     * @param guid A BitPay refund Guid.\n     * @param status   The new status for the refund to be updated.\n     * @return A BitPay generated Refund object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @since 8.7.0\n     * @see <a href=\"https://developer.bitpay.com/reference/update-a-refund-by-guid-request\">Update a Refund by GUID Request</a>\n     */\n    public Refund updateRefundByGuid(String guid, String status) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().updateByGuid(guid, status);\n    }\n\n    /**\n     * Send a refund notification.\n     *\n     * @param refundId A BitPay refund ID.\n     * @return An updated Refund Object\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/request-a-refund-notification-to-be-resent\">Request a Refund Notification to be Resent</a>\n     */\n    public Boolean sendRefundNotification(String refundId) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().sendRefundNotification(refundId);\n    }\n\n    /**\n     * Cancel a previously submitted refund request on a BitPay invoice.\n     *\n     * @param refundId The refund Id for the refund to be canceled.\n     * @return An updated Refund Object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-a-refund-request\">Cancel a Refund Request</a>\n     */\n    public Refund cancelRefund(String refundId) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().cancel(refundId);\n    }\n\n    /**\n     * Cancel a previously submitted refund request on a BitPay invoice.\n     *\n     * @param guid The refund Guid for the refund to be canceled.\n     * @return An updated Refund Object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @since 8.7.0\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-a-refund-by-guid-request\">Cancel a Refund by GUID Request</a>\n     */\n    public Refund cancelRefundByGuid(String guid) throws BitPayGenericException, BitPayApiException {\n        return this.getRefundClient().cancelByGuid(guid);\n    }\n\n    /**\n     * Create a BitPay bill.\n     *\n     * @param bill An Bill object with request parameters defined.\n     * @return A BitPay generated Bill object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-a-bill\">Create a Bill</a>\n     */\n    public Bill createBill(Bill bill) throws BitPayGenericException, BitPayApiException {\n        Facade facade = this.getFacadeBasedOnAccessToken();\n        boolean signRequest = isSignRequest(facade);\n\n        return this.createBill(bill, facade, signRequest);\n    }\n\n    /**\n     * Create a BitPay Bill.\n     *\n     * @param bill        A Bill object with request parameters defined.\n     * @param facade      The facade used to create it.\n     * @param signRequest Signed request.\n     * @return A BitPay generated Bill object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-a-bill\">Create a Bill</a>\n     */\n    public Bill createBill(\n        Bill bill,\n        Facade facade,\n        boolean signRequest\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getBillClient().create(bill, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a BitPay bill by bill id using the public facade.\n     *\n     * @param billId The id of the bill to retrieve.\n     * @return A BitPay Bill object.\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-bill\">Retrieve a Bill</a>\n     */\n    public Bill getBill(String billId) throws BitPayGenericException, BitPayApiException {\n        Facade facade = this.getFacadeBasedOnAccessToken();\n        boolean signRequest = isSignRequest(facade);\n\n        return this.getBill(billId, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a BitPay bill by bill id using the specified facade.\n     *\n     * @param billId      The id of the bill to retrieve.\n     * @param facade      The facade used to retrieve it.\n     * @param signRequest Signed request.\n     * @return A BitPay Bill object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-bill\">Retrieve a Bill</a>\n     */\n    public Bill getBill(\n        String billId,\n        Facade facade,\n        boolean signRequest\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getBillClient().get(billId, facade, signRequest);\n    }\n\n    /**\n     * Retrieve a collection of BitPay bills.\n     *\n     * @param status The status to filter the bills.\n     * @return A list of BitPay Bill objects.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-bills-by-status\">Retrieve Bills by Status</a>\n     */\n    public List<Bill> getBills(String status) throws BitPayGenericException, BitPayApiException {\n        return this.getBillClient().getBills(status);\n    }\n\n    /**\n     * Retrieve a collection of BitPay bills.\n     *\n     * @return A list of BitPay Bill objects.\n     * @throws BitPayGenericException BitPayApiException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-bills-by-status\">Retrieve Bills by Status</a>\n     */\n    public List<Bill> getBills() throws BitPayGenericException, BitPayApiException {\n        return this.getBillClient().getBills();\n    }\n\n    /**\n     * Update a BitPay Bill.\n     *\n     * @param bill   A Bill object with the parameters to update defined.\n     * @param billId The Id of the Bill to udpate.\n     * @return An updated Bill object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/update-a-bill\">Update a Bill</a>\n     */\n    public Bill updateBill(Bill bill, String billId) throws BitPayGenericException, BitPayApiException {\n        return this.getBillClient().update(bill, billId);\n    }\n\n    /**\n     * Deliver a BitPay Bill.\n     *\n     * @param billId    The id of the requested bill.\n     * @param billToken The token of the requested bill.\n     * @return A response status returned from the API.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/deliver-a-bill-via-email\">Deliver a Bill Via Email</a>\n     */\n    public String deliverBill(\n        String billId,\n        String billToken\n    ) throws BitPayGenericException, BitPayApiException {\n        Facade facade = this.getFacadeBasedOnAccessToken();\n        boolean signRequest = isSignRequest(facade);\n\n        return this.deliverBill(billId, billToken, signRequest);\n    }\n\n    /**\n     * Deliver a BitPay Bill.\n     *\n     * @param billId      The id of the requested bill.\n     * @param billToken   The token of the requested bill.\n     * @param signRequest Allow unsigned request\n     * @return A response status returned from the API.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/deliver-a-bill-via-email\">Deliver a Bill Via Email</a>\n     */\n    public String deliverBill(\n        String billId,\n        String billToken,\n        boolean signRequest\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getBillClient().deliver(billId, billToken, signRequest);\n    }\n\n    /**\n     * Retrieve the rates for a cryptocurrency / fiat pair. See https://bitpay.com/bitcoin-exchange-rates.\n     *\n     * @param baseCurrency the cryptocurrency for which you want to fetch the rates.\n     *                     Current supported values are BTC and BCH.\n     * @param currency the fiat currency for which you want to fetch the baseCurrency rates\n     * @return A Rate object populated with the BitPay exchange rate table.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @since 8.8.0\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-the-rates-for-a-cryptocurrency-fiat-pair\">Retrieve the rates for a cryptocurrency / fiat pair</a>\n     */\n    public Rate getRate(\n        String baseCurrency,\n        String currency\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getRateClient().get(baseCurrency, currency);\n    }\n\n    /**\n     * Retrieve the exchange rate table maintained by BitPay.  See https://bitpay.com/bitcoin-exchange-rates.\n     *\n     * @return A Rates object populated with the BitPay exchange rate table.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     */\n    public Rates getRates() throws BitPayGenericException, BitPayApiException {\n        return this.getRateClient().getRates();\n    }\n\n    /**\n     * Retrieve the exchange rate table maintained by BitPay by baseCurrency. See https://bitpay.com/bitcoin-exchange-rates.\n     *\n     * @param baseCurrency the cryptocurrency for which you want to fetch the rates.\n     *                     Current supported values are BTC and BCH.\n     * @return A Rates object populated with the BitPay exchange rate table.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @since 8.8.0\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-all-the-rates-for-a-given-cryptocurrency\">Retrieve all the rates for a given cryptocurrency</a>\n     */\n    public Rates getRates(String baseCurrency) throws BitPayGenericException, BitPayApiException {\n        return this.getRateClient().getRates(baseCurrency);\n    }\n\n    /**\n     * Retrieve a list of ledgers entries by currency and date range using the merchant facade.\n     *\n     * @param currency  The three digit currency string for the ledger to retrieve.\n     * @param dateStart The first date for the query filter.\n     * @param dateEnd   The last date for the query filter.\n     * @return Ledger entries list.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-ledger-entries\">Retrieve Ledger Entries</a>\n     */\n    public List<LedgerEntry> getLedgerEntries(\n        String currency,\n        String dateStart,\n        String dateEnd\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getLedgerClient().getEntries(currency, dateStart, dateEnd);\n    }\n\n    /**\n     * Retrieve a list of ledgers using the merchant facade.\n     *\n     * @return A list of Ledger objects populated with the currency and current balance of each one.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-account-balances\">Retrieve Account Balances</a>\n     */\n    public List<Ledger> getLedgers() throws BitPayGenericException, BitPayApiException {\n        return this.getLedgerClient().getLedgers();\n    }\n\n    /**\n     * Submit BitPay Payout Recipients.\n     *\n     * @param recipients PayoutRecipients A PayoutRecipients object with request parameters defined.\n     * @return array A list of BitPay PayoutRecipients objects.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/invite-recipients\">Invite Recipients</a>\n     */\n    public List<PayoutRecipient> submitPayoutRecipients(PayoutRecipients recipients)\n        throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutRecipientsClient().submit(recipients);\n    }\n\n    /**\n     * Retrieve a collection of BitPay Payout Recipients.\n     *\n     * @param status String|null The recipient status you want to query on.\n     * @param limit  int Maximum results that the query will return (useful for\n     *               paging results). result).\n     * @param offset int Offset for paging.\n     * @return array A list of BitPayRecipient objects.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-recipients-by-status\">Retrieve Recipients by Status</a>\n     */\n    public List<PayoutRecipient> getPayoutRecipients(\n        String status,\n        Integer limit,\n        Integer offset\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutRecipientsClient().getRecipientsByFilters(status, limit, offset);\n    }\n\n    /**\n     * Retrieve a BitPay payout recipient by batch id using.  The client must have been previously authorized for the\n     * payout facade.\n     *\n     * @param recipientId String The id of the recipient to retrieve.\n     * @return PayoutRecipient A BitPay PayoutRecipient object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-recipient\">Retrieve a Recipient</a>\n     */\n    public PayoutRecipient getPayoutRecipient(String recipientId) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutRecipientsClient().get(recipientId);\n    }\n\n    /**\n     * Update a Payout Recipient.\n     *\n     * @param recipientId String The recipient id for the recipient to be updated.\n     * @param recipient   PayoutRecipients A PayoutRecipient object with updated\n     *                    parameters defined.\n     * @return The updated recipient object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/update-a-recipient\">Update a Recipient</a>\n     */\n    public PayoutRecipient updatePayoutRecipient(\n        String recipientId,\n        PayoutRecipient recipient\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutRecipientsClient().update(recipientId, recipient);\n    }\n\n    /**\n     * Cancel a BitPay Payout recipient.\n     *\n     * @param recipientId String The id of the recipient to cancel.\n     * @return True if the delete operation was successful, false otherwise.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/remove-a-recipient\">Remove a Recipient</a>\n     */\n    public Boolean deletePayoutRecipient(String recipientId) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutRecipientsClient().delete(recipientId);\n    }\n\n    /**\n     * Request a payout recipient notification.\n     *\n     * @param recipientId String A BitPay recipient ID.\n     * @return True if the notification was successfully sent, false otherwise.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/request-a-recipient-webhook-to-be-resent\">Request a Recipient Webhook to be Resent</a>\n     */\n    public Boolean requestPayoutRecipientNotification(String recipientId)\n        throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutRecipientsClient().requestNotification(recipientId);\n    }\n\n    /**\n     * Submit a BitPay Payout.\n     *\n     * @param payout Payout A Payout object with request parameters defined.\n     * @return A BitPay generated Payout object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-a-payout\">Create a Payout</a>\n     */\n    public Payout submitPayout(Payout payout) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutClient().submit(payout);\n    }\n\n    /**\n     * Submit a BitPay Payouts.\n     *\n     * @param payouts Collection of Payout objects with request parameters defined.\n     * @return A BitPay PayoutGroup with generated Payout objects and information's about not created payouts.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/create-payout-group\">Create a Payouts</a>\n     */\n    public PayoutGroup submitPayouts(Collection<Payout> payouts) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutGroupClient().submit(payouts);\n    }\n\n    /**\n     * Retrieve a BitPay payout by payout id using. The client must have been\n     * previously authorized for the payout facade.\n     *\n     * @param payoutId String The id of the payout to retrieve.\n     * @return A BitPay Payout object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-payout\">Retrieve a Payout</a>\n     */\n    public Payout getPayout(String payoutId) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutClient().get(payoutId);\n    }\n\n    /**\n     * Cancel a BitPay Payout.\n     *\n     * @param payoutId String The id of the payout to cancel.\n     * @return True if the refund was successfully canceled, false otherwise.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-a-payout\">Cancel a Payout</a>\n     */\n    public Boolean cancelPayout(String payoutId) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutClient().cancel(payoutId);\n    }\n\n    /**\n     * Cancel a BitPay Payouts.\n     *\n     * @param groupId String The id of the payout group to cancel.\n     * @return A BitPay PayoutGroup with cancelled Payout objects and information's about not cancelled payouts.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/cancel-a-payout-group\">Cancel a Payouts</a>\n     */\n    public PayoutGroup cancelPayouts(String groupId) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutGroupClient().cancel(groupId);\n    }\n\n    /**\n     * Retrieve a collection of BitPay payouts.\n     *\n     * @param startDate String The start date for the query.\n     * @param endDate   String The end date for the query.\n     * @param status    String The status to filter(optional).\n     * @param reference String The optional reference specified at payout request creation.\n     * @param limit     int Maximum results that the query will return (useful for\n     *                  paging results).\n     * @param offset    int Offset for paging.\n     * @param groupId   String The optional group id assigned to payout.\n     * @return A list of BitPay Payout objects.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-payouts-filtered-by-query\">Retrieve Payouts Filtered by Query</a>\n     */\n    public List<Payout> getPayouts(\n        String startDate,\n        String endDate,\n        String status,\n        String reference,\n        Integer limit,\n        Integer offset,\n        String groupId\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutClient().getPayouts(startDate, endDate, status, reference, limit, offset, groupId);\n    }\n\n    /**\n     * Request a payout notification.\n     *\n     * @param payoutId String The id of the payout to notify.\n     * @return True if the notification was successfully sent, false otherwise.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/request-a-payout-webhook-to-be-resent\">Request a Payout Webhook to be Resent</a>\n     */\n    public Boolean requestPayoutNotification(String payoutId) throws BitPayGenericException, BitPayApiException {\n        return this.getPayoutClient().requestNotification(payoutId);\n    }\n\n    /**\n     * Retrieves settlement reports for the calling merchant filtered by query.\n     * The `limit` and `offset` parameters\n     * specify pages for large query sets.\n     *\n     * @param currency  The three digit currency string for the ledger to retrieve.\n     * @param dateStart The start date for the query.\n     * @param dateEnd   The end date for the query.\n     * @param status    Can be `processing`, `completed`, or `failed`.\n     * @param limit     Maximum number of settlements to retrieve.\n     * @param offset    Offset for paging.\n     * @return A list of BitPay Settlement objects.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-settlements\">Retrieve Settlements</a>\n     */\n    public List<Settlement> getSettlements(\n        String currency,\n        String dateStart,\n        String dateEnd,\n        String status,\n        Integer limit,\n        Integer offset\n    ) throws BitPayGenericException, BitPayApiException {\n        return this.getSettlementClient().getSettlements(currency, dateStart, dateEnd, status, limit, offset);\n    }\n\n    /**\n     * Retrieves a summary of the specified settlement.\n     *\n     * @param settlementId Settlement Id.\n     * @return A BitPay Settlement object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-a-settlement\">Retrieve a Settlement</a>\n     */\n    public Settlement getSettlement(String settlementId) throws BitPayGenericException, BitPayApiException {\n        return this.getSettlementClient().get(settlementId);\n    }\n\n    /**\n     * Gets a detailed reconciliation report of the activity within the settlement period.\n     * Required id and settlement token.\n     *\n     * @param settlementId Settlement ID.\n     * @param token Settlement token.\n     * @return A detailed BitPay Settlement object.\n     * @throws BitPayGenericException BitPayGenericException class\n     * @throws BitPayApiException BitPayApiException class\n     * @see <a href=\"https://developer.bitpay.com/reference/fetch-a-reconciliation-report\">Fetch a Reconciliation Report</a>\n     */\n    public Settlement getSettlementReconciliationReport(String settlementId, String token)\n        throws BitPayGenericException, BitPayApiException {\n        return this.getSettlementClient().getSettlementReconciliationReport(settlementId, token);\n    }\n\n    /**\n     * Retrieve all supported wallets.\n     *\n     * @return A list of wallet objets.\n     * @throws BitPayApiException BitPayApiException class\n     * @throws BitPayGenericException BitPayGenericException class\n     * @see <a href=\"https://developer.bitpay.com/reference/retrieve-the-supported-wallets\">Retrieve the Supported Wallets</a>\n     */\n    public List<Wallet> getSupportedWallets() throws BitPayGenericException, BitPayApiException {\n        return this.getWalletClient().getSupportedWallets();\n    }\n\n    /**\n     * Gets rates client.\n     *\n     * @return the rates client\n     */\n    public RateClient getRateClient() {\n        return RateClient.getInstance(this.bitPayClient);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Gets http client.\n     *\n     * @param proxyDetails the proxy details\n     * @param proxyCreds   the proxy creds\n     * @return the http client\n     */\n    protected HttpClient getHttpClient(\n        HttpHost proxyDetails,\n        CredentialsProvider proxyCreds\n    ) {\n        if (proxyDetails != null) {\n            if (proxyCreds != null) {\n                return HttpClientBuilder.create().setProxy(proxyDetails).setDefaultCredentialsProvider(\n                    proxyCreds).build();\n            } else {\n                return HttpClientBuilder.create().setProxy(proxyDetails).build();\n            }\n        } else {\n            return HttpClientBuilder.create().build();\n        }\n    }\n\n    /**\n     * Gets ECKey.\n     *\n     * @param privateKey the private key\n     * @return ECKey\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    protected ECKey getEcKey(PrivateKey privateKey) throws BitPayGenericException {\n        File privateKeyFile = new File(privateKey.value());\n        if (privateKeyFile.exists() && KeyUtils.privateKeyExists(privateKey.value().replace(\"\\\"\", \"\"))) {\n            try {\n                return KeyUtils.loadEcKey();\n            } catch (Exception e) {\n                BitPayExceptionProvider.throwGenericExceptionWithMessage(LOAD_PRIVATE_KEY_EXCEPTION + e.getMessage());\n            }\n        } else {\n            try {\n                return KeyUtils.createEcKeyFromHexString(privateKey.value());\n            } catch (Exception e) {\n                BitPayExceptionProvider.throwGenericExceptionWithMessage(\"Private Key file not found\");\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Initialize the public/private key pair by either loading the existing one or by creating a new one.\n     *\n     * @param config the config\n     * @return ECKey\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    protected ECKey getEcKey(Config config) throws BitPayGenericException {\n        try {\n            if (KeyUtils.privateKeyExists(\n                config.getEnvConfig(config.getEnvironment()).path(\"PrivateKeyPath\").toString()\n                    .replace(\"\\\"\", \"\"))) {\n                return KeyUtils.loadEcKey();\n            } else {\n                String keyHex =\n                    config.getEnvConfig(config.getEnvironment()).path(\"PrivateKey\").toString()\n                        .replace(\"\\\"\", \"\");\n                if (!keyHex.isEmpty()) {\n                    return KeyUtils.createEcKeyFromHexString(keyHex);\n                }\n            }\n        } catch (Exception e) {\n            BitPayExceptionProvider.throwGenericExceptionWithMessage(LOAD_PRIVATE_KEY_EXCEPTION + e.getMessage());\n        }\n\n        return null;\n    }\n\n    /**\n     * Derive identity.\n     *\n     * @param ecKey ECKey\n     * @throws IllegalArgumentException the illegal argument exception\n     * @throws BitPayGenericException          BitPayGenericException class\n     */\n    protected void deriveIdentity(ECKey ecKey) throws BitPayGenericException {\n        // Identity in this implementation is defined to be the SIN.\n        try {\n            this.identity = KeyUtils.deriveSin(ecKey);\n        } catch (Exception e) {\n            BitPayExceptionProvider.throwDeserializeResourceException(\"Token array\", e.getMessage());\n        }\n    }\n\n    /**\n     * Gets facade based on access token.\n     *\n     * @return the facade based on access token\n     */\n    protected Facade getFacadeBasedOnAccessToken() {\n        if (this.tokenContainer.tokenExists(Facade.MERCHANT)) {\n            return Facade.MERCHANT;\n        }\n\n        return Facade.POS;\n    }\n\n    /**\n     * Is sign request boolean.\n     *\n     * @param facade the facade\n     * @return the boolean\n     */\n    protected boolean isSignRequest(Facade facade) {\n        return !facade.equals(Facade.POS);\n    }\n\n    /**\n     * Gets base url.\n     *\n     * @param environment the environment\n     * @return the base url\n     */\n    protected String getBaseUrl(Environment environment) {\n        return environment.equals(Environment.TEST) ? Config.TEST_URL : Config.PROD_URL;\n    }\n\n    /**\n     * Loads the configuration file (JSON).\n     *\n     * @param configFilePath the config file path\n     * @return the Config class\n     * @throws BitPayGenericException BitPayGenericException class\n     */\n    protected Config buildConfigFromFile(ConfigFilePath configFilePath) throws BitPayGenericException {\n        Config config = null;\n        try {\n            byte[] jsonData = Files.readAllBytes(Paths.get(configFilePath.value()));\n            JsonMapper mapper = JsonMapperFactory.create();\n            //read JSON like DOM Parser\n            JsonNode rootNode = mapper.readTree(jsonData);\n            JsonNode bitPayConfiguration = rootNode.path(\"BitPayConfiguration\");\n            config = mapper.readValue(bitPayConfiguration.toString(), Config.class);\n        } catch (Exception e) {\n            BitPayExceptionProvider.throwGenericExceptionWithMessage(\n                \"Failed to read configuration file : \" + e.getMessage());\n        }\n\n        return config;\n    }\n\n    /**\n     * Create authorization client.\n     *\n     * @return the authorization client\n     */\n    protected AuthorizationClient createAuthorizationClient() {\n        return new AuthorizationClient(this.bitPayClient, this.guidGenerator, this.tokenContainer, this.identity);\n    }\n\n    /**\n     * Get invoice client.\n     *\n     * @return the invoice client\n     */\n    protected InvoiceClient getInvoiceClient() {\n        return InvoiceClient.getInstance(this.bitPayClient, this.tokenContainer, this.guidGenerator);\n    }\n\n    /**\n     * Get refund client.\n     *\n     * @return the refund client\n     */\n    protected RefundClient getRefundClient() {\n        return RefundClient.getInstance(this.bitPayClient, this.tokenContainer, this.guidGenerator);\n    }\n\n    /**\n     * Get bill client.\n     *\n     * @return the bill client\n     */\n    protected BillClient getBillClient() {\n        return BillClient.getInstance(this.bitPayClient, this.tokenContainer);\n    }\n\n    /**\n     * Get ledger client.\n     *\n     * @return the ledger client\n     */\n    protected LedgerClient getLedgerClient() {\n        return LedgerClient.getInstance(this.bitPayClient, this.tokenContainer);\n    }\n\n    /**\n     * Get payout recipients client.\n     *\n     * @return the payout recipients client\n     */\n    protected PayoutRecipientsClient getPayoutRecipientsClient() {\n        return PayoutRecipientsClient.getInstance(this.bitPayClient, this.tokenContainer, this.guidGenerator);\n    }\n\n    /**\n     * Get payout client.\n     *\n     * @return the payout client\n     */\n    protected PayoutClient getPayoutClient() {\n        return PayoutClient.getInstance(this.bitPayClient, this.tokenContainer);\n    }\n\n    protected PayoutGroupClient getPayoutGroupClient() {\n        return PayoutGroupClient.getInstance(this.bitPayClient, this.tokenContainer);\n    }\n\n    /**\n     * Get settlement client.\n     *\n     * @return the settlement client\n     */\n    protected SettlementClient getSettlementClient() {\n        return SettlementClient.getInstance(this.bitPayClient, this.tokenContainer);\n    }\n\n    /**\n     * Get wallet client.\n     *\n     * @return the wallet client\n     */\n    protected WalletClient getWalletClient() {\n        return WalletClient.getInstance(this.bitPayClient);\n    }\n}\n",
    "project": "java-bitpay-client",
    "libraryName": "bitcoinj-core",
    "libraryGroupID": "org.bitcoinj",
    "newVersion": "0.17",
    "previousVersion": "0.16.3",
    "breakingCommit": "de0a83ba9708170ae984b049781321f04caa82b3"
}