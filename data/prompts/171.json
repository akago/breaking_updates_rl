{
    "absolute_path_to_file_in_container": "/plexus-archiver/src/main/java/org/codehaus/plexus/archiver/jar/JarToolModularJarArchiver.java",
    "errors": [
        {
            "line_number": 41,
            "message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/jar/JarToolModularJarArchiver.java:[41,36] cannot find symbol",
            "additional_info": "  symbol:   class NullPrintStream\n  location: package org.apache.commons.io.output",
            "file_name": "JarToolModularJarArchiver.java",
            "uid": "2fa21e6e-591c-5fad-a942-78a7f24c08da"
        },
        {
            "line_number": 300,
            "message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/jar/JarToolModularJarArchiver.java:[300,43] cannot find symbol",
            "additional_info": "  symbol:   variable NullPrintStream\n  location: class org.codehaus.plexus.archiver.jar.JarToolModularJarArchiver",
            "file_name": "JarToolModularJarArchiver.java",
            "uid": "53ef7179-b1ab-569d-94a0-7fe1a1e67ce3"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: commons-io 2.11.0->20030203.000550\n\nthe following client code fails: \n'''java\n/**\n *\n * Copyright 2018 The Apache Software Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.codehaus.plexus.archiver.jar;\n\nimport javax.inject.Named;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.lang.reflect.Method;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.nio.file.attribute.FileTime;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.TimeZone;\nimport java.util.regex.Pattern;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\nimport java.util.zip.ZipOutputStream;\n\nimport org.apache.commons.compress.parallel.InputStreamSupplier;\nimport org.apache.commons.io.output.NullPrintStream;\nimport org.codehaus.plexus.archiver.ArchiverException;\nimport org.codehaus.plexus.archiver.zip.ConcurrentJarCreator;\nimport org.codehaus.plexus.util.IOUtil;\n\n/**\n * A {@link ModularJarArchiver} implementation that uses\n * the {@code jar} tool provided by\n * {@code java.util.spi.ToolProvider} to create\n * modular JAR files.\n *\n * <p>\n * The basic JAR archive is created by {@link JarArchiver}\n * and the {@code jar} tool is used to upgrade it to modular JAR.\n *\n * <p>\n * If the JAR file does not contain module descriptor\n * or the JDK does not provide the {@code jar} tool\n * (for example JDK prior to Java 9), then the\n * archive created by {@link JarArchiver}\n * is left unchanged.\n */\n@Named( \"mjar\" )\npublic class JarToolModularJarArchiver\n    extends ModularJarArchiver\n{\n    private static final String MODULE_DESCRIPTOR_FILE_NAME\n        = \"module-info.class\";\n\n    private static final Pattern MRJAR_VERSION_AREA\n        = Pattern.compile( \"META-INF/versions/\\\\d+/\" );\n\n    private Object jarTool;\n\n    private boolean moduleDescriptorFound;\n\n    private boolean hasJarDateOption;\n\n    public JarToolModularJarArchiver()\n    {\n        try\n        {\n            Class<?> toolProviderClass =\n                Class.forName( \"java.util.spi.ToolProvider\" );\n            Object jarToolOptional = toolProviderClass\n                .getMethod( \"findFirst\", String.class )\n                .invoke( null, \"jar\" );\n\n            jarTool = jarToolOptional.getClass().getMethod( \"get\" )\n                .invoke( jarToolOptional );\n        }\n        catch ( ReflectiveOperationException | SecurityException e )\n        {\n            // Ignore. It is expected that the jar tool\n            // may not be available.\n        }\n    }\n\n    @Override\n    protected void zipFile( InputStreamSupplier is, ConcurrentJarCreator zOut,\n                            String vPath, long lastModified, File fromArchive,\n                            int mode, String symlinkDestination,\n                            boolean addInParallel )\n        throws IOException, ArchiverException\n    {\n        if ( jarTool != null && isModuleDescriptor( vPath ) )\n        {\n            getLogger().debug( \"Module descriptor found: \" + vPath );\n\n            moduleDescriptorFound = true;\n        }\n\n        super.zipFile( is, zOut, vPath, lastModified,\n            fromArchive, mode, symlinkDestination, addInParallel );\n    }\n\n    @Override\n    protected void postCreateArchive()\n        throws ArchiverException\n    {\n        if ( !moduleDescriptorFound )\n        {\n            // no need to update the JAR archive\n            return;\n        }\n\n        try\n        {\n            getLogger().debug( \"Using the jar tool to \" +\n                \"update the archive to modular JAR.\" );\n\n            final Method jarRun = jarTool.getClass()\n                .getMethod( \"run\", PrintStream.class, PrintStream.class, String[].class );\n\n            if ( getLastModifiedTime() != null )\n            {\n                hasJarDateOption = isJarDateOptionSupported( jarRun );\n                getLogger().debug( \"jar tool --date option is supported: \" + hasJarDateOption );\n            }\n\n            Integer result = (Integer) jarRun.invoke( jarTool, System.out, System.err, getJarToolArguments() );\n\n            if ( result != null && result != 0 )\n            {\n                throw new ArchiverException( \"Could not create modular JAR file. \" +\n                    \"The JDK jar tool exited with \" + result );\n            }\n\n            if ( !hasJarDateOption && getLastModifiedTime() != null )\n            {\n                getLogger().debug( \"Fix last modified time zip entries.\" );\n                // --date option not supported, fallback to rewrite the JAR file\n                // https://github.com/codehaus-plexus/plexus-archiver/issues/164\n                fixLastModifiedTimeZipEntries();\n            }\n        }\n        catch ( IOException | ReflectiveOperationException | SecurityException e )\n        {\n            throw new ArchiverException( \"Exception occurred \" +\n                \"while creating modular JAR file\", e );\n        }\n    }\n\n    /**\n     * Fallback to rewrite the JAR file with the correct timestamp if the {@code --date} option is not available.\n     */\n    private void fixLastModifiedTimeZipEntries()\n        throws IOException\n    {\n        long timeMillis = getLastModifiedTime().toMillis();\n        Path destFile = getDestFile().toPath();\n        Path tmpZip = Files.createTempFile( destFile.getParent(), null, null );\n        try ( ZipFile zipFile = new ZipFile( getDestFile() );\n              ZipOutputStream out = new ZipOutputStream( Files.newOutputStream( tmpZip ) ) )\n        {\n            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n            while ( entries.hasMoreElements() )\n            {\n                ZipEntry entry = entries.nextElement();\n                // Not using setLastModifiedTime(FileTime) as it sets the extended timestamp\n                // which is not compatible with the jar tool output.\n                entry.setTime( timeMillis );\n                out.putNextEntry( entry );\n                if ( !entry.isDirectory() )\n                {\n                    IOUtil.copy( zipFile.getInputStream( entry ), out );\n                }\n                out.closeEntry();\n            }\n        }\n        Files.move( tmpZip, destFile, StandardCopyOption.REPLACE_EXISTING );\n    }\n\n    /**\n     * Returns {@code true} if {@code path}\n     * is a module descriptor.\n     */\n    private boolean isModuleDescriptor( String path )\n    {\n        if ( path.endsWith( MODULE_DESCRIPTOR_FILE_NAME ) )\n        {\n            String prefix = path.substring( 0,\n                path.lastIndexOf( MODULE_DESCRIPTOR_FILE_NAME ) );\n\n            // the path is a module descriptor if it located\n            // into the root of the archive or into the\n            // version area of a multi-release JAR file\n            return prefix.isEmpty() ||\n                MRJAR_VERSION_AREA.matcher( prefix ).matches();\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    /**\n     * Prepares the arguments for the jar tool.\n     * It takes into account the module version,\n     * main class, etc.\n     */\n    private String[] getJarToolArguments()\n        throws IOException\n    {\n        // We add empty temporary directory to the JAR file.\n        // It may look strange at first, but to update a JAR file\n        // you need to add new files[1]. If we add empty directory\n        // it will be ignored (not added to the archive), but\n        // the module descriptor will be updated and validated.\n        //\n        // [1] There are some exceptions (such as when the main class\n        // is updated) but we need at least empty directory\n        // to ensure it will work in all cases.\n        File tempEmptyDir = Files.createTempDirectory( null ).toFile();\n        tempEmptyDir.deleteOnExit();\n\n        List<String> args = new ArrayList<>();\n\n        args.add( \"--update\" );\n        args.add( \"--file\" );\n        args.add( getDestFile().getAbsolutePath() );\n\n        String mainClass = getModuleMainClass() != null\n                           ? getModuleMainClass()\n                           : getManifestMainClass();\n\n        if ( mainClass != null )\n        {\n            args.add( \"--main-class\" );\n            args.add( mainClass );\n        }\n\n        if ( getModuleVersion() != null )\n        {\n            args.add( \"--module-version\" );\n            args.add( getModuleVersion() );\n        }\n\n        if ( !isCompress() )\n        {\n            args.add( \"--no-compress\" );\n        }\n\n        if ( hasJarDateOption )\n        {\n            // The --date option already normalize the time, so revert to the local time\n            FileTime localTime = revertToLocalTime( getLastModifiedTime() );\n            args.add( \"--date\" );\n            args.add( localTime.toString() );\n        }\n\n        args.add( \"-C\" );\n        args.add( tempEmptyDir.getAbsolutePath() );\n        args.add( \".\" );\n\n        return args.toArray( new String[0] );\n    }\n\n    private static FileTime revertToLocalTime( FileTime time )\n    {\n        long restoreToLocalTime = time.toMillis();\n        Calendar cal = Calendar.getInstance( TimeZone.getDefault(), Locale.ROOT );\n        cal.setTimeInMillis( restoreToLocalTime );\n        restoreToLocalTime = restoreToLocalTime + ( cal.get( Calendar.ZONE_OFFSET ) + cal.get( Calendar.DST_OFFSET ) );\n        return FileTime.fromMillis( restoreToLocalTime );\n    }\n\n    /**\n     * Check support for {@code --date} option introduced since Java 17.0.3 (JDK-8279925).\n     *\n     * @return true if the JAR tool supports the {@code --date} option\n     */\n    private boolean isJarDateOptionSupported( Method runMethod )\n    {\n        try\n        {\n            // Test the output code validating the --date option.\n            String[] args = { \"--date\", \"2099-12-31T23:59:59Z\", \"--version\" };\n\n            PrintStream nullPrintStream = NullPrintStream.NULL_PRINT_STREAM;\n            Integer result = (Integer) runMethod.invoke( jarTool, nullPrintStream, nullPrintStream, args );\n\n            return result != null && result.intValue() == 0;\n        }\n        catch ( ReflectiveOperationException | SecurityException e )\n        {\n            return false;\n        }\n    }\n\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport org.apache.commons.io.output.NullPrintStream;\n            PrintStream nullPrintStream = NullPrintStream.NULL_PRINT_STREAM;\nwith the following error message:\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/jar/JarToolModularJarArchiver.java:[41,36] cannot find symbol  symbol:   class NullPrintStream\n  location: package org.apache.commons.io.output\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/jar/JarToolModularJarArchiver.java:[300,43] cannot find symbol  symbol:   variable NullPrintStream\n  location: class org.codehaus.plexus.archiver.jar.JarToolModularJarArchiver\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.apache.commons.io.output.ThresholdingOutputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream.afterRead | DELETION | METHOD_REMOVED\norg.apache.commons.io.output.ByteArrayOutputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.BoundedInputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.output.DemuxOutputStream.close | MUTATION | METHOD_NOW_FINAL\njava.io.InputStream.readNBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.filefilter.PrefixFileFilter.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.output.LockableFileWriter.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.io.InputStream.skipNBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.HexDump.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.input.CountingInputStream.resetCount | DELETION | METHOD_REMOVED\njava.io.InputStream.transferTo | DELETION | METHOD_REMOVED\norg.apache.commons.io.input.CountingInputStream.resetByteCount | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.isDirectory | DELETION | METHOD_REMOVED\norg.apache.commons.io.output.CountingOutputStream.getByteCount | DELETION | METHOD_REMOVED\norg.apache.commons.io.input.ClosedInputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream.getByteCount | DELETION | METHOD_REMOVED\njava.io.InputStream.readAllBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.input.DemuxInputStream.close | MUTATION | METHOD_NOW_FINAL\norg.apache.commons.io.output.DemuxOutputStream.write | MUTATION | METHOD_NOW_FINAL\norg.apache.commons.io.output.NullPrintStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream | MUTATION | SUPERTYPE_REMOVED\njava.io.InputStream.nullInputStream | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.write | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import org.apache.commons.io.output.NullPrintStream;\n            PrintStream nullPrintStream = NullPrintStream.NULL_PRINT_STREAM;",
    "error_message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/jar/JarToolModularJarArchiver.java:[41,36] cannot find symbol  symbol:   class NullPrintStream\n  location: package org.apache.commons.io.output\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/jar/JarToolModularJarArchiver.java:[300,43] cannot find symbol  symbol:   variable NullPrintStream\n  location: class org.codehaus.plexus.archiver.jar.JarToolModularJarArchiver",
    "api_diff": "Format: element | nature | kind\norg.apache.commons.io.output.ThresholdingOutputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream.afterRead | DELETION | METHOD_REMOVED\norg.apache.commons.io.output.ByteArrayOutputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.BoundedInputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.output.DemuxOutputStream.close | MUTATION | METHOD_NOW_FINAL\njava.io.InputStream.readNBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.filefilter.PrefixFileFilter.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.output.LockableFileWriter.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.io.InputStream.skipNBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.HexDump.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.input.CountingInputStream.resetCount | DELETION | METHOD_REMOVED\njava.io.InputStream.transferTo | DELETION | METHOD_REMOVED\norg.apache.commons.io.input.CountingInputStream.resetByteCount | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.isDirectory | DELETION | METHOD_REMOVED\norg.apache.commons.io.output.CountingOutputStream.getByteCount | DELETION | METHOD_REMOVED\norg.apache.commons.io.input.ClosedInputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream.getByteCount | DELETION | METHOD_REMOVED\njava.io.InputStream.readAllBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.input.DemuxInputStream.close | MUTATION | METHOD_NOW_FINAL\norg.apache.commons.io.output.DemuxOutputStream.write | MUTATION | METHOD_NOW_FINAL\norg.apache.commons.io.output.NullPrintStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream | MUTATION | SUPERTYPE_REMOVED\njava.io.InputStream.nullInputStream | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.write | DELETION | METHOD_REMOVED",
    "original_code": "/**\n *\n * Copyright 2018 The Apache Software Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.codehaus.plexus.archiver.jar;\n\nimport javax.inject.Named;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.lang.reflect.Method;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.nio.file.attribute.FileTime;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.TimeZone;\nimport java.util.regex.Pattern;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\nimport java.util.zip.ZipOutputStream;\n\nimport org.apache.commons.compress.parallel.InputStreamSupplier;\nimport org.apache.commons.io.output.NullPrintStream;\nimport org.codehaus.plexus.archiver.ArchiverException;\nimport org.codehaus.plexus.archiver.zip.ConcurrentJarCreator;\nimport org.codehaus.plexus.util.IOUtil;\n\n/**\n * A {@link ModularJarArchiver} implementation that uses\n * the {@code jar} tool provided by\n * {@code java.util.spi.ToolProvider} to create\n * modular JAR files.\n *\n * <p>\n * The basic JAR archive is created by {@link JarArchiver}\n * and the {@code jar} tool is used to upgrade it to modular JAR.\n *\n * <p>\n * If the JAR file does not contain module descriptor\n * or the JDK does not provide the {@code jar} tool\n * (for example JDK prior to Java 9), then the\n * archive created by {@link JarArchiver}\n * is left unchanged.\n */\n@Named( \"mjar\" )\npublic class JarToolModularJarArchiver\n    extends ModularJarArchiver\n{\n    private static final String MODULE_DESCRIPTOR_FILE_NAME\n        = \"module-info.class\";\n\n    private static final Pattern MRJAR_VERSION_AREA\n        = Pattern.compile( \"META-INF/versions/\\\\d+/\" );\n\n    private Object jarTool;\n\n    private boolean moduleDescriptorFound;\n\n    private boolean hasJarDateOption;\n\n    public JarToolModularJarArchiver()\n    {\n        try\n        {\n            Class<?> toolProviderClass =\n                Class.forName( \"java.util.spi.ToolProvider\" );\n            Object jarToolOptional = toolProviderClass\n                .getMethod( \"findFirst\", String.class )\n                .invoke( null, \"jar\" );\n\n            jarTool = jarToolOptional.getClass().getMethod( \"get\" )\n                .invoke( jarToolOptional );\n        }\n        catch ( ReflectiveOperationException | SecurityException e )\n        {\n            // Ignore. It is expected that the jar tool\n            // may not be available.\n        }\n    }\n\n    @Override\n    protected void zipFile( InputStreamSupplier is, ConcurrentJarCreator zOut,\n                            String vPath, long lastModified, File fromArchive,\n                            int mode, String symlinkDestination,\n                            boolean addInParallel )\n        throws IOException, ArchiverException\n    {\n        if ( jarTool != null && isModuleDescriptor( vPath ) )\n        {\n            getLogger().debug( \"Module descriptor found: \" + vPath );\n\n            moduleDescriptorFound = true;\n        }\n\n        super.zipFile( is, zOut, vPath, lastModified,\n            fromArchive, mode, symlinkDestination, addInParallel );\n    }\n\n    @Override\n    protected void postCreateArchive()\n        throws ArchiverException\n    {\n        if ( !moduleDescriptorFound )\n        {\n            // no need to update the JAR archive\n            return;\n        }\n\n        try\n        {\n            getLogger().debug( \"Using the jar tool to \" +\n                \"update the archive to modular JAR.\" );\n\n            final Method jarRun = jarTool.getClass()\n                .getMethod( \"run\", PrintStream.class, PrintStream.class, String[].class );\n\n            if ( getLastModifiedTime() != null )\n            {\n                hasJarDateOption = isJarDateOptionSupported( jarRun );\n                getLogger().debug( \"jar tool --date option is supported: \" + hasJarDateOption );\n            }\n\n            Integer result = (Integer) jarRun.invoke( jarTool, System.out, System.err, getJarToolArguments() );\n\n            if ( result != null && result != 0 )\n            {\n                throw new ArchiverException( \"Could not create modular JAR file. \" +\n                    \"The JDK jar tool exited with \" + result );\n            }\n\n            if ( !hasJarDateOption && getLastModifiedTime() != null )\n            {\n                getLogger().debug( \"Fix last modified time zip entries.\" );\n                // --date option not supported, fallback to rewrite the JAR file\n                // https://github.com/codehaus-plexus/plexus-archiver/issues/164\n                fixLastModifiedTimeZipEntries();\n            }\n        }\n        catch ( IOException | ReflectiveOperationException | SecurityException e )\n        {\n            throw new ArchiverException( \"Exception occurred \" +\n                \"while creating modular JAR file\", e );\n        }\n    }\n\n    /**\n     * Fallback to rewrite the JAR file with the correct timestamp if the {@code --date} option is not available.\n     */\n    private void fixLastModifiedTimeZipEntries()\n        throws IOException\n    {\n        long timeMillis = getLastModifiedTime().toMillis();\n        Path destFile = getDestFile().toPath();\n        Path tmpZip = Files.createTempFile( destFile.getParent(), null, null );\n        try ( ZipFile zipFile = new ZipFile( getDestFile() );\n              ZipOutputStream out = new ZipOutputStream( Files.newOutputStream( tmpZip ) ) )\n        {\n            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n            while ( entries.hasMoreElements() )\n            {\n                ZipEntry entry = entries.nextElement();\n                // Not using setLastModifiedTime(FileTime) as it sets the extended timestamp\n                // which is not compatible with the jar tool output.\n                entry.setTime( timeMillis );\n                out.putNextEntry( entry );\n                if ( !entry.isDirectory() )\n                {\n                    IOUtil.copy( zipFile.getInputStream( entry ), out );\n                }\n                out.closeEntry();\n            }\n        }\n        Files.move( tmpZip, destFile, StandardCopyOption.REPLACE_EXISTING );\n    }\n\n    /**\n     * Returns {@code true} if {@code path}\n     * is a module descriptor.\n     */\n    private boolean isModuleDescriptor( String path )\n    {\n        if ( path.endsWith( MODULE_DESCRIPTOR_FILE_NAME ) )\n        {\n            String prefix = path.substring( 0,\n                path.lastIndexOf( MODULE_DESCRIPTOR_FILE_NAME ) );\n\n            // the path is a module descriptor if it located\n            // into the root of the archive or into the\n            // version area of a multi-release JAR file\n            return prefix.isEmpty() ||\n                MRJAR_VERSION_AREA.matcher( prefix ).matches();\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    /**\n     * Prepares the arguments for the jar tool.\n     * It takes into account the module version,\n     * main class, etc.\n     */\n    private String[] getJarToolArguments()\n        throws IOException\n    {\n        // We add empty temporary directory to the JAR file.\n        // It may look strange at first, but to update a JAR file\n        // you need to add new files[1]. If we add empty directory\n        // it will be ignored (not added to the archive), but\n        // the module descriptor will be updated and validated.\n        //\n        // [1] There are some exceptions (such as when the main class\n        // is updated) but we need at least empty directory\n        // to ensure it will work in all cases.\n        File tempEmptyDir = Files.createTempDirectory( null ).toFile();\n        tempEmptyDir.deleteOnExit();\n\n        List<String> args = new ArrayList<>();\n\n        args.add( \"--update\" );\n        args.add( \"--file\" );\n        args.add( getDestFile().getAbsolutePath() );\n\n        String mainClass = getModuleMainClass() != null\n                           ? getModuleMainClass()\n                           : getManifestMainClass();\n\n        if ( mainClass != null )\n        {\n            args.add( \"--main-class\" );\n            args.add( mainClass );\n        }\n\n        if ( getModuleVersion() != null )\n        {\n            args.add( \"--module-version\" );\n            args.add( getModuleVersion() );\n        }\n\n        if ( !isCompress() )\n        {\n            args.add( \"--no-compress\" );\n        }\n\n        if ( hasJarDateOption )\n        {\n            // The --date option already normalize the time, so revert to the local time\n            FileTime localTime = revertToLocalTime( getLastModifiedTime() );\n            args.add( \"--date\" );\n            args.add( localTime.toString() );\n        }\n\n        args.add( \"-C\" );\n        args.add( tempEmptyDir.getAbsolutePath() );\n        args.add( \".\" );\n\n        return args.toArray( new String[0] );\n    }\n\n    private static FileTime revertToLocalTime( FileTime time )\n    {\n        long restoreToLocalTime = time.toMillis();\n        Calendar cal = Calendar.getInstance( TimeZone.getDefault(), Locale.ROOT );\n        cal.setTimeInMillis( restoreToLocalTime );\n        restoreToLocalTime = restoreToLocalTime + ( cal.get( Calendar.ZONE_OFFSET ) + cal.get( Calendar.DST_OFFSET ) );\n        return FileTime.fromMillis( restoreToLocalTime );\n    }\n\n    /**\n     * Check support for {@code --date} option introduced since Java 17.0.3 (JDK-8279925).\n     *\n     * @return true if the JAR tool supports the {@code --date} option\n     */\n    private boolean isJarDateOptionSupported( Method runMethod )\n    {\n        try\n        {\n            // Test the output code validating the --date option.\n            String[] args = { \"--date\", \"2099-12-31T23:59:59Z\", \"--version\" };\n\n            PrintStream nullPrintStream = NullPrintStream.NULL_PRINT_STREAM;\n            Integer result = (Integer) runMethod.invoke( jarTool, nullPrintStream, nullPrintStream, args );\n\n            return result != null && result.intValue() == 0;\n        }\n        catch ( ReflectiveOperationException | SecurityException e )\n        {\n            return false;\n        }\n    }\n\n}\n",
    "project": "plexus-archiver",
    "libraryName": "commons-io",
    "libraryGroupID": "commons-io",
    "newVersion": "20030203.000550",
    "previousVersion": "2.11.0",
    "breakingCommit": "ee0827d4c9bf80982241e8c3559dceb8b39063e4"
}