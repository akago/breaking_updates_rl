{
    "relative_path": "OCR4all/src/main/java/de/uniwue/helper/RecognitionHelper.java",
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nthe following client code fails: \n'''java\npackage de.uniwue.helper;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\n\nimport org.apache.commons.io.FileUtils;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\n\nimport de.uniwue.config.ProjectConfiguration;\nimport de.uniwue.feature.ProcessConflictDetector;\nimport de.uniwue.feature.ProcessHandler;\nimport de.uniwue.feature.ProcessStateCollector;\n\n/**\n * Helper class for recognition module\n */\npublic class RecognitionHelper {\n    /**\n     * Object to access project configuration\n     */\n    private ProjectConfiguration projConf;\n\n    /**\n     * Image type of the project\n     * Possible values: { Binary, Gray }\n     */\n    private String projectImageType;\n\n\n    /**\n     * Object to use generic functionalities\n     */\n    private GenericHelper genericHelper;\n\n    /**\n     * Object to determine process states\n     */\n    private ProcessStateCollector procStateCol;\n\n    /**\n     * Helper object for process handling\n     */\n    private ProcessHandler processHandler;\n\n    /**\n     * Progress of the Recognition process\n     */\n    private int progress = -1;\n\n    /**\n     * Indicates if a Recognition process is already running\n     */\n    private boolean RecognitionRunning = false;\n\n    /**\n     * Last time the images/pagexml are modified\n     */\n    private Map<String,Long> imagesLastModified;\n\n    /**\n     * Structure to monitor the progress of the process\n     * pageId : segmentId : lineSegmentId : processedState\n     *\n     * Structure example:\n     * {\n     *     \"0002\": {\n     *         \"0002__000__paragraph\" : {\n     *             \"0002__000__paragraph__000\" : true,\n     *             \"0002__000__paragraph__001\" : false,\n     *             ...\n     *         },\n     *         ...\n     *     },\n     *     ...\n     * }\n     */\n    private TreeMap<String,TreeMap<String, TreeMap<String, Boolean>>> processState = new TreeMap<>();\n\n    /**\n     * Constructor\n     *\n     * @param projectDir Path to the project directory\n     * @param projectImageType Type of the project (binary, gray)\n     *\n     */\n    public RecognitionHelper(String projectDir, String projectImageType) {\n        this.projectImageType = projectImageType;\n        projConf = new ProjectConfiguration(projectDir);\n        genericHelper = new GenericHelper(projConf);\n        procStateCol = new ProcessStateCollector(projConf, projectImageType);\n        processHandler = new ProcessHandler();\n    }\n\n    /**\n     * Gets the process handler object\n     *\n     * @return Returns the process Helper\n     */\n    public ProcessHandler getProcessHandler() {\n        return processHandler;\n    }\n\n    /**\n     * Initializes the structure with which the progress of the process can be monitored\n     *\n     * @param pageIds Identifiers of the chosen pages (e.g 0002,0003)\n     * @throws IOException\n     */\n    public void initialize(List<String> pageIds) throws IOException {\n        // Init the listener for image modification\n        imagesLastModified = new HashMap<>();\n        for(String pageId: pageIds) {\n            final String pageXML = projConf.OCR_DIR + pageId + projConf.CONF_EXT;\n            imagesLastModified.put(pageXML,new File(pageXML).lastModified());\n        }\n    }\n\n    /**\n     * Returns the absolute path of all line segment images for the pages in the processState\n     *\n     * @param pageIds Identifiers of the chosen pages (e.g 0002,0003)\n     * @return List of line segment images\n     * @throws IOException\n     */\n    public List<String> getLineSegmentImagesForCurrentProcess(List<String> pageIds) throws IOException {\n        List<String> LineSegmentsOfPage = new ArrayList<String>();\n        for (String pageId : processState.keySet()) {\n            for (String segmentId : processState.get(pageId).keySet()) {\n                for (String lineSegmentId : processState.get(pageId).get(segmentId).keySet()) {\n                    LineSegmentsOfPage.add(projConf.PAGE_DIR + pageId + File.separator + segmentId +\n                        File.separator + lineSegmentId + projConf.getImageExtensionByType(projectImageType));\n                }\n            }\n        }\n        return LineSegmentsOfPage;\n    }\n\n    /**\n     * Returns the progress of the process\n     *\n     * @return Progress percentage\n     * @throws IOException\n     */\n    public int getProgress() throws IOException {\n        // Prevent function from calculation progress if process is not running\n        if (!RecognitionRunning)\n            return progress;\n\n        int modifiedCount = 0;\n        if(imagesLastModified != null) {\n            for(String pagexml : imagesLastModified.keySet()) {\n                if(imagesLastModified.get(pagexml) < new File(pagexml).lastModified()) {\n                    modifiedCount++;\n                }\n            }\n            progress = (modifiedCount*100) / imagesLastModified.size();\n        } else {\n            progress = -1;\n        }\n        return progress;\n    }\n\n    /**\n     * Extracts checkpoints of a String joined by a whitespace\n     *\n     * @return List of checkpoints\n     * @throws IOException\n     */\n    public List<String> extractModelsOfJoinedString(String joinedckptString){\n        String [] checkpoints = joinedckptString.split(ProjectConfiguration.MODEL_EXT + \" \");\n        List<String> ckptList = new ArrayList<>();\n        Iterator <String> ckptIterator= Arrays.asList(checkpoints).iterator();\n        while (ckptIterator.hasNext()) {\n            String ckpt = ckptIterator.next();\n            if (ckptIterator.hasNext())\n                ckpt = ckpt + ProjectConfiguration.MODEL_EXT;\n            ckptList.add(ckpt);\n        }\n        return ckptList;\n    }\n    /**\n     * Executes OCR on a list of pages\n     * Achieved with the help of the external python program \"calamary-predict\"\n     *\n     * @param pageIds Identifiers of the pages (e.g 0002,0003)\n     * @param cmdArgs Command line arguments for \"calamary-predict\"\n     * @throws IOException\n     */\n    public void execute(List<String> pageIds, final List<String> cmdArgs) throws IOException {\n        RecognitionRunning = true;\n        progress = 0;\n\n        List<String> cmdArgsWork = new ArrayList<>(cmdArgs);\n\n        //// Estimate Skew\n        if (cmdArgsWork.contains(\"--estimate_skew\")) {\n        \t// Calculate the skew of all regions where none was calculated before\n        \tList<String> skewparams = new ArrayList<>();\n            skewparams.add(\"skewestimate\");\n        \tfinal int maxskewIndex = cmdArgsWork.indexOf(\"--maxskew\");\n        \tif(maxskewIndex > -1) {\n        \t\tskewparams.add(cmdArgsWork.remove(maxskewIndex));\n        \t\tskewparams.add(cmdArgsWork.remove(maxskewIndex));\n        \t}\n        \tfinal int skewstepsIndex = cmdArgsWork.indexOf(\"--skewsteps\");\n        \tif(skewstepsIndex > -1) {\n        \t\tskewparams.add(cmdArgsWork.remove(skewstepsIndex));\n        \t\tskewparams.add(cmdArgsWork.remove(skewstepsIndex));\n        \t}\n\n\t\t\t// Create temp json file with all segment images (to not overload parameter list)\n\t\t\t// Temp file in a temp folder named \"skew-<random numbers>.json\"\n\t\t\tFile segmentListFile = File.createTempFile(\"skew-\",\".json\");\n\t\t\tskewparams.add(segmentListFile.toString());\n\t\t\tsegmentListFile.deleteOnExit(); // Delete if OCR4all terminates\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\tArrayNode dataList = mapper.createArrayNode();\n\t\t\tfor (String pageId : pageIds) {\n\t\t\t\tArrayNode pageList = mapper.createArrayNode();\n\t\t\t\tpageList.add(projConf.getImageDirectoryByType(projectImageType) + pageId +\n\t\t\t\t\t\tprojConf.getImageExtensionByType(projectImageType));\n\t\t\t\tfinal String pageXML = projConf.OCR_DIR + pageId + projConf.CONF_EXT;\n\t\t\t\tpageList.add(pageXML);\n\n\t\t\t\t// Add affected line segment images with their absolute path to the json file\n\t\t\t\tdataList.add(pageList);\n\t\t\t}\n\t\t\tObjectWriter writer = mapper.writer();\n\t\t\twriter.writeValue(segmentListFile, dataList);\n\n            processHandler = new ProcessHandler();\n            processHandler.setFetchProcessConsole(true);\n            processHandler.startProcess(\"ocr4all-helper-scripts\", skewparams, false);\n\n        \tcmdArgsWork.remove(\"--estimate_skew\");\n        }\n\n\n        //// Recognize\n\t\t// Reset recognition data\n\t\tdeleteOldFiles(pageIds);\n\t\tinitialize(pageIds);\n\n        int index;\n        if (cmdArgsWork.contains(\"--checkpoint\")) {\n            index = cmdArgsWork.indexOf(\"--checkpoint\");\n            for(String ckpt : extractModelsOfJoinedString(cmdArgsWork.get(index + 1))) {\n                if (!new File(ckpt).exists())\n                    throw new IOException(\"Model does not exist under the specified path\");\n            }\n        }\n\n        List<String> command = new ArrayList<>();\n        // Ugly hack but helpers will be rewritten for the next release anyways. Don't use as basis for future code!\n        if(cmdArgsWork.contains(\"--data.output_glyphs\")){\n            cmdArgsWork.remove(\"--data.output_glyphs\");\n            command.add(\"--data.output_glyphs\");\n            command.add(\"True\");\n        }\n        if(cmdArgsWork.contains(\"--data.output_confidences\")){\n            cmdArgsWork.remove(\"--data.output_confidences\");\n            command.add(\"--data.output_confidences\");\n            command.add(\"True\");\n        }\n\n        command.add(\"--data.images\");\n        // Create temp json file with all segment images (to not overload parameter list)\n\t\t// Temp file in a temp folder named \"calamari-<random numbers>.json\"\n        File segmentListFile = File.createTempFile(\"calamari-\",\".files\");\n        segmentListFile.deleteOnExit();\n\n        List<String> content = new ArrayList<>();\n        for (String pageId : pageIds) {\n            // Add affected images with their absolute path to the file\n            content.add(projConf.getImageDirectoryByType(projectImageType) + pageId +\n                                projConf.getImageExtensionByType(projectImageType));\n        }\n        Files.write(segmentListFile.toPath(), content, StandardOpenOption.APPEND);\n        command.add(segmentListFile.toString());\n\n        //Add checkpoints\n        Iterator<String> cmdArgsIterator = cmdArgsWork.iterator();\n        while (cmdArgsIterator.hasNext()) {\n            String arg = cmdArgsIterator.next();\n            command.add(arg);\n            if (arg.equals(\"--checkpoint\") && cmdArgsIterator.hasNext()) {\n                command.addAll(extractModelsOfJoinedString(cmdArgsIterator.next()));\n            }\n        }\n\n        command.add(\"--data\");\n        command.add(\"PageXML\");\n        // Set output extension to input extension in order to overwrite the original file\n        // (default would've been .pred.xml)\n        command.add(\"--data.gt_extension\");\n        command.add(\".xml\");\n        command.add(\"--data.pred_extension\");\n        command.add(\".xml\");\n\n        command.add(\"--data.text_index\");\n        command.add(\"1\");\n\n        command.add(\"--verbose\");\n        command.add(\"True\");\n\n        command.add(\"--predictor.progress_bar\");\n        command.add(\"False\");\n\n        processHandler = new ProcessHandler();\n        processHandler.setFetchProcessConsole(true);\n        processHandler.startProcess(\"calamari-predict\", command, false);\n\n        // Execute progress update to fill processState data structure with correct values\n        getProgress();\n        // Process extension to ocropus-gpageseg script\n        createSkippedSegments();\n\n        progress = 100;\n        RecognitionRunning = false;\n\n        // Clean up temp segmentListFile\n        // segmentListFile.delete();\n    }\n\n    /**\n     * Resets the progress (use if an error occurs)\n     */\n    public void resetProgress() {\n        RecognitionRunning = false;\n        progress = -1;\n    }\n\n    /**\n     * Cancels the process\n     */\n    public void cancelProcess() {\n        if (processHandler != null)\n            processHandler.stopProcess();\n        RecognitionRunning = false;\n    }\n\n    /**\n     * Returns the Ids of the pages, for which line segmentation was already executed\n     *\n     * @return List with page ids\n     * @throws IOException\n     */\n    public ArrayList<String> getValidPageIds() throws IOException {\n        // Get all pages and check which ones are already line segmented\n        ArrayList<String> validPageIds = new ArrayList<String>();\n        ArrayList<String> allPageIds = genericHelper.getPageList(\"Original\");\n        for (String pageId : allPageIds) {\n            if (procStateCol.lineSegmentationState(pageId) == true)\n                validPageIds.add(pageId);\n        }\n\n        Collections.sort(validPageIds);\n        return validPageIds;\n    }\n\n    /**\n     * Deletion of old process related files\n     *\n     * @param pageIds Identifiers of the pages (e.g 0002,0003)\n     */\n    public void deleteOldFiles(List<String> pageIds) throws IOException {\n        // Delete potential TextEquivs already existing in the page xmls\n        for(String pageId : pageIds) {\n            File pageXML = new File(projConf.OCR_DIR + pageId + projConf.CONF_EXT);\n            if (!pageXML.exists())\n                return;\n\n            // Load pageXML and replace/delete all Textline text content\n            String pageXMLContent = new String(Files.readAllBytes(pageXML.toPath()));\n            pageXMLContent = pageXMLContent.replaceAll(\"\\\\<TextEquiv[^>]+?index=\\\"[^0]\\\"[^>]*?\\\\>[^<]*?\\\\<\\\\/TextEquiv\\\\>\", \"\");\n\n            // Save new pageXML\n            try (FileWriter fileWriter = new FileWriter(pageXML)) {\n                fileWriter.write(pageXMLContent);\n                fileWriter.flush();\n                fileWriter.close();\n            }\n    \t}\n    }\n\n    /**\n     * Creates the recognition files of the linesegments that were skipped by the ocropus-rpred script\n     *\n     * @throws IOException\n     */\n    public void createSkippedSegments() throws IOException{\n        for(String pageId : processState.keySet()) {\n            for(String segmentId :processState.get(pageId).keySet()) {\n                for (String lineSegmentId : processState.get(pageId).get(segmentId).keySet()) {\n                    if (processState.get(pageId).get(segmentId).get(lineSegmentId))\n                        continue;\n\n                    FileUtils.writeStringToFile(new File(projConf.PAGE_DIR + pageId + File.separator +\n                        segmentId + File.separator + lineSegmentId + projConf.REC_EXT), \"\", \"UTF8\");\n                }\n            }\n        }\n    }\n\n    /**\n     * Checks if process depending files already exist\n     *\n     * @param pageIds Identifiers of the pages (e.g 0002,0003)\n     * @return Information if files exist\n     */\n    public boolean doOldFilesExist(String[] pageIds) {\n        for (String pageId : pageIds) {\n            if (procStateCol.recognitionState(pageId))\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * Lists all available Models from the model directory\n     * Consider the subsequent information to load models correctly\n     *\n     * Possible model location directories:\n     * ProjectConfiguration.PROJ_MODEL_DEFAULT_DIR\n     * ProjectConfiguration.PROJ_MODEL_CUSTOM_DIR\n     *\n     * Model path structures on the filesystem:\n     * Default: OS_PATH/{TRAINING_IDENTIFIER}/{ID}.ckpt.json\n     * Custom:  OS_PATH/{PROJECT_NAME}/{TRAINING_IDENTIFIER}/{ID}.ckpt.json\n     *\n     * Example: /var/ocr4all/models/default/Baiter_000/Baiter.ckpt.json\n     * Display: Baiter_000/Baiter\n     * Example: /var/ocr4all/models/custom/Bibel/0/0.ckpt.json\n     * Display: Bibel/0/0\n     * Example: /var/ocr4all/models/custom/Bibel/heading/0.ckpt.json\n     * Display: Bibel/heading/0\n     *\n     * The models need to be in the following structure:\n     * ANY_PATH/{MODEL_NAME}/ANY_NAME.ckpt.json\n     *\n     * @return Map of models (key = modelName | value = path)\n     * @throws IOException\n     */\n    public static TreeMap<String, String> listModels() throws IOException{\n        TreeMap<String, String> models = new TreeMap<String, String>();\n\n        File modelsDir = new File(ProjectConfiguration.PROJ_MODEL_DIR);\n        if (!modelsDir.exists())\n            return models;\n\n        // Add all models to map (follow symbolic links on the filesystem due to Docker container)\n        Files.walk(Paths.get(ProjectConfiguration.PROJ_MODEL_DIR), FileVisitOption.FOLLOW_LINKS)\n        .map(Path::toFile)\n        .filter(fileEntry -> fileEntry.getName().endsWith(ProjectConfiguration.MODEL_EXT))\n        .forEach(\n            fileEntry -> {\n                // Remove OS path and model extension from display string (only display significant information)\n                String modelName = fileEntry.getAbsolutePath();\n                modelName = modelName.replace(ProjectConfiguration.PROJ_MODEL_DEFAULT_DIR, \"\");\n                modelName = modelName.replace(ProjectConfiguration.PROJ_MODEL_CUSTOM_DIR, \"\");\n                modelName = modelName.replace(ProjectConfiguration.MODEL_EXT, \"\");\n\n                models.put(modelName, fileEntry.getAbsolutePath());\n        });\n\n        return models;\n    }\n\n    /**\n     * Determines conflicts with the process\n     *\n     * @param currentProcesses Processes that are currently running\n     * @param inProcessFlow Indicates if the process is executed within the ProcessFlow\n     * @return Type of process conflict\n     */\n    public int getConflictType(List<String> currentProcesses, boolean inProcessFlow) {\n        return ProcessConflictDetector.recognitionConflict(currentProcesses, inProcessFlow);\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n\nwith the following error message:\n[ERROR] /OCR4all/src/main/java/de/uniwue/helper/RecognitionHelper.java:[242,42] cannot access com.fasterxml.jackson.core.exc.StreamWriteException  class file for com.fasterxml.jackson.core.exc.StreamWriteException not found\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\ncom.fasterxml.jackson.databind.cfg.MapperConfigBase.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ser.std.JsonValueSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.cfg.MapperConfig.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper.writeValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper.writeTree | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper._initForReading | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectWriter._configureGenerator | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.fasterxml.jackson.databind.ser.BeanSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.deser.BeanDeserializerBase.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.deser.BeanDeserializerBase.<init> | MUTATION | CONSTRUCTOR_NOW_PROTECTED\ncom.fasterxml.jackson.databind.ObjectWriter.writeValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper.readValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.DeserializationConfig.initialize | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.fasterxml.jackson.databind.ser.std.BeanSerializerBase.<init> | MUTATION | CONSTRUCTOR_NOW_PROTECTED\ncom.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.node.BaseJsonNode.toString | MUTATION | METHOD_NOW_FINAL\ncom.fasterxml.jackson.databind.ObjectMapper.readTree | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper.readValues | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.cfg.BaseSettings.<init> | DELETION | CONSTRUCTOR_REMOVED\nBefore proposing a fix, please analyze the situation and plan your approach within\n<repair strategy> tags:\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "project": "OCR4all",
    "libraryName": "jackson-databind",
    "libraryGroupID": "com.fasterxml.jackson.core",
    "newVersion": "2.13.4.1",
    "previousVersion": "2.10.0"
}