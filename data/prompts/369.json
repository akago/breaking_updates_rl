{
    "absolute_path_to_file_in_container": "/rxjava2-extras/src/main/java/com/github/davidmoten/rx2/flowable/Serialized.java",
    "errors": [
        {
            "line_number": 298,
            "message": "[ERROR] /rxjava2-extras/src/main/java/com/github/davidmoten/rx2/flowable/Serialized.java:[298,30] cannot find symbol",
            "additional_info": "  symbol:   method eof()\n  location: variable input of type com.esotericsoftware.kryo.io.Input",
            "file_name": "Serialized.java",
            "uid": "6100c29b-9b32-5e44-8eea-13d40bee74b8"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: kryo 4.0.3->5.0.0\n\nthe following client code fails: \n'''java\npackage com.github.davidmoten.rx2.flowable;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.concurrent.Callable;\n\nimport com.esotericsoftware.kryo.Kryo;\nimport com.esotericsoftware.kryo.io.Input;\nimport com.esotericsoftware.kryo.io.Output;\nimport com.github.davidmoten.rx2.Consumers;\n\nimport io.reactivex.Emitter;\nimport io.reactivex.Flowable;\nimport io.reactivex.functions.Consumer;\nimport io.reactivex.functions.Function;\n\n/**\n * Utility class for writing {@link Flowable} streams to\n * {@link ObjectOutputStream}s and reading {@link Flowable} streams of\n * indeterminate size from {@link ObjectInputStream}s.\n */\npublic final class Serialized {\n\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n\n    private Serialized() {\n        // prevent instantiation\n    }\n\n    /**\n     * Returns the deserialized objects from the given {@link InputStream} as a\n     * {@link Flowable} stream.\n     * \n     * @param ois\n     *            the {@link ObjectInputStream}\n     * @param <T>\n     *            the generic type of the returned stream\n     * @return the stream of deserialized objects from the {@link InputStream}\n     *         as an {@link Flowable}.\n     */\n    public static <T extends Serializable> Flowable<T> read(final ObjectInputStream ois) {\n        return Flowable.generate(new Consumer<Emitter<T>>() {\n            @Override\n            public void accept(Emitter<T> emitter) throws Exception {\n                try {\n                    @SuppressWarnings(\"unchecked\")\n                    T t = (T) ois.readObject();\n                    emitter.onNext(t);\n                } catch (EOFException e) {\n                    emitter.onComplete();\n                } catch (ClassNotFoundException e) {\n                    emitter.onError(e);\n                } catch (IOException e) {\n                    emitter.onError(e);\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns the deserialized objects from the given {@link File} as a\n     * {@link Flowable} stream. Uses buffer of size <code>bufferSize</code>\n     * buffer reads from the File.\n     * \n     * @param file\n     *            the input file\n     * @param bufferSize\n     *            the buffer size for reading bytes from the file.\n     * @param <T>\n     *            the generic type of the deserialized objects returned in the\n     *            stream\n     * @return the stream of deserialized objects from the {@link InputStream}\n     *         as a {@link Flowable}.\n     */\n    public static <T extends Serializable> Flowable<T> read(final File file, final int bufferSize) {\n        Callable<ObjectInputStream> resourceFactory = new Callable<ObjectInputStream>() {\n            @Override\n            public ObjectInputStream call() throws IOException {\n                return new ObjectInputStream(new BufferedInputStream(new FileInputStream(file), bufferSize));\n            }\n        };\n        @SuppressWarnings(\"unchecked\")\n        Function<ObjectInputStream, Flowable<T>> flowableFactory = (Function<ObjectInputStream, Flowable<T>>) (Function<?, ?>) ObjectInputStreamFlowableFactoryHolder.INSTANCE;\n        Consumer<ObjectInputStream> disposeAction = Consumers.close();\n        return Flowable.using(resourceFactory, flowableFactory, disposeAction, true);\n    }\n\n    // singleton instance using Holder pattern\n    private static final class ObjectInputStreamFlowableFactoryHolder {\n        static final Function<ObjectInputStream, Flowable<Serializable>> INSTANCE = new Function<ObjectInputStream, Flowable<Serializable>>() {\n\n            @Override\n            public Flowable<Serializable> apply(ObjectInputStream is) throws Exception {\n                return read(is);\n            }\n\n        };\n    }\n\n    /**\n     * Returns the deserialized objects from the given {@link File} as a\n     * {@link Flowable} stream. A buffer size of 8192 bytes is used by default.\n     * \n     * @param file\n     *            the input file containing serialized java objects\n     * @param <T>\n     *            the generic type of the deserialized objects returned in the\n     *            stream\n     * @return the stream of deserialized objects from the {@link InputStream}\n     *         as an {@link Flowable}.\n     */\n    public static <T extends Serializable> Flowable<T> read(final File file) {\n        return read(file, DEFAULT_BUFFER_SIZE);\n    }\n\n    /**\n     * Returns a duplicate of the input stream but with the side effect that\n     * emissions from the source are written to the {@link ObjectOutputStream}.\n     * \n     * @param source\n     *            the source of objects to write\n     * @param oos\n     *            the output stream to write to\n     * @param <T>\n     *            the generic type of the objects being serialized\n     * @return re-emits the input stream\n     */\n    public static <T extends Serializable> Flowable<T> write(Flowable<T> source, final ObjectOutputStream oos) {\n        return source.doOnNext(new Consumer<T>() {\n\n            @Override\n            public void accept(T t) throws IOException {\n                oos.writeObject(t);\n            }\n        });\n    }\n\n    /**\n     * Writes the source stream to the given file in given append mode and using\n     * the given buffer size.\n     * \n     * @param source\n     *            flowable stream to write\n     * @param file\n     *            file to write to\n     * @param append\n     *            if true writes are appended to file otherwise overwrite the\n     *            file\n     * @param bufferSize\n     *            the buffer size in bytes to use.\n     * @param <T>\n     *            the generic type of the input stream\n     * @return re-emits the input stream\n     */\n    public static <T extends Serializable> Flowable<T> write(final Flowable<T> source, final File file,\n            final boolean append, final int bufferSize) {\n        Callable<ObjectOutputStream> resourceFactory = new Callable<ObjectOutputStream>() {\n            @Override\n            public ObjectOutputStream call() throws IOException {\n                return new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(file, append), bufferSize));\n            }\n        };\n        Function<ObjectOutputStream, Flowable<T>> flowableFactory = new Function<ObjectOutputStream, Flowable<T>>() {\n\n            @Override\n            public Flowable<T> apply(ObjectOutputStream oos) {\n                return write(source, oos);\n            }\n        };\n        Consumer<ObjectOutputStream> disposeAction = Consumers.close();\n        return Flowable.using(resourceFactory, flowableFactory, disposeAction, true);\n    }\n\n    /**\n     * Writes the source stream to the given file in given append mode and using\n     * the a buffer size of 8192 bytes.\n     * \n     * @param source\n     *            flowable stream to write\n     * @param file\n     *            file to write to\n     * @param append\n     *            if true writes are appended to file otherwise overwrite the\n     *            file\n     * @param <T>\n     *            the generic type of the input stream\n     * @return re-emits the input stream\n     */\n    public static <T extends Serializable> Flowable<T> write(final Flowable<T> source, final File file,\n            final boolean append) {\n        return write(source, file, append, DEFAULT_BUFFER_SIZE);\n    }\n\n    /**\n     * Writes the source stream to the given file in given append mode and using\n     * the a buffer size of 8192 bytes.\n     * \n     * @param source\n     *            flowable stream to write\n     * @param file\n     *            file to write to\n     * @param <T>\n     *            the generic type of the input stream\n     * @return re-emits the input stream\n     */\n    public static <T extends Serializable> Flowable<T> write(final Flowable<T> source, final File file) {\n        return write(source, file, false, DEFAULT_BUFFER_SIZE);\n    }\n\n    public static KryoBuilder kryo() {\n        return kryo(new Kryo());\n    }\n\n    public static KryoBuilder kryo(Kryo kryo) {\n        return new KryoBuilder(kryo);\n    }\n\n    public static class KryoBuilder {\n\n        private static final int DEFAULT_BUFFER_SIZE = 4096;\n\n        private final Kryo kryo;\n\n        private KryoBuilder(Kryo kryo) {\n            this.kryo = kryo;\n        }\n\n        public <T> Flowable<T> write(final Flowable<T> source, final File file) {\n            return write(source, file, false, DEFAULT_BUFFER_SIZE);\n        }\n\n        public <T> Flowable<T> write(final Flowable<T> source, final File file, boolean append) {\n            return write(source, file, append, DEFAULT_BUFFER_SIZE);\n        }\n\n        public <T> Flowable<T> write(final Flowable<T> source, final File file, final boolean append,\n                final int bufferSize) {\n            Callable<Output> resourceFactory = new Callable<Output>() {\n                @Override\n                public Output call() throws FileNotFoundException {\n                    return new Output(new FileOutputStream(file, append), bufferSize);\n                }\n            };\n            Function<Output, Flowable<T>> flowableFactory = new Function<Output, Flowable<T>>() {\n\n                @Override\n                public Flowable<T> apply(final Output output) {\n                    return source.doOnNext(new Consumer<T>() {\n                        @Override\n                        public void accept(T t) {\n                            kryo.writeObject(output, t);\n                        }\n                    });\n                }\n            };\n            Consumer<Output> disposeAction = Consumers.close();\n            return Flowable.using(resourceFactory, flowableFactory, disposeAction, true);\n        }\n\n        public <T> Flowable<T> read(Class<T> cls, final File file) {\n            return read(cls, file, DEFAULT_BUFFER_SIZE);\n        }\n\n        public <T> Flowable<T> read(final Class<T> cls, final File file, final int bufferSize) {\n            Callable<Input> resourceFactory = new Callable<Input>() {\n                @Override\n                public Input call() throws FileNotFoundException {\n                    return new Input(new FileInputStream(file), bufferSize);\n                }\n            };\n            Function<Input, Flowable<T>> flowableFactory = new Function<Input, Flowable<T>>() {\n\n                @Override\n                public Flowable<T> apply(final Input input) {\n                    return read(cls, input);\n                }\n            };\n            Consumer<Input> disposeAction = Consumers.close();\n            return Flowable.using(resourceFactory, flowableFactory, disposeAction, true);\n        }\n\n        public <T> Flowable<T> read(final Class<T> cls, final Input input) {\n\n            return Flowable.generate(new Consumer<Emitter<T>>() {\n\n                @Override\n                public void accept(Emitter<T> emitter) throws Exception {\n                    if (input.eof()) {\n                        emitter.onComplete();\n                    } else {\n                        T t = kryo.readObject(input, cls);\n                        emitter.onNext(t);\n                    }\n                }\n\n            });\n        }\n    }\n\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n                    if (input.eof()) {\nwith the following error message:\n[ERROR] /rxjava2-extras/src/main/java/com/github/davidmoten/rx2/flowable/Serialized.java:[298,30] cannot find symbol  symbol:   method eof()\n  location: variable input of type com.esotericsoftware.kryo.io.Input\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\ncom.esotericsoftware.kryo.Kryo.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.Kryo.addDefaultSerializer | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.io.Input.readFloat | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.Kryo.getAsmEnabled | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.serializers.FieldSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.Kryo.getStreamFactory | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.util.IntArray.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.Kryo.getFieldSerializerConfig | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.io.InputChunked.rewind | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.Kryo.setAsmEnabled | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.serializers.FieldSerializer$CachedField.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.Kryo.getTaggedFieldSerializerConfig | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.serializers.EnumNameSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.serializers.CollectionSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.io.ByteBufferInput.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.io.InputChunked.nextChunks | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.Kryo.setDefaultSerializer | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.Kryo.isWarnUnregisteredClasses | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy | DELETION | TYPE_REMOVED\ncom.esotericsoftware.kryo.Kryo.setStreamFactory | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.io.Input.readDouble | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.io.Input.eof | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.serializers.VersionFieldSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.Kryo.getGenericsResolver | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.io.ByteBufferOutput.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.io.Input.rewind | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "                    if (input.eof()) {",
    "error_message": "[ERROR] /rxjava2-extras/src/main/java/com/github/davidmoten/rx2/flowable/Serialized.java:[298,30] cannot find symbol  symbol:   method eof()\n  location: variable input of type com.esotericsoftware.kryo.io.Input",
    "api_diff": "Format: element | nature | kind\ncom.esotericsoftware.kryo.Kryo.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.Kryo.addDefaultSerializer | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.io.Input.readFloat | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.Kryo.getAsmEnabled | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.serializers.FieldSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.Kryo.getStreamFactory | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.util.IntArray.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.Kryo.getFieldSerializerConfig | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.io.InputChunked.rewind | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.Kryo.setAsmEnabled | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.serializers.FieldSerializer$CachedField.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.Kryo.getTaggedFieldSerializerConfig | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.serializers.EnumNameSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.serializers.CollectionSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.io.ByteBufferInput.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.io.InputChunked.nextChunks | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.Kryo.setDefaultSerializer | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.Kryo.isWarnUnregisteredClasses | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy | DELETION | TYPE_REMOVED\ncom.esotericsoftware.kryo.Kryo.setStreamFactory | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.io.Input.readDouble | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.io.Input.eof | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.serializers.VersionFieldSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.Kryo.getGenericsResolver | DELETION | METHOD_REMOVED\ncom.esotericsoftware.kryo.io.ByteBufferOutput.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.esotericsoftware.kryo.io.Input.rewind | DELETION | METHOD_REMOVED",
    "original_code": "package com.github.davidmoten.rx2.flowable;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.concurrent.Callable;\n\nimport com.esotericsoftware.kryo.Kryo;\nimport com.esotericsoftware.kryo.io.Input;\nimport com.esotericsoftware.kryo.io.Output;\nimport com.github.davidmoten.rx2.Consumers;\n\nimport io.reactivex.Emitter;\nimport io.reactivex.Flowable;\nimport io.reactivex.functions.Consumer;\nimport io.reactivex.functions.Function;\n\n/**\n * Utility class for writing {@link Flowable} streams to\n * {@link ObjectOutputStream}s and reading {@link Flowable} streams of\n * indeterminate size from {@link ObjectInputStream}s.\n */\npublic final class Serialized {\n\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n\n    private Serialized() {\n        // prevent instantiation\n    }\n\n    /**\n     * Returns the deserialized objects from the given {@link InputStream} as a\n     * {@link Flowable} stream.\n     * \n     * @param ois\n     *            the {@link ObjectInputStream}\n     * @param <T>\n     *            the generic type of the returned stream\n     * @return the stream of deserialized objects from the {@link InputStream}\n     *         as an {@link Flowable}.\n     */\n    public static <T extends Serializable> Flowable<T> read(final ObjectInputStream ois) {\n        return Flowable.generate(new Consumer<Emitter<T>>() {\n            @Override\n            public void accept(Emitter<T> emitter) throws Exception {\n                try {\n                    @SuppressWarnings(\"unchecked\")\n                    T t = (T) ois.readObject();\n                    emitter.onNext(t);\n                } catch (EOFException e) {\n                    emitter.onComplete();\n                } catch (ClassNotFoundException e) {\n                    emitter.onError(e);\n                } catch (IOException e) {\n                    emitter.onError(e);\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns the deserialized objects from the given {@link File} as a\n     * {@link Flowable} stream. Uses buffer of size <code>bufferSize</code>\n     * buffer reads from the File.\n     * \n     * @param file\n     *            the input file\n     * @param bufferSize\n     *            the buffer size for reading bytes from the file.\n     * @param <T>\n     *            the generic type of the deserialized objects returned in the\n     *            stream\n     * @return the stream of deserialized objects from the {@link InputStream}\n     *         as a {@link Flowable}.\n     */\n    public static <T extends Serializable> Flowable<T> read(final File file, final int bufferSize) {\n        Callable<ObjectInputStream> resourceFactory = new Callable<ObjectInputStream>() {\n            @Override\n            public ObjectInputStream call() throws IOException {\n                return new ObjectInputStream(new BufferedInputStream(new FileInputStream(file), bufferSize));\n            }\n        };\n        @SuppressWarnings(\"unchecked\")\n        Function<ObjectInputStream, Flowable<T>> flowableFactory = (Function<ObjectInputStream, Flowable<T>>) (Function<?, ?>) ObjectInputStreamFlowableFactoryHolder.INSTANCE;\n        Consumer<ObjectInputStream> disposeAction = Consumers.close();\n        return Flowable.using(resourceFactory, flowableFactory, disposeAction, true);\n    }\n\n    // singleton instance using Holder pattern\n    private static final class ObjectInputStreamFlowableFactoryHolder {\n        static final Function<ObjectInputStream, Flowable<Serializable>> INSTANCE = new Function<ObjectInputStream, Flowable<Serializable>>() {\n\n            @Override\n            public Flowable<Serializable> apply(ObjectInputStream is) throws Exception {\n                return read(is);\n            }\n\n        };\n    }\n\n    /**\n     * Returns the deserialized objects from the given {@link File} as a\n     * {@link Flowable} stream. A buffer size of 8192 bytes is used by default.\n     * \n     * @param file\n     *            the input file containing serialized java objects\n     * @param <T>\n     *            the generic type of the deserialized objects returned in the\n     *            stream\n     * @return the stream of deserialized objects from the {@link InputStream}\n     *         as an {@link Flowable}.\n     */\n    public static <T extends Serializable> Flowable<T> read(final File file) {\n        return read(file, DEFAULT_BUFFER_SIZE);\n    }\n\n    /**\n     * Returns a duplicate of the input stream but with the side effect that\n     * emissions from the source are written to the {@link ObjectOutputStream}.\n     * \n     * @param source\n     *            the source of objects to write\n     * @param oos\n     *            the output stream to write to\n     * @param <T>\n     *            the generic type of the objects being serialized\n     * @return re-emits the input stream\n     */\n    public static <T extends Serializable> Flowable<T> write(Flowable<T> source, final ObjectOutputStream oos) {\n        return source.doOnNext(new Consumer<T>() {\n\n            @Override\n            public void accept(T t) throws IOException {\n                oos.writeObject(t);\n            }\n        });\n    }\n\n    /**\n     * Writes the source stream to the given file in given append mode and using\n     * the given buffer size.\n     * \n     * @param source\n     *            flowable stream to write\n     * @param file\n     *            file to write to\n     * @param append\n     *            if true writes are appended to file otherwise overwrite the\n     *            file\n     * @param bufferSize\n     *            the buffer size in bytes to use.\n     * @param <T>\n     *            the generic type of the input stream\n     * @return re-emits the input stream\n     */\n    public static <T extends Serializable> Flowable<T> write(final Flowable<T> source, final File file,\n            final boolean append, final int bufferSize) {\n        Callable<ObjectOutputStream> resourceFactory = new Callable<ObjectOutputStream>() {\n            @Override\n            public ObjectOutputStream call() throws IOException {\n                return new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(file, append), bufferSize));\n            }\n        };\n        Function<ObjectOutputStream, Flowable<T>> flowableFactory = new Function<ObjectOutputStream, Flowable<T>>() {\n\n            @Override\n            public Flowable<T> apply(ObjectOutputStream oos) {\n                return write(source, oos);\n            }\n        };\n        Consumer<ObjectOutputStream> disposeAction = Consumers.close();\n        return Flowable.using(resourceFactory, flowableFactory, disposeAction, true);\n    }\n\n    /**\n     * Writes the source stream to the given file in given append mode and using\n     * the a buffer size of 8192 bytes.\n     * \n     * @param source\n     *            flowable stream to write\n     * @param file\n     *            file to write to\n     * @param append\n     *            if true writes are appended to file otherwise overwrite the\n     *            file\n     * @param <T>\n     *            the generic type of the input stream\n     * @return re-emits the input stream\n     */\n    public static <T extends Serializable> Flowable<T> write(final Flowable<T> source, final File file,\n            final boolean append) {\n        return write(source, file, append, DEFAULT_BUFFER_SIZE);\n    }\n\n    /**\n     * Writes the source stream to the given file in given append mode and using\n     * the a buffer size of 8192 bytes.\n     * \n     * @param source\n     *            flowable stream to write\n     * @param file\n     *            file to write to\n     * @param <T>\n     *            the generic type of the input stream\n     * @return re-emits the input stream\n     */\n    public static <T extends Serializable> Flowable<T> write(final Flowable<T> source, final File file) {\n        return write(source, file, false, DEFAULT_BUFFER_SIZE);\n    }\n\n    public static KryoBuilder kryo() {\n        return kryo(new Kryo());\n    }\n\n    public static KryoBuilder kryo(Kryo kryo) {\n        return new KryoBuilder(kryo);\n    }\n\n    public static class KryoBuilder {\n\n        private static final int DEFAULT_BUFFER_SIZE = 4096;\n\n        private final Kryo kryo;\n\n        private KryoBuilder(Kryo kryo) {\n            this.kryo = kryo;\n        }\n\n        public <T> Flowable<T> write(final Flowable<T> source, final File file) {\n            return write(source, file, false, DEFAULT_BUFFER_SIZE);\n        }\n\n        public <T> Flowable<T> write(final Flowable<T> source, final File file, boolean append) {\n            return write(source, file, append, DEFAULT_BUFFER_SIZE);\n        }\n\n        public <T> Flowable<T> write(final Flowable<T> source, final File file, final boolean append,\n                final int bufferSize) {\n            Callable<Output> resourceFactory = new Callable<Output>() {\n                @Override\n                public Output call() throws FileNotFoundException {\n                    return new Output(new FileOutputStream(file, append), bufferSize);\n                }\n            };\n            Function<Output, Flowable<T>> flowableFactory = new Function<Output, Flowable<T>>() {\n\n                @Override\n                public Flowable<T> apply(final Output output) {\n                    return source.doOnNext(new Consumer<T>() {\n                        @Override\n                        public void accept(T t) {\n                            kryo.writeObject(output, t);\n                        }\n                    });\n                }\n            };\n            Consumer<Output> disposeAction = Consumers.close();\n            return Flowable.using(resourceFactory, flowableFactory, disposeAction, true);\n        }\n\n        public <T> Flowable<T> read(Class<T> cls, final File file) {\n            return read(cls, file, DEFAULT_BUFFER_SIZE);\n        }\n\n        public <T> Flowable<T> read(final Class<T> cls, final File file, final int bufferSize) {\n            Callable<Input> resourceFactory = new Callable<Input>() {\n                @Override\n                public Input call() throws FileNotFoundException {\n                    return new Input(new FileInputStream(file), bufferSize);\n                }\n            };\n            Function<Input, Flowable<T>> flowableFactory = new Function<Input, Flowable<T>>() {\n\n                @Override\n                public Flowable<T> apply(final Input input) {\n                    return read(cls, input);\n                }\n            };\n            Consumer<Input> disposeAction = Consumers.close();\n            return Flowable.using(resourceFactory, flowableFactory, disposeAction, true);\n        }\n\n        public <T> Flowable<T> read(final Class<T> cls, final Input input) {\n\n            return Flowable.generate(new Consumer<Emitter<T>>() {\n\n                @Override\n                public void accept(Emitter<T> emitter) throws Exception {\n                    if (input.eof()) {\n                        emitter.onComplete();\n                    } else {\n                        T t = kryo.readObject(input, cls);\n                        emitter.onNext(t);\n                    }\n                }\n\n            });\n        }\n    }\n\n}\n",
    "project": "rxjava2-extras",
    "libraryName": "kryo",
    "libraryGroupID": "com.esotericsoftware",
    "newVersion": "5.0.0",
    "previousVersion": "4.0.3",
    "breakingCommit": "1c060c19a702b81e4d65f433dcce848e2d499367"
}