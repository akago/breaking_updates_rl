{
    "relative_path": "xsline/src/main/java/com/yegor256/xsline/StSchema.java",
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nthe following client code fails: \n'''java\n/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2022-2025 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage com.yegor256.xsline;\n\nimport com.jcabi.log.Logger;\nimport com.jcabi.xml.XML;\nimport com.jcabi.xml.XMLDocument;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport org.xml.sax.SAXParseException;\n\n/**\n * A {@link Shift} that validates incoming XML against encapsulated XSD schema.\n *\n * <p>If you want to validate XML documents after each shift in your\n * train, you can use {@link TrAfter} in combination with {@link StSchema}.</p>\n *\n * <p>If the location of the XSD schema is embedded into the XML document\n * itself, either with the help of the {@code xsi:schemaLocation} attribute\n * or the {@code xsi:noNamespaceSchemaLocation} attribute, you can use\n * {@link StSchema} constructor without any arguments. If this constructor\n * is used but the XML document doesn't contain any schema location hints,\n * a runtime exception will be thrown.</p>\n *\n * @since 0.10.0\n */\npublic final class StSchema extends StEnvelope {\n\n    /**\n     * Ctor.\n     */\n    public StSchema() {\n        this((XML) null);\n    }\n\n    /**\n     * Ctor.\n     * @param path The path of XSD document in classpath\n     */\n    public StSchema(final String path) {\n        this(StSchema.make(path));\n    }\n\n    /**\n     * Ctor.\n     * @param path The path of XSD document\n     * @throws FileNotFoundException If file not found\n     */\n    public StSchema(final Path path) throws FileNotFoundException {\n        this(new XMLDocument(path));\n    }\n\n    /**\n     * Ctor.\n     * @param schema The schema\n     */\n    public StSchema(final XML schema) {\n        super(\n            new StLambda(\n                \"xsd-schema\",\n                xml -> StSchema.validate(schema, xml)\n            )\n        );\n    }\n\n    /**\n     * Validate it.\n     * @param schema The schema\n     * @param xml The XML\n     * @return The same XML\n     */\n    private static XML validate(final XML schema, final XML xml) {\n        final Collection<SAXParseException> violations;\n        if (schema == null) {\n            violations = xml.validate();\n        } else {\n            violations = xml.validate(schema);\n        }\n        if (!violations.isEmpty()) {\n            final Collection<String> msgs = new ArrayList<>(violations.size());\n            for (final SAXParseException violation : violations) {\n                msgs.add(StSchema.asMessage(violation));\n            }\n            if (Logger.isDebugEnabled(StSchema.class)) {\n                Logger.debug(\n                    StSchema.class,\n                    \"There are %d XSD violation(s) in this XML %[list]s:%n%s\",\n                    violations.size(), msgs,\n                    xml\n                );\n            }\n            throw new IllegalStateException(\n                String.format(\n                    \"There are %d XSD violation(s): %s\",\n                    violations.size(),\n                    String.join(\"; \", msgs)\n                )\n            );\n        }\n        return xml;\n    }\n\n    /**\n     * Turn violation into a message.\n     * @param violation The violation\n     * @return The message\n     */\n    private static String asMessage(final SAXParseException violation) {\n        final StringBuilder msg = new StringBuilder(100);\n        if (violation.getLineNumber() >= 0) {\n            msg.append('#').append(violation.getLineNumber());\n            if (violation.getColumnNumber() >= 0) {\n                msg.append(':').append(violation.getColumnNumber());\n            }\n            msg.append(' ');\n        }\n        msg.append(violation.getLocalizedMessage());\n        if (violation.getException() != null) {\n            msg.append(\" (\")\n                .append(violation.getException().getClass().getSimpleName())\n                .append(')');\n        }\n        return msg.toString();\n    }\n\n    /**\n     * Make XSD safely.\n     * @param path Path in classpath\n     * @return XSD\n     */\n    private static XML make(final String path) {\n        final URL url = StClasspath.class.getResource(path);\n        if (url == null) {\n            throw new IllegalArgumentException(\n                String.format(\n                    \"Path '%s' not found in classpath\", path\n                )\n            );\n        }\n        try {\n            return new XMLDocument(url);\n        } catch (final IOException ex) {\n            throw new IllegalStateException(\n                String.format(\"Failed to read '%s' from classpath\", path),\n                ex\n            );\n        }\n    }\n\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n\nwith the following error message:\n[ERROR] /xsline/src/main/java/com/yegor256/xsline/StSchema.java:[100,29] no suitable method found for validate(no arguments)    method com.jcabi.xml.XML.validate(org.w3c.dom.ls.LSResourceResolver) is not applicable\n      (actual and formal argument lists differ in length)\n    method com.jcabi.xml.XML.validate(com.jcabi.xml.XML) is not applicable\n      (actual and formal argument lists differ in length)\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\ncom.jcabi.xml.StrictXML.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.jcabi.xml.XMLDocument.validate | DELETION | METHOD_REMOVED\ncom.jcabi.xml.XML.validate | DELETION | METHOD_REMOVED\ncom.jcabi.xml.SaxonDocument.validate | DELETION | METHOD_REMOVED\ncom.jcabi.xml.XML | ADDITION | METHOD_ADDED_TO_INTERFACE\ncom.jcabi.xml.StrictXML.validate | DELETION | METHOD_REMOVED\nBefore proposing a fix, please analyze the situation and plan your approach within\n<repair strategy> tags:\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "project": "xsline",
    "libraryName": "jcabi-xml",
    "libraryGroupID": "com.jcabi",
    "newVersion": "0.33.5",
    "previousVersion": "0.31.0"
}