{
    "absolute_path_to_file_in_container": "/plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java",
    "errors": [
        {
            "line_number": 27,
            "message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[27,36] cannot find symbol",
            "additional_info": "  symbol:   class ThresholdingOutputStream\n  location: package org.apache.commons.io.output",
            "file_name": "OffloadingOutputStream.java",
            "uid": "753194de-f08b-5af4-bdee-ec87bb425cd3"
        },
        {
            "line_number": 32,
            "message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[32,38] cannot find symbol",
            "additional_info": "  symbol: class ThresholdingOutputStream",
            "file_name": "OffloadingOutputStream.java",
            "uid": "6c2a1dbe-501f-5d1b-8fb2-c34e1cbd8569"
        },
        {
            "line_number": 129,
            "message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[129,5] method does not override or implement a method from a supertype",
            "additional_info": "",
            "file_name": "OffloadingOutputStream.java",
            "uid": "d0ceeca0-9daa-5aa7-b5ef-2f5e3a0dcc9c"
        },
        {
            "line_number": 143,
            "message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[143,5] method does not override or implement a method from a supertype",
            "additional_info": "",
            "file_name": "OffloadingOutputStream.java",
            "uid": "d0ceeca0-9daa-5aa7-b5ef-2f5e3a0dcc9c"
        },
        {
            "line_number": 207,
            "message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[207,5] method does not override or implement a method from a supertype",
            "additional_info": "",
            "file_name": "OffloadingOutputStream.java",
            "uid": "d0ceeca0-9daa-5aa7-b5ef-2f5e3a0dcc9c"
        },
        {
            "line_number": 210,
            "message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[210,9] cannot find symbol",
            "additional_info": "  symbol:   variable super\n  location: class org.codehaus.plexus.archiver.zip.OffloadingOutputStream",
            "file_name": "OffloadingOutputStream.java",
            "uid": "4e02fe71-a95e-57d3-bf11-130b2e63f28a"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: commons-io 2.11.0->20030203.000550\n\nthe following client code fails: \n'''java\n/*\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.codehaus.plexus.archiver.zip;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.SequenceInputStream;\nimport java.nio.file.Files;\n\nimport org.apache.commons.io.output.ThresholdingOutputStream;\n\n/**\n * Offloads to disk when a given memory consumption has been reacehd\n */\nclass OffloadingOutputStream extends ThresholdingOutputStream\n{\n\n    // ----------------------------------------------------------- Data members\n\n    /**\n     * The output stream to which data will be written prior to the theshold\n     * being reached.\n     */\n    private ByteArrayOutputStream memoryOutputStream;\n\n    /**\n     * The output stream to which data will be written at any given time. This\n     * will always be one of <code>memoryOutputStream</code> or\n     * <code>diskOutputStream</code>.\n     */\n    private OutputStream currentOutputStream;\n\n    /**\n     * The file to which output will be directed if the threshold is exceeded.\n     */\n    private File outputFile = null;\n\n    /**\n     * The temporary file prefix.\n     */\n    private final String prefix;\n\n    /**\n     * The temporary file suffix.\n     */\n    private final String suffix;\n\n    /**\n     * The directory to use for temporary files.\n     */\n    private final File directory;\n\n    /**\n     * True when close() has been called successfully.\n     */\n    private boolean closed = false;\n\n    // ----------------------------------------------------------- Constructors\n\n    /**\n     * Constructs an instance of this class which will trigger an event at the\n     * specified threshold, and save data to a temporary file beyond that point.\n     *\n     * @param threshold The number of bytes at which to trigger an event.\n     * @param prefix Prefix to use for the temporary file.\n     * @param suffix Suffix to use for the temporary file.\n     * @param directory Temporary file directory.\n     *\n     * @since 1.4\n     */\n    public OffloadingOutputStream( int threshold, String prefix, String suffix, File directory )\n    {\n        this( threshold, null, prefix, suffix, directory );\n        if ( prefix == null )\n        {\n            throw new IllegalArgumentException( \"Temporary file prefix is missing\" );\n        }\n    }\n\n    /**\n     * Constructs an instance of this class which will trigger an event at the\n     * specified threshold, and save data either to a file beyond that point.\n     *\n     * @param threshold The number of bytes at which to trigger an event.\n     * @param outputFile The file to which data is saved beyond the threshold.\n     * @param prefix Prefix to use for the temporary file.\n     * @param suffix Suffix to use for the temporary file.\n     * @param directory Temporary file directory.\n     */\n    private OffloadingOutputStream( int threshold, File outputFile, String prefix, String suffix, File directory )\n    {\n        super( threshold );\n        this.outputFile = outputFile;\n\n        memoryOutputStream = new ByteArrayOutputStream( threshold / 10 );\n        currentOutputStream = memoryOutputStream;\n        this.prefix = prefix;\n        this.suffix = suffix;\n        this.directory = directory;\n    }\n\n    // --------------------------------------- ThresholdingOutputStream methods\n\n    /**\n     * Returns the current output stream. This may be memory based or disk\n     * based, depending on the current state with respect to the threshold.\n     *\n     * @return The underlying output stream.\n     *\n     * @exception java.io.IOException if an error occurs.\n     */\n    @Override\n    protected OutputStream getStream() throws IOException\n    {\n        return currentOutputStream;\n    }\n\n    /**\n     * Switches the underlying output stream from a memory based stream to one\n     * that is backed by disk. This is the point at which we realise that too\n     * much data is being written to keep in memory, so we elect to switch to\n     * disk-based storage.\n     *\n     * @exception java.io.IOException if an error occurs.\n     */\n    @Override\n    protected void thresholdReached() throws IOException\n    {\n        if ( prefix != null )\n        {\n            outputFile = File.createTempFile( prefix, suffix, directory );\n        }\n        currentOutputStream = Files.newOutputStream( outputFile.toPath() );\n    }\n\n    public InputStream getInputStream() throws IOException\n    {\n\n        InputStream memoryAsInput = memoryOutputStream.toInputStream();\n        if ( outputFile == null )\n        {\n            return memoryAsInput;\n        }\n        return new SequenceInputStream( memoryAsInput, Files.newInputStream( outputFile.toPath() ) );\n    }\n\n    // --------------------------------------------------------- Public methods\n\n    /**\n     * Returns the data for this output stream as an array of bytes, assuming\n     * that the data has been retained in memory. If the data was written to\n     * disk, this method returns <code>null</code>.\n     *\n     * @return The data for this output stream, or <code>null</code> if no such\n     * data is available.\n     */\n    public byte[] getData()\n    {\n        if ( memoryOutputStream != null )\n        {\n            return memoryOutputStream.toByteArray();\n        }\n        return null;\n    }\n\n    /**\n     * Returns either the output file specified in the constructor or\n     * the temporary file created or null.\n     * <p>\n     * If the constructor specifying the file is used then it returns that\n     * same output file, even when threshold has not been reached.\n     * <p>\n     * If constructor specifying a temporary file prefix/suffix is used\n     * then the temporary file created once the threshold is reached is returned\n     * If the threshold was not reached then <code>null</code> is returned.\n     *\n     * @return The file for this output stream, or <code>null</code> if no such\n     * file exists.\n     */\n    public File getFile()\n    {\n        return outputFile;\n    }\n\n    /**\n     * Closes underlying output stream, and mark this as closed\n     *\n     * @exception java.io.IOException if an error occurs.\n     */\n    @Override\n    public void close() throws IOException\n    {\n        super.close();\n        closed = true;\n        currentOutputStream.close();\n    }\n\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport org.apache.commons.io.output.ThresholdingOutputStream;\nclass OffloadingOutputStream extends ThresholdingOutputStream\n    @Override\n    @Override\n    @Override\n        super.close();\nwith the following error message:\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[27,36] cannot find symbol  symbol:   class ThresholdingOutputStream\n  location: package org.apache.commons.io.output\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[32,38] cannot find symbol  symbol: class ThresholdingOutputStream\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[129,5] method does not override or implement a method from a supertype\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[143,5] method does not override or implement a method from a supertype\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[207,5] method does not override or implement a method from a supertype\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[210,9] cannot find symbol  symbol:   variable super\n  location: class org.codehaus.plexus.archiver.zip.OffloadingOutputStream\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.apache.commons.io.output.ThresholdingOutputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream.afterRead | DELETION | METHOD_REMOVED\norg.apache.commons.io.output.ByteArrayOutputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.BoundedInputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.output.DemuxOutputStream.close | MUTATION | METHOD_NOW_FINAL\njava.io.InputStream.readNBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.filefilter.PrefixFileFilter.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.output.LockableFileWriter.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.io.InputStream.skipNBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.HexDump.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.input.CountingInputStream.resetCount | DELETION | METHOD_REMOVED\njava.io.InputStream.transferTo | DELETION | METHOD_REMOVED\norg.apache.commons.io.input.CountingInputStream.resetByteCount | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.isDirectory | DELETION | METHOD_REMOVED\norg.apache.commons.io.output.CountingOutputStream.getByteCount | DELETION | METHOD_REMOVED\norg.apache.commons.io.input.ClosedInputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream.getByteCount | DELETION | METHOD_REMOVED\njava.io.InputStream.readAllBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.input.DemuxInputStream.close | MUTATION | METHOD_NOW_FINAL\norg.apache.commons.io.output.DemuxOutputStream.write | MUTATION | METHOD_NOW_FINAL\norg.apache.commons.io.output.NullPrintStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream | MUTATION | SUPERTYPE_REMOVED\njava.io.InputStream.nullInputStream | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.write | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import org.apache.commons.io.output.ThresholdingOutputStream;\nclass OffloadingOutputStream extends ThresholdingOutputStream\n    @Override\n    @Override\n    @Override\n        super.close();",
    "error_message": "[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[27,36] cannot find symbol  symbol:   class ThresholdingOutputStream\n  location: package org.apache.commons.io.output\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[32,38] cannot find symbol  symbol: class ThresholdingOutputStream\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[129,5] method does not override or implement a method from a supertype\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[143,5] method does not override or implement a method from a supertype\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[207,5] method does not override or implement a method from a supertype\n[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[210,9] cannot find symbol  symbol:   variable super\n  location: class org.codehaus.plexus.archiver.zip.OffloadingOutputStream",
    "api_diff": "Format: element | nature | kind\norg.apache.commons.io.output.ThresholdingOutputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream.afterRead | DELETION | METHOD_REMOVED\norg.apache.commons.io.output.ByteArrayOutputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.BoundedInputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.output.DemuxOutputStream.close | MUTATION | METHOD_NOW_FINAL\njava.io.InputStream.readNBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.filefilter.PrefixFileFilter.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.output.LockableFileWriter.<init> | DELETION | CONSTRUCTOR_REMOVED\njava.io.InputStream.skipNBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.HexDump.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.input.CountingInputStream.resetCount | DELETION | METHOD_REMOVED\njava.io.InputStream.transferTo | DELETION | METHOD_REMOVED\norg.apache.commons.io.input.CountingInputStream.resetByteCount | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.isDirectory | DELETION | METHOD_REMOVED\norg.apache.commons.io.output.CountingOutputStream.getByteCount | DELETION | METHOD_REMOVED\norg.apache.commons.io.input.ClosedInputStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream.getByteCount | DELETION | METHOD_REMOVED\njava.io.InputStream.readAllBytes | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.apache.commons.io.input.DemuxInputStream.close | MUTATION | METHOD_NOW_FINAL\norg.apache.commons.io.output.DemuxOutputStream.write | MUTATION | METHOD_NOW_FINAL\norg.apache.commons.io.output.NullPrintStream | DELETION | TYPE_REMOVED\norg.apache.commons.io.input.CountingInputStream | MUTATION | SUPERTYPE_REMOVED\njava.io.InputStream.nullInputStream | DELETION | METHOD_REMOVED\norg.apache.commons.io.FileUtils.write | DELETION | METHOD_REMOVED",
    "original_code": "/*\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.codehaus.plexus.archiver.zip;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.SequenceInputStream;\nimport java.nio.file.Files;\n\nimport org.apache.commons.io.output.ThresholdingOutputStream;\n\n/**\n * Offloads to disk when a given memory consumption has been reacehd\n */\nclass OffloadingOutputStream extends ThresholdingOutputStream\n{\n\n    // ----------------------------------------------------------- Data members\n\n    /**\n     * The output stream to which data will be written prior to the theshold\n     * being reached.\n     */\n    private ByteArrayOutputStream memoryOutputStream;\n\n    /**\n     * The output stream to which data will be written at any given time. This\n     * will always be one of <code>memoryOutputStream</code> or\n     * <code>diskOutputStream</code>.\n     */\n    private OutputStream currentOutputStream;\n\n    /**\n     * The file to which output will be directed if the threshold is exceeded.\n     */\n    private File outputFile = null;\n\n    /**\n     * The temporary file prefix.\n     */\n    private final String prefix;\n\n    /**\n     * The temporary file suffix.\n     */\n    private final String suffix;\n\n    /**\n     * The directory to use for temporary files.\n     */\n    private final File directory;\n\n    /**\n     * True when close() has been called successfully.\n     */\n    private boolean closed = false;\n\n    // ----------------------------------------------------------- Constructors\n\n    /**\n     * Constructs an instance of this class which will trigger an event at the\n     * specified threshold, and save data to a temporary file beyond that point.\n     *\n     * @param threshold The number of bytes at which to trigger an event.\n     * @param prefix Prefix to use for the temporary file.\n     * @param suffix Suffix to use for the temporary file.\n     * @param directory Temporary file directory.\n     *\n     * @since 1.4\n     */\n    public OffloadingOutputStream( int threshold, String prefix, String suffix, File directory )\n    {\n        this( threshold, null, prefix, suffix, directory );\n        if ( prefix == null )\n        {\n            throw new IllegalArgumentException( \"Temporary file prefix is missing\" );\n        }\n    }\n\n    /**\n     * Constructs an instance of this class which will trigger an event at the\n     * specified threshold, and save data either to a file beyond that point.\n     *\n     * @param threshold The number of bytes at which to trigger an event.\n     * @param outputFile The file to which data is saved beyond the threshold.\n     * @param prefix Prefix to use for the temporary file.\n     * @param suffix Suffix to use for the temporary file.\n     * @param directory Temporary file directory.\n     */\n    private OffloadingOutputStream( int threshold, File outputFile, String prefix, String suffix, File directory )\n    {\n        super( threshold );\n        this.outputFile = outputFile;\n\n        memoryOutputStream = new ByteArrayOutputStream( threshold / 10 );\n        currentOutputStream = memoryOutputStream;\n        this.prefix = prefix;\n        this.suffix = suffix;\n        this.directory = directory;\n    }\n\n    // --------------------------------------- ThresholdingOutputStream methods\n\n    /**\n     * Returns the current output stream. This may be memory based or disk\n     * based, depending on the current state with respect to the threshold.\n     *\n     * @return The underlying output stream.\n     *\n     * @exception java.io.IOException if an error occurs.\n     */\n    @Override\n    protected OutputStream getStream() throws IOException\n    {\n        return currentOutputStream;\n    }\n\n    /**\n     * Switches the underlying output stream from a memory based stream to one\n     * that is backed by disk. This is the point at which we realise that too\n     * much data is being written to keep in memory, so we elect to switch to\n     * disk-based storage.\n     *\n     * @exception java.io.IOException if an error occurs.\n     */\n    @Override\n    protected void thresholdReached() throws IOException\n    {\n        if ( prefix != null )\n        {\n            outputFile = File.createTempFile( prefix, suffix, directory );\n        }\n        currentOutputStream = Files.newOutputStream( outputFile.toPath() );\n    }\n\n    public InputStream getInputStream() throws IOException\n    {\n\n        InputStream memoryAsInput = memoryOutputStream.toInputStream();\n        if ( outputFile == null )\n        {\n            return memoryAsInput;\n        }\n        return new SequenceInputStream( memoryAsInput, Files.newInputStream( outputFile.toPath() ) );\n    }\n\n    // --------------------------------------------------------- Public methods\n\n    /**\n     * Returns the data for this output stream as an array of bytes, assuming\n     * that the data has been retained in memory. If the data was written to\n     * disk, this method returns <code>null</code>.\n     *\n     * @return The data for this output stream, or <code>null</code> if no such\n     * data is available.\n     */\n    public byte[] getData()\n    {\n        if ( memoryOutputStream != null )\n        {\n            return memoryOutputStream.toByteArray();\n        }\n        return null;\n    }\n\n    /**\n     * Returns either the output file specified in the constructor or\n     * the temporary file created or null.\n     * <p>\n     * If the constructor specifying the file is used then it returns that\n     * same output file, even when threshold has not been reached.\n     * <p>\n     * If constructor specifying a temporary file prefix/suffix is used\n     * then the temporary file created once the threshold is reached is returned\n     * If the threshold was not reached then <code>null</code> is returned.\n     *\n     * @return The file for this output stream, or <code>null</code> if no such\n     * file exists.\n     */\n    public File getFile()\n    {\n        return outputFile;\n    }\n\n    /**\n     * Closes underlying output stream, and mark this as closed\n     *\n     * @exception java.io.IOException if an error occurs.\n     */\n    @Override\n    public void close() throws IOException\n    {\n        super.close();\n        closed = true;\n        currentOutputStream.close();\n    }\n\n}\n",
    "project": "plexus-archiver",
    "libraryName": "commons-io",
    "libraryGroupID": "commons-io",
    "newVersion": "20030203.000550",
    "previousVersion": "2.11.0",
    "breakingCommit": "ee0827d4c9bf80982241e8c3559dceb8b39063e4"
}