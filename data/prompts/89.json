{
    "relative_path": "java-api/src/main/java/io/zold/api/WalletsIn.java",
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nthe following client code fails: \n'''java\n/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.IOException;\nimport java.nio.file.FileSystems;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Iterator;\nimport java.util.Random;\nimport org.cactoos.Scalar;\nimport org.cactoos.func.IoCheckedFunc;\nimport org.cactoos.io.Directory;\nimport org.cactoos.iterable.Filtered;\nimport org.cactoos.iterable.Mapped;\nimport org.cactoos.scalar.IoCheckedScalar;\nimport org.cactoos.scalar.SolidScalar;\nimport org.cactoos.text.FormattedText;\nimport org.cactoos.text.JoinedText;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Wallets in path.\n * @since 0.1\n * @checkstyle ClassDataAbstractionCoupling (2 lines)\n */\npublic final class WalletsIn implements Wallets {\n\n    /**\n     * Path containing wallets.\n     */\n    private final IoCheckedScalar<Path> path;\n\n    /**\n     * Filter for matching file extensions.\n     */\n    private final IoCheckedFunc<Path, Boolean> filter;\n\n    /**\n     * Wallets file extension.\n     */\n    private final String ext;\n\n    /**\n     * Randomizer.\n     */\n    private final Random random;\n\n    /**\n     * Ctor.\n     * @param pth Path with wallets\n     */\n    public WalletsIn(final Path pth) {\n        this(\n            () -> pth,\n            \"z\",\n            new Random()\n        );\n    }\n\n    /**\n     * Ctor.\n     * @param pth Path with wallets\n     * @param random Randomizer\n     */\n    public WalletsIn(final Path pth, final Random random) {\n        this(\n            () -> pth,\n            \"z\",\n            random\n        );\n    }\n\n    /**\n     * Ctor.\n     * @param pth Path with wallets\n     * @param random Randomizer\n     * @param ext Wallets file extension\n     */\n    public WalletsIn(final Scalar<Path> pth, final String ext,\n        final Random random) {\n        this.path = new IoCheckedScalar<>(\n            new SolidScalar<>(pth)\n        );\n        this.filter = new IoCheckedFunc<Path, Boolean>(\n            (file) -> file.toFile().isFile()\n                && FileSystems.getDefault()\n                .getPathMatcher(String.format(\"glob:**.%s\", ext))\n                .matches(file)\n        );\n        this.ext = ext;\n        this.random = random;\n    }\n\n    @Override\n    public Wallet create() throws IOException {\n        final Path wpth = this.path.value().resolve(\n            new JoinedText(\n                \".\",\n                Long.toHexString(this.random.nextLong()),\n                this.ext\n            ).asString()\n        );\n        if (wpth.toFile().exists()) {\n            throw new IOException(\n                new UncheckedText(\n                    new FormattedText(\n                        \"Wallet in path %s already exists\",\n                        wpth.toUri().getPath()\n                    )\n                ).asString()\n            );\n        }\n        Files.createFile(wpth);\n        return new Wallet.File(wpth);\n    }\n\n    @Override\n    // @todo #65:30min Create the new wallet in the path with all wallets.\n    //  It should contain the correct content according to the\n    //  white paper (network, protocol version, id and public RSA key). After\n    //  this remove exception expect for tests on WalletsInTest.\n    public Wallet create(final long id, final String pubkey, final String\n        network) throws IOException {\n        throw new UnsupportedOperationException(\n            \"WalletsIn.create(String, String, String) not supported\"\n        );\n    }\n\n    @Override\n    public Iterator<Wallet> iterator() {\n        try {\n            return new Mapped<Path, Wallet>(\n                (pth) -> new Wallet.File(pth),\n                new Filtered<>(this.filter, new Directory(this.path.value()))\n            ).iterator();\n        } catch (final IOException ex) {\n            throw new IllegalStateException(ex);\n        }\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n\nwith the following error message:\n[ERROR] /java-api/src/main/java/io/zold/api/WalletsIn.java:[37,26] cannot find symbol  symbol:   class IoCheckedScalar\n  location: package org.cactoos.scalar\n[ERROR] /java-api/src/main/java/io/zold/api/WalletsIn.java:[38,26] cannot find symbol  symbol:   class SolidScalar\n  location: package org.cactoos.scalar\n[ERROR] /java-api/src/main/java/io/zold/api/WalletsIn.java:[40,24] cannot find symbol  symbol:   class JoinedText\n  location: package org.cactoos.text\n[ERROR] /java-api/src/main/java/io/zold/api/WalletsIn.java:[53,19] cannot find symbol  symbol:   class IoCheckedScalar\n  location: class io.zold.api.WalletsIn\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.cactoos.collection.CollectionOf | DELETION | TYPE_REMOVED\norg.cactoos.scalar.UncheckedScalar | DELETION | TYPE_REMOVED\norg.cactoos.scalar.SolidScalar | DELETION | TYPE_REMOVED\norg.cactoos.scalar.IoCheckedScalar | DELETION | TYPE_REMOVED\norg.cactoos.text.SplitText | DELETION | TYPE_REMOVED\norg.cactoos.text.TrimmedText | DELETION | TYPE_REMOVED\norg.cactoos.scalar.StickyScalar | DELETION | TYPE_REMOVED\norg.cactoos.iterable.LengthOf | DELETION | TYPE_REMOVED\norg.cactoos.io.LengthOf | DELETION | TYPE_REMOVED\norg.cactoos.text.RandomText | DELETION | TYPE_REMOVED\norg.cactoos.scalar.CheckedScalar | DELETION | TYPE_REMOVED\norg.cactoos.iterator.LengthOf | DELETION | TYPE_REMOVED\norg.cactoos.collection.Filtered | DELETION | TYPE_REMOVED\norg.cactoos.text.JoinedText | DELETION | TYPE_REMOVED\nBefore proposing a fix, please analyze the situation and plan your approach within\n<repair strategy> tags:\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "project": "java-api",
    "libraryName": "cactoos",
    "libraryGroupID": "org.cactoos",
    "newVersion": "0.55.0",
    "previousVersion": "0.35"
}