{
    "absolute_path_to_file_in_container": "/depclean/depclean-core/src/main/java/se/kth/depclean/core/DepCleanManager.java",
    "errors": [
        {
            "line_number": 141,
            "message": "[ERROR] /depclean/depclean-core/src/main/java/se/kth/depclean/core/DepCleanManager.java:[141,32] cannot find symbol",
            "additional_info": "  symbol:   method getFile()\n  location: variable dependency of type se.kth.depclean.core.model.Dependency",
            "file_name": "DepCleanManager.java",
            "uid": "90dbf10e-7cfe-589f-904d-520d11a1b9ee"
        },
        {
            "line_number": 220,
            "message": "[ERROR] /depclean/depclean-core/src/main/java/se/kth/depclean/core/DepCleanManager.java:[220,35] incompatible types: invalid constructor reference",
            "additional_info": "    constructor Scope in class se.kth.depclean.core.model.Scope cannot be applied to given types\n      required: no arguments\n      found: java.lang.String\n      reason: actual and formal argument lists differ in length",
            "file_name": "DepCleanManager.java",
            "uid": "80cf199b-09bd-5071-b0d4-121b57013edb"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: guava 31.1-jre->32.0.0-android\n\nthe following client code fails: \n'''java\npackage se.kth.depclean.core;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport org.apache.commons.io.FileUtils;\nimport lombok.AllArgsConstructor;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport se.kth.depclean.core.analysis.AnalysisFailureException;\nimport se.kth.depclean.core.analysis.DefaultProjectDependencyAnalyzer;\nimport se.kth.depclean.core.analysis.model.ProjectDependencyAnalysis;\nimport se.kth.depclean.core.model.ClassName;\nimport se.kth.depclean.core.model.Dependency;\nimport se.kth.depclean.core.model.ProjectContext;\nimport se.kth.depclean.core.model.Scope;\nimport se.kth.depclean.core.util.JarUtils;\nimport se.kth.depclean.core.wrapper.DependencyManagerWrapper;\nimport se.kth.depclean.core.wrapper.LogWrapper;\n@AllArgsConstructor\n@Slf4j\npublic class DepCleanManager {\n    private static final String SEPARATOR = \"-------------------------------------------------------\";\n\n    private static final String DIRECTORY_TO_EXTRACT_DEPENDENCIES = \"dependency\";\n\n    private final DependencyManagerWrapper dependencyManager;\n\n    private final boolean skipDepClean;\n\n    private final boolean ignoreTests;\n\n    private final Set<String> ignoreScopes;\n\n    private final Set<String> ignoreDependencies;\n\n    private final boolean failIfUnusedDirect;\n\n    private final boolean failIfUnusedTransitive;\n\n    private final boolean failIfUnusedInheritedDirect;\n\n    private final boolean failIfUnusedInheritedTransitive;\n\n    private final boolean createPomDebloated;\n\n    private final boolean createResultJson;\n\n    private final boolean createCallGraphCsv;\n\n    @SneakyThrows\n    public ProjectDependencyAnalysis execute() throws AnalysisFailureException {\n        final long startTime = System.currentTimeMillis();\n        if (skipDepClean) {\n            getLog().info(\"Skipping DepClean plugin execution\");\n            return null;\n        }\n        printString(SEPARATOR);\n        getLog().info(\"Starting DepClean dependency analysis\");\n        if (dependencyManager.isMaven() && dependencyManager.isPackagingPom()) {\n            getLog().info(\"Skipping because packaging type is pom\");\n            return null;\n        }\n        extractClassesFromDependencies();\n        final DefaultProjectDependencyAnalyzer projectDependencyAnalyzer = new DefaultProjectDependencyAnalyzer();\n        final ProjectDependencyAnalysis analysis = projectDependencyAnalyzer.analyze(buildProjectContext());\n        analysis.print();\n        if (failIfUnusedDirect && analysis.hasUnusedDirectDependencies()) {\n            throw new AnalysisFailureException(\"Build failed due to unused direct dependencies in the dependency tree of the project.\");\n        }\n        if (failIfUnusedTransitive && analysis.hasUnusedTransitiveDependencies()) {\n            throw new AnalysisFailureException(\"Build failed due to unused transitive dependencies in the dependency tree of the project.\");\n        }\n        if (failIfUnusedInheritedDirect && analysis.hasUnusedInheritedDirectDependencies()) {\n            throw new AnalysisFailureException(\"Build failed due to unused inherited direct dependencies in the dependency tree of the project.\");\n        }\n        if (failIfUnusedInheritedTransitive && analysis.hasUnusedInheritedTransitiveDependencies()) {\n            throw new AnalysisFailureException(\"Build failed due to unused inherited transitive dependencies in the dependency tree of the project.\");\n        }\n        if (createPomDebloated) {\n            dependencyManager.getDebloater(analysis).write();\n        }\n        if (createResultJson) {\n            createResultJson(analysis);\n        }\n        final long stopTime = System.currentTimeMillis();\n        getLog().info(\"Analysis done in \" + getTime(stopTime - startTime));\n        return analysis;\n    }\n\n    @SneakyThrows\n    private void extractClassesFromDependencies() {\n        File dependencyDirectory = dependencyManager.getBuildDirectory().resolve(DIRECTORY_TO_EXTRACT_DEPENDENCIES).toFile();\n        FileUtils.deleteDirectory(dependencyDirectory);\n        dependencyManager.dependencyGraph().allDependencies().forEach(jarFile -> copyDependencies(jarFile, dependencyDirectory));\n        if (dependencyManager.getBuildDirectory().resolve(\"libs\").toFile().exists()) {\n            try {\n                FileUtils.copyDirectory(dependencyManager.getBuildDirectory().resolve(\"libs\").toFile(), dependencyDirectory);\n            } catch (IOException | NullPointerException e) {\n                getLog().error(\"Error copying directory libs to\" + dependencyDirectory.getAbsolutePath());\n            }\n        }\n        if (dependencyDirectory.exists()) {\n            JarUtils.decompress(dependencyDirectory.getAbsolutePath());\n        }\n    }\n\n    private void copyDependencies(Dependency dependency, File destFolder) {\n        copyDependencies(dependency.getFile(), destFolder);\n    }\n\n    @SneakyThrows\n    private void copyDependencies(File jarFile, File destFolder) {\n        FileUtils.copyFileToDirectory(jarFile, destFolder);\n    }\n\n    private void createResultJson(ProjectDependencyAnalysis analysis) {\n        printString(\"Creating depclean-results.json, please wait...\");\n        final File jsonFile = new File((dependencyManager.getBuildDirectory() + File.separator) + \"depclean-results.json\");\n        final File treeFile = new File((dependencyManager.getBuildDirectory() + File.separator) + \"tree.txt\");\n        final File csvFile = new File((dependencyManager.getBuildDirectory() + File.separator) + \"depclean-callgraph.csv\");\n        try {\n            dependencyManager.generateDependencyTree(treeFile);\n        } catch (IOException | InterruptedException e) {\n            getLog().error(\"Unable to generate dependency tree.\");\n            Thread.currentThread().interrupt();\n            return;\n        }\n        if (createCallGraphCsv) {\n            printString((\"Creating \" + csvFile.getName()) + \", please wait...\");\n            try {\n                FileUtils.write(csvFile, \"OriginClass,TargetClass,OriginDependency,TargetDependency\\n\", Charset.defaultCharset());\n            } catch (IOException e) {\n                getLog().error(\"Error writing the CSV header.\");\n            }\n        }\n        String treeAsJson = dependencyManager.getTreeAsJson(treeFile, analysis, csvFile, createCallGraphCsv);\n        try {\n            FileUtils.write(jsonFile, treeAsJson, Charset.defaultCharset());\n        } catch (IOException e) {\n            getLog().error((\"Unable to generate \" + jsonFile.getName()) + \" file.\");\n        }\n        if (jsonFile.exists()) {\n            getLog().info((jsonFile.getName() + \" file created in: \") + jsonFile.getAbsolutePath());\n        }\n        if (csvFile.exists()) {\n            getLog().info((csvFile.getName() + \" file created in: \") + csvFile.getAbsolutePath());\n        }\n    }\n\n    private ProjectContext buildProjectContext() {\n        if (ignoreTests) {\n            ignoreScopes.add(\"test\");\n        }\n        Set<ClassName> allUsedClasses = new HashSet<>();\n        Set<ClassName> usedClassesFromProcessors = dependencyManager.collectUsedClassesFromProcessors().stream().map(ClassName::new).collect(Collectors.toSet());\n        Set<ClassName> usedClassesFromSource = dependencyManager.collectUsedClassesFromSource(dependencyManager.getSourceDirectory(), dependencyManager.getTestDirectory()).stream().map(ClassName::new).collect(Collectors.toSet());\n        allUsedClasses.addAll(usedClassesFromProcessors);\n        allUsedClasses.addAll(usedClassesFromSource);\n        return new ProjectContext(dependencyManager.dependencyGraph(), dependencyManager.getOutputDirectories(), dependencyManager.getTestOutputDirectories(), dependencyManager.getSourceDirectory(), dependencyManager.getTestDirectory(), dependencyManager.getDependenciesDirectory(), ignoreScopes.stream().map(Scope::new).collect(Collectors.toSet()), toDependency(dependencyManager.dependencyGraph().allDependencies(), ignoreDependencies), allUsedClasses);\n    }\n\n    private Set<Dependency> toDependency(Set<Dependency> allDependencies, Set<String> dependencyPatterns) {\n        System.out.println(\"allDependencies: \");\n        allDependencies.forEach(System.out::println);\n        System.out.println(\"dependencyPatterns: \");\n        dependencyPatterns.forEach(System.out::println);\n        return dependencyPatterns.stream().flatMap(pattern -> findDependencies(allDependencies, pattern).stream()).collect(Collectors.toSet());\n    }\n\n    private Set<Dependency> findDependencies(Set<Dependency> allDependencies, String patternString) {\n        Pattern pattern = Pattern.compile(patternString, Pattern.CASE_INSENSITIVE);\n        return allDependencies.stream().filter(dep -> pattern.matcher(dep.toString()).matches()).collect(Collectors.toSet());\n    }\n\n    private String getTime(long millis) {\n        long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);\n        long seconds = TimeUnit.MILLISECONDS.toSeconds(millis) % 60;\n        return String.format(\"%smin %ss\", minutes, seconds);\n    }\n\n    private void printString(final String string) {\n        System.out.println(string);\n    }\n\n    private LogWrapper getLog() {\n        return dependencyManager.getLog();\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n    copyDependencies(dependency.getFile(), destFolder);\n        ignoreScopes.stream().map(Scope::new).collect(Collectors.toSet()),\nwith the following error message:\n[ERROR] /depclean/depclean-core/src/main/java/se/kth/depclean/core/DepCleanManager.java:[141,32] cannot find symbol  symbol:   method getFile()\n  location: variable dependency of type se.kth.depclean.core.model.Dependency\n[ERROR] /depclean/depclean-core/src/main/java/se/kth/depclean/core/DepCleanManager.java:[220,35] incompatible types: invalid constructor reference    constructor Scope in class se.kth.depclean.core.model.Scope cannot be applied to given types\n      required: no arguments\n      found: java.lang.String\n      reason: actual and formal argument lists differ in length\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\ncom.google.common.collect.TreeRangeMap.putAll | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.google.common.collect.ImmutableSet.toImmutableSet | DELETION | METHOD_REMOVED\ncom.google.common.collect.Multimaps.toMultimap | DELETION | METHOD_REMOVED\ncom.google.common.math.StatsAccumulator.addAll | DELETION | METHOD_REMOVED\ncom.google.common.collect.ImmutableSortedSetFauxverideShim.toImmutableSet | DELETION | METHOD_REMOVED\ncom.google.common.collect.ImmutableRangeMap.putAll | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.google.common.collect.AbstractMapBasedMultiset.add | MUTATION | METHOD_NOW_FINAL\ncom.google.common.primitives.ImmutableLongArray.copyOf | DELETION | METHOD_REMOVED\ncom.google.common.primitives.ImmutableLongArray$Builder.addAll | DELETION | METHOD_REMOVED\ncom.google.common.primitives.ImmutableLongArray.stream | DELETION | METHOD_REMOVED\njava.util.function.Function.compose | DELETION | METHOD_REMOVED\ncom.google.common.collect.Sets.toImmutableEnumSet | DELETION | METHOD_REMOVED\njava.util.function.Function.identity | DELETION | METHOD_REMOVED\ncom.google.common.collect.ImmutableList.forEach | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.google.common.collect.RangeSet.addAll | MUTATION | METHOD_NOW_ABSTRACT\ncom.google.common.primitives.ImmutableDoubleArray.copyOf | DELETION | METHOD_REMOVED\ncom.google.common.primitives.ImmutableDoubleArray.forEach | DELETION | METHOD_REMOVED\ncom.google.common.collect.ForwardingMap$StandardEntrySet.<init> | MUTATION | CONSTRUCTOR_NOW_PROTECTED\ncom.google.common.primitives.ImmutableIntArray.forEach | DELETION | METHOD_REMOVED\ncom.google.common.collect.ImmutableSetMultimap.flatteningToImmutableSetMultimap | DELETION | METHOD_REMOVED\ncom.google.common.collect.AbstractMapBasedMultiset.iterator | MUTATION | METHOD_NOW_FINAL\ncom.google.common.primitives.ImmutableDoubleArray$Builder.addAll | DELETION | METHOD_REMOVED\ncom.google.common.primitives.ImmutableLongArray.forEach | DELETION | METHOD_REMOVED\ncom.google.common.collect.Multiset.forEach | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.google.common.primitives.ImmutableDoubleArray.stream | DELETION | METHOD_REMOVED\ncom.google.common.collect.Multimap.forEach | DELETION | METHOD_REMOVED\ncom.google.common.collect.AbstractMapBasedMultiset.size | MUTATION | METHOD_NOW_FINAL\ncom.google.common.base.Supplier | MUTATION | SUPERTYPE_REMOVED\ncom.google.common.collect.FluentIterable.stream | DELETION | METHOD_REMOVED\ncom.google.common.primitives.ImmutableIntArray.stream | DELETION | METHOD_REMOVED\ncom.google.common.collect.Maps$Values.forEach | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.google.common.collect.RangeMap.putAll | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\njava.util.function.Function.andThen | DELETION | METHOD_REMOVED\ncom.google.common.base.Function | MUTATION | SUPERTYPE_REMOVED\ncom.google.common.collect.ImmutableSetMultimap.toImmutableSetMultimap | DELETION | METHOD_REMOVED\ncom.google.common.collect.RangeSet.addAll | MUTATION | METHOD_NOW_FINAL\ncom.google.common.primitives.ImmutableIntArray$Builder.addAll | DELETION | METHOD_REMOVED\ncom.google.common.collect.Maps$KeySet.forEach | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.google.common.collect.Multimaps.flatteningToMultimap | DELETION | METHOD_REMOVED\ncom.google.common.collect.AbstractMapBasedMultimap.forEach | DELETION | METHOD_REMOVED\ncom.google.common.collect.ImmutableMultimap.forEach | DELETION | METHOD_REMOVED\ncom.google.common.primitives.ImmutableIntArray.copyOf | DELETION | METHOD_REMOVED\ncom.google.common.collect.AbstractMapBasedMultiset.remove | MUTATION | METHOD_NOW_FINAL\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "    copyDependencies(dependency.getFile(), destFolder);\n        ignoreScopes.stream().map(Scope::new).collect(Collectors.toSet()),",
    "error_message": "[ERROR] /depclean/depclean-core/src/main/java/se/kth/depclean/core/DepCleanManager.java:[141,32] cannot find symbol  symbol:   method getFile()\n  location: variable dependency of type se.kth.depclean.core.model.Dependency\n[ERROR] /depclean/depclean-core/src/main/java/se/kth/depclean/core/DepCleanManager.java:[220,35] incompatible types: invalid constructor reference    constructor Scope in class se.kth.depclean.core.model.Scope cannot be applied to given types\n      required: no arguments\n      found: java.lang.String\n      reason: actual and formal argument lists differ in length",
    "api_diff": "Format: element | nature | kind\ncom.google.common.collect.TreeRangeMap.putAll | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.google.common.collect.ImmutableSet.toImmutableSet | DELETION | METHOD_REMOVED\ncom.google.common.collect.Multimaps.toMultimap | DELETION | METHOD_REMOVED\ncom.google.common.math.StatsAccumulator.addAll | DELETION | METHOD_REMOVED\ncom.google.common.collect.ImmutableSortedSetFauxverideShim.toImmutableSet | DELETION | METHOD_REMOVED\ncom.google.common.collect.ImmutableRangeMap.putAll | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.google.common.collect.AbstractMapBasedMultiset.add | MUTATION | METHOD_NOW_FINAL\ncom.google.common.primitives.ImmutableLongArray.copyOf | DELETION | METHOD_REMOVED\ncom.google.common.primitives.ImmutableLongArray$Builder.addAll | DELETION | METHOD_REMOVED\ncom.google.common.primitives.ImmutableLongArray.stream | DELETION | METHOD_REMOVED\njava.util.function.Function.compose | DELETION | METHOD_REMOVED\ncom.google.common.collect.Sets.toImmutableEnumSet | DELETION | METHOD_REMOVED\njava.util.function.Function.identity | DELETION | METHOD_REMOVED\ncom.google.common.collect.ImmutableList.forEach | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.google.common.collect.RangeSet.addAll | MUTATION | METHOD_NOW_ABSTRACT\ncom.google.common.primitives.ImmutableDoubleArray.copyOf | DELETION | METHOD_REMOVED\ncom.google.common.primitives.ImmutableDoubleArray.forEach | DELETION | METHOD_REMOVED\ncom.google.common.collect.ForwardingMap$StandardEntrySet.<init> | MUTATION | CONSTRUCTOR_NOW_PROTECTED\ncom.google.common.primitives.ImmutableIntArray.forEach | DELETION | METHOD_REMOVED\ncom.google.common.collect.ImmutableSetMultimap.flatteningToImmutableSetMultimap | DELETION | METHOD_REMOVED\ncom.google.common.collect.AbstractMapBasedMultiset.iterator | MUTATION | METHOD_NOW_FINAL\ncom.google.common.primitives.ImmutableDoubleArray$Builder.addAll | DELETION | METHOD_REMOVED\ncom.google.common.primitives.ImmutableLongArray.forEach | DELETION | METHOD_REMOVED\ncom.google.common.collect.Multiset.forEach | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.google.common.primitives.ImmutableDoubleArray.stream | DELETION | METHOD_REMOVED\ncom.google.common.collect.Multimap.forEach | DELETION | METHOD_REMOVED\ncom.google.common.collect.AbstractMapBasedMultiset.size | MUTATION | METHOD_NOW_FINAL\ncom.google.common.base.Supplier | MUTATION | SUPERTYPE_REMOVED\ncom.google.common.collect.FluentIterable.stream | DELETION | METHOD_REMOVED\ncom.google.common.primitives.ImmutableIntArray.stream | DELETION | METHOD_REMOVED\ncom.google.common.collect.Maps$Values.forEach | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.google.common.collect.RangeMap.putAll | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\njava.util.function.Function.andThen | DELETION | METHOD_REMOVED\ncom.google.common.base.Function | MUTATION | SUPERTYPE_REMOVED\ncom.google.common.collect.ImmutableSetMultimap.toImmutableSetMultimap | DELETION | METHOD_REMOVED\ncom.google.common.collect.RangeSet.addAll | MUTATION | METHOD_NOW_FINAL\ncom.google.common.primitives.ImmutableIntArray$Builder.addAll | DELETION | METHOD_REMOVED\ncom.google.common.collect.Maps$KeySet.forEach | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.google.common.collect.Multimaps.flatteningToMultimap | DELETION | METHOD_REMOVED\ncom.google.common.collect.AbstractMapBasedMultimap.forEach | DELETION | METHOD_REMOVED\ncom.google.common.collect.ImmutableMultimap.forEach | DELETION | METHOD_REMOVED\ncom.google.common.primitives.ImmutableIntArray.copyOf | DELETION | METHOD_REMOVED\ncom.google.common.collect.AbstractMapBasedMultiset.remove | MUTATION | METHOD_NOW_FINAL",
    "original_code": "package se.kth.depclean.core;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport org.apache.commons.io.FileUtils;\nimport lombok.AllArgsConstructor;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport se.kth.depclean.core.analysis.AnalysisFailureException;\nimport se.kth.depclean.core.analysis.DefaultProjectDependencyAnalyzer;\nimport se.kth.depclean.core.analysis.model.ProjectDependencyAnalysis;\nimport se.kth.depclean.core.model.ClassName;\nimport se.kth.depclean.core.model.Dependency;\nimport se.kth.depclean.core.model.ProjectContext;\nimport se.kth.depclean.core.model.Scope;\nimport se.kth.depclean.core.util.JarUtils;\nimport se.kth.depclean.core.wrapper.DependencyManagerWrapper;\nimport se.kth.depclean.core.wrapper.LogWrapper;\n@AllArgsConstructor\n@Slf4j\npublic class DepCleanManager {\n    private static final String SEPARATOR = \"-------------------------------------------------------\";\n\n    private static final String DIRECTORY_TO_EXTRACT_DEPENDENCIES = \"dependency\";\n\n    private final DependencyManagerWrapper dependencyManager;\n\n    private final boolean skipDepClean;\n\n    private final boolean ignoreTests;\n\n    private final Set<String> ignoreScopes;\n\n    private final Set<String> ignoreDependencies;\n\n    private final boolean failIfUnusedDirect;\n\n    private final boolean failIfUnusedTransitive;\n\n    private final boolean failIfUnusedInheritedDirect;\n\n    private final boolean failIfUnusedInheritedTransitive;\n\n    private final boolean createPomDebloated;\n\n    private final boolean createResultJson;\n\n    private final boolean createCallGraphCsv;\n\n    @SneakyThrows\n    public ProjectDependencyAnalysis execute() throws AnalysisFailureException {\n        final long startTime = System.currentTimeMillis();\n        if (skipDepClean) {\n            getLog().info(\"Skipping DepClean plugin execution\");\n            return null;\n        }\n        printString(SEPARATOR);\n        getLog().info(\"Starting DepClean dependency analysis\");\n        if (dependencyManager.isMaven() && dependencyManager.isPackagingPom()) {\n            getLog().info(\"Skipping because packaging type is pom\");\n            return null;\n        }\n        extractClassesFromDependencies();\n        final DefaultProjectDependencyAnalyzer projectDependencyAnalyzer = new DefaultProjectDependencyAnalyzer();\n        final ProjectDependencyAnalysis analysis = projectDependencyAnalyzer.analyze(buildProjectContext());\n        analysis.print();\n        if (failIfUnusedDirect && analysis.hasUnusedDirectDependencies()) {\n            throw new AnalysisFailureException(\"Build failed due to unused direct dependencies in the dependency tree of the project.\");\n        }\n        if (failIfUnusedTransitive && analysis.hasUnusedTransitiveDependencies()) {\n            throw new AnalysisFailureException(\"Build failed due to unused transitive dependencies in the dependency tree of the project.\");\n        }\n        if (failIfUnusedInheritedDirect && analysis.hasUnusedInheritedDirectDependencies()) {\n            throw new AnalysisFailureException(\"Build failed due to unused inherited direct dependencies in the dependency tree of the project.\");\n        }\n        if (failIfUnusedInheritedTransitive && analysis.hasUnusedInheritedTransitiveDependencies()) {\n            throw new AnalysisFailureException(\"Build failed due to unused inherited transitive dependencies in the dependency tree of the project.\");\n        }\n        if (createPomDebloated) {\n            dependencyManager.getDebloater(analysis).write();\n        }\n        if (createResultJson) {\n            createResultJson(analysis);\n        }\n        final long stopTime = System.currentTimeMillis();\n        getLog().info(\"Analysis done in \" + getTime(stopTime - startTime));\n        return analysis;\n    }\n\n    @SneakyThrows\n    private void extractClassesFromDependencies() {\n        File dependencyDirectory = dependencyManager.getBuildDirectory().resolve(DIRECTORY_TO_EXTRACT_DEPENDENCIES).toFile();\n        FileUtils.deleteDirectory(dependencyDirectory);\n        dependencyManager.dependencyGraph().allDependencies().forEach(jarFile -> copyDependencies(jarFile, dependencyDirectory));\n        if (dependencyManager.getBuildDirectory().resolve(\"libs\").toFile().exists()) {\n            try {\n                FileUtils.copyDirectory(dependencyManager.getBuildDirectory().resolve(\"libs\").toFile(), dependencyDirectory);\n            } catch (IOException | NullPointerException e) {\n                getLog().error(\"Error copying directory libs to\" + dependencyDirectory.getAbsolutePath());\n            }\n        }\n        if (dependencyDirectory.exists()) {\n            JarUtils.decompress(dependencyDirectory.getAbsolutePath());\n        }\n    }\n\n    private void copyDependencies(Dependency dependency, File destFolder) {\n        copyDependencies(dependency.getFile(), destFolder);\n    }\n\n    @SneakyThrows\n    private void copyDependencies(File jarFile, File destFolder) {\n        FileUtils.copyFileToDirectory(jarFile, destFolder);\n    }\n\n    private void createResultJson(ProjectDependencyAnalysis analysis) {\n        printString(\"Creating depclean-results.json, please wait...\");\n        final File jsonFile = new File((dependencyManager.getBuildDirectory() + File.separator) + \"depclean-results.json\");\n        final File treeFile = new File((dependencyManager.getBuildDirectory() + File.separator) + \"tree.txt\");\n        final File csvFile = new File((dependencyManager.getBuildDirectory() + File.separator) + \"depclean-callgraph.csv\");\n        try {\n            dependencyManager.generateDependencyTree(treeFile);\n        } catch (IOException | InterruptedException e) {\n            getLog().error(\"Unable to generate dependency tree.\");\n            Thread.currentThread().interrupt();\n            return;\n        }\n        if (createCallGraphCsv) {\n            printString((\"Creating \" + csvFile.getName()) + \", please wait...\");\n            try {\n                FileUtils.write(csvFile, \"OriginClass,TargetClass,OriginDependency,TargetDependency\\n\", Charset.defaultCharset());\n            } catch (IOException e) {\n                getLog().error(\"Error writing the CSV header.\");\n            }\n        }\n        String treeAsJson = dependencyManager.getTreeAsJson(treeFile, analysis, csvFile, createCallGraphCsv);\n        try {\n            FileUtils.write(jsonFile, treeAsJson, Charset.defaultCharset());\n        } catch (IOException e) {\n            getLog().error((\"Unable to generate \" + jsonFile.getName()) + \" file.\");\n        }\n        if (jsonFile.exists()) {\n            getLog().info((jsonFile.getName() + \" file created in: \") + jsonFile.getAbsolutePath());\n        }\n        if (csvFile.exists()) {\n            getLog().info((csvFile.getName() + \" file created in: \") + csvFile.getAbsolutePath());\n        }\n    }\n\n    private ProjectContext buildProjectContext() {\n        if (ignoreTests) {\n            ignoreScopes.add(\"test\");\n        }\n        Set<ClassName> allUsedClasses = new HashSet<>();\n        Set<ClassName> usedClassesFromProcessors = dependencyManager.collectUsedClassesFromProcessors().stream().map(ClassName::new).collect(Collectors.toSet());\n        Set<ClassName> usedClassesFromSource = dependencyManager.collectUsedClassesFromSource(dependencyManager.getSourceDirectory(), dependencyManager.getTestDirectory()).stream().map(ClassName::new).collect(Collectors.toSet());\n        allUsedClasses.addAll(usedClassesFromProcessors);\n        allUsedClasses.addAll(usedClassesFromSource);\n        return new ProjectContext(dependencyManager.dependencyGraph(), dependencyManager.getOutputDirectories(), dependencyManager.getTestOutputDirectories(), dependencyManager.getSourceDirectory(), dependencyManager.getTestDirectory(), dependencyManager.getDependenciesDirectory(), ignoreScopes.stream().map(Scope::new).collect(Collectors.toSet()), toDependency(dependencyManager.dependencyGraph().allDependencies(), ignoreDependencies), allUsedClasses);\n    }\n\n    private Set<Dependency> toDependency(Set<Dependency> allDependencies, Set<String> dependencyPatterns) {\n        System.out.println(\"allDependencies: \");\n        allDependencies.forEach(System.out::println);\n        System.out.println(\"dependencyPatterns: \");\n        dependencyPatterns.forEach(System.out::println);\n        return dependencyPatterns.stream().flatMap(pattern -> findDependencies(allDependencies, pattern).stream()).collect(Collectors.toSet());\n    }\n\n    private Set<Dependency> findDependencies(Set<Dependency> allDependencies, String patternString) {\n        Pattern pattern = Pattern.compile(patternString, Pattern.CASE_INSENSITIVE);\n        return allDependencies.stream().filter(dep -> pattern.matcher(dep.toString()).matches()).collect(Collectors.toSet());\n    }\n\n    private String getTime(long millis) {\n        long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);\n        long seconds = TimeUnit.MILLISECONDS.toSeconds(millis) % 60;\n        return String.format(\"%smin %ss\", minutes, seconds);\n    }\n\n    private void printString(final String string) {\n        System.out.println(string);\n    }\n\n    private LogWrapper getLog() {\n        return dependencyManager.getLog();\n    }\n}\n",
    "project": "depclean",
    "libraryName": "guava",
    "libraryGroupID": "com.google.guava",
    "newVersion": "32.0.0-android",
    "previousVersion": "31.1-jre",
    "breakingCommit": "b86a5f84b44a9b50aee69745886c47123f721de3"
}