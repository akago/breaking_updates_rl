{
    "absolute_path_to_file_in_container": "/simplelocalize-cli/src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java",
    "errors": [
        {
            "line_number": 88,
            "message": "[ERROR] /simplelocalize-cli/src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java:[88,49] cannot access com.fasterxml.jackson.core.exc.StreamReadException",
            "additional_info": "  class file for com.fasterxml.jackson.core.exc.StreamReadException not found",
            "file_name": "SimpleLocalizeClient.java",
            "uid": "81b7de82-3b5d-5eb4-af94-da2b3a80a3c6"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: jackson-databind 2.9.10.5->2.13.4.1\n\nthe following client code fails: \n'''java\npackage io.simplelocalize.cli.client;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.jayway.jsonpath.Configuration;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.time.Duration;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.jayway.jsonpath.JsonPath;\nimport com.jayway.jsonpath.Option;\nimport io.simplelocalize.cli.client.dto.DownloadRequest;\nimport io.simplelocalize.cli.client.dto.DownloadableFile;\nimport io.simplelocalize.cli.client.dto.ExportResponse;\nimport io.simplelocalize.cli.client.dto.UploadRequest;\nimport io.simplelocalize.cli.exception.ApiRequestException;\nimport static io.simplelocalize.cli.TemplateKeys.LANGUAGE_TEMPLATE_KEY;\nimport static io.simplelocalize.cli.TemplateKeys.NAMESPACE_TEMPLATE_KEY;\npublic class SimpleLocalizeClient {\n    private static final String ERROR_MESSAGE_PATH = \"$.msg\";\n\n    private final HttpClient httpClient;\n\n    private final SimpleLocalizeHttpRequestFactory httpRequestFactory;\n\n    private final SimpleLocalizeUriFactory uriFactory;\n\n    private final Logger log = LoggerFactory.getLogger(SimpleLocalizeClient.class);\n\n    private final ObjectMapper objectMapper;\n\n    public SimpleLocalizeClient(String baseUrl, String apiKey) {\n        Objects.requireNonNull(baseUrl);\n        Objects.requireNonNull(apiKey);\n        this.uriFactory = new SimpleLocalizeUriFactory(baseUrl);\n        this.httpRequestFactory = new SimpleLocalizeHttpRequestFactory(apiKey);\n        this.objectMapper = new ObjectMapper();\n        this.httpClient = HttpClient.newBuilder().connectTimeout(Duration.ofMinutes(5)).build();\n    }\n\n    public static SimpleLocalizeClient create(String baseUrl, String apiKey) {\n        return new SimpleLocalizeClient(baseUrl, apiKey);\n    }\n\n    public void uploadKeys(Collection<String> keys) throws IOException, InterruptedException {\n        URI uri = uriFactory.buildSendKeysURI();\n        HttpRequest httpRequest = httpRequestFactory.createSendKeysRequest(uri, keys);\n        HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n        throwOnError(httpResponse);\n        int keysProcessed = JsonPath.read(httpResponse.body(), \"$.data.uniqueKeysProcessed\");\n        log.info(\"Successfully uploaded {} keys\", keysProcessed);\n    }\n\n    public void uploadFile(UploadRequest uploadRequest) throws IOException, InterruptedException {\n        Path uploadPath = uploadRequest.getPath();\n        log.info(\"Uploading {}\", uploadPath);\n        URI uri = uriFactory.buildUploadUri(uploadRequest);\n        HttpRequest httpRequest = httpRequestFactory.createUploadFileRequest(uri, uploadRequest);\n        HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n        throwOnError(httpResponse);\n    }\n\n    public List<DownloadableFile> fetchDownloadableFiles(DownloadRequest downloadRequest) throws IOException, InterruptedException {\n        log.info(\"Preparing files to download\");\n        URI downloadUri = uriFactory.buildDownloadUri(downloadRequest);\n        HttpRequest httpRequest = httpRequestFactory.createGetRequest(downloadUri).build();\n        HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n        throwOnError(httpResponse);\n        String body = httpResponse.body();\n        ExportResponse exportResponse = objectMapper.readValue(body, ExportResponse.class);\n        return exportResponse.getFiles();\n    }\n\n    public void downloadFile(DownloadableFile downloadableFile, String downloadPathTemplate) {\n        Optional<DownloadableFile> optionalDownloadableFile = Optional.of(downloadableFile);\n        String downloadPath = downloadPathTemplate.replace(NAMESPACE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getNamespace).orElse(\"\")).replace(LANGUAGE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getLanguage).orElse(\"\"));\n        String url = downloadableFile.getUrl();\n        HttpRequest httpRequest = httpRequestFactory.createGetRequest(URI.create(url)).build();\n        Path savePath = Path.of(downloadPath);\n        try {\n            Path parentDirectory = savePath.getParent();\n            if (parentDirectory != null) {\n                Files.createDirectories(parentDirectory);\n            }\n            log.info(\"Downloading {}\", savePath);\n            httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofFile(savePath, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING));\n        } catch (IOException e) {\n            log.error(\"Download failed: {}\", savePath, e);\n        } catch (InterruptedException e) {\n            log.error(\"Download interrupted: {}\", savePath, e);\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public int validateGate() throws IOException, InterruptedException {\n        URI validateUri = uriFactory.buildValidateGateUri();\n        HttpRequest httpRequest = httpRequestFactory.createGetRequest(validateUri).build();\n        HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n        throwOnError(httpResponse);\n        String json = httpResponse.body();\n        Boolean passed = JsonPath.read(json, \"$.data.passed\");\n        String message = JsonPath.read(json, \"$.data.message\");\n        int status = JsonPath.read(json, \"$.data.status\");\n        log.info(\"Gate result: {} (status: {}, message: {})\", passed, status, message);\n        return status;\n    }\n\n    private void throwOnError(HttpResponse<?> httpResponse) {\n        if (httpResponse.statusCode() != 200) {\n            Configuration parseContext = io.simplelocalize.cli.client.Configuration.defaultConfiguration().addOptions(Option.SUPPRESS_EXCEPTIONS);\n            Object responseBody = httpResponse.body();\n            String stringBody = safeCastHttpBodyToString(responseBody);\n            String message = JsonPath.using(parseContext).parse(stringBody).read(ERROR_MESSAGE_PATH);\n            if (message == null) {\n                message = \"Unknown error, HTTP Status: \" + httpResponse.statusCode();\n            }\n            log.error(\"Request failed: {}\", message);\n            throw new ApiRequestException(message, httpResponse);\n        }\n    }\n\n    private String safeCastHttpBodyToString(Object responseBody) {\n        if (responseBody instanceof byte[]) {\n            return new String(((byte[]) (responseBody)));\n        } else if (responseBody instanceof String) {\n            return ((String) (responseBody));\n        }\n        return \"\";\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n    ExportResponse exportResponse = objectMapper.readValue(body, ExportResponse.class);\nwith the following error message:\n[ERROR] /simplelocalize-cli/src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java:[88,49] cannot access com.fasterxml.jackson.core.exc.StreamReadException  class file for com.fasterxml.jackson.core.exc.StreamReadException not found\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\ncom.fasterxml.jackson.databind.ObjectReader.readValue | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.fasterxml.jackson.databind.ObjectMapper.readValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper.readValue | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper.convertValue | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.fasterxml.jackson.databind.ObjectMapper.readValues | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper.writeTree | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper.readValues | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper._initForReading | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper.readTree | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper.writeValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "    ExportResponse exportResponse = objectMapper.readValue(body, ExportResponse.class);",
    "error_message": "[ERROR] /simplelocalize-cli/src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java:[88,49] cannot access com.fasterxml.jackson.core.exc.StreamReadException  class file for com.fasterxml.jackson.core.exc.StreamReadException not found",
    "api_diff": "Format: element | nature | kind\ncom.fasterxml.jackson.databind.ObjectReader.readValue | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.fasterxml.jackson.databind.ObjectMapper.readValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper.readValue | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper.convertValue | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.fasterxml.jackson.databind.ObjectMapper.readValues | MUTATION | METHOD_PARAMETER_GENERICS_CHANGED\ncom.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper.writeTree | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper.readValues | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper._initForReading | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper.readTree | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper.writeValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION",
    "original_code": "package io.simplelocalize.cli.client;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.jayway.jsonpath.Configuration;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.time.Duration;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.jayway.jsonpath.JsonPath;\nimport com.jayway.jsonpath.Option;\nimport io.simplelocalize.cli.client.dto.DownloadRequest;\nimport io.simplelocalize.cli.client.dto.DownloadableFile;\nimport io.simplelocalize.cli.client.dto.ExportResponse;\nimport io.simplelocalize.cli.client.dto.UploadRequest;\nimport io.simplelocalize.cli.exception.ApiRequestException;\nimport static io.simplelocalize.cli.TemplateKeys.LANGUAGE_TEMPLATE_KEY;\nimport static io.simplelocalize.cli.TemplateKeys.NAMESPACE_TEMPLATE_KEY;\npublic class SimpleLocalizeClient {\n    private static final String ERROR_MESSAGE_PATH = \"$.msg\";\n\n    private final HttpClient httpClient;\n\n    private final SimpleLocalizeHttpRequestFactory httpRequestFactory;\n\n    private final SimpleLocalizeUriFactory uriFactory;\n\n    private final Logger log = LoggerFactory.getLogger(SimpleLocalizeClient.class);\n\n    private final ObjectMapper objectMapper;\n\n    public SimpleLocalizeClient(String baseUrl, String apiKey) {\n        Objects.requireNonNull(baseUrl);\n        Objects.requireNonNull(apiKey);\n        this.uriFactory = new SimpleLocalizeUriFactory(baseUrl);\n        this.httpRequestFactory = new SimpleLocalizeHttpRequestFactory(apiKey);\n        this.objectMapper = new ObjectMapper();\n        this.httpClient = HttpClient.newBuilder().connectTimeout(Duration.ofMinutes(5)).build();\n    }\n\n    public static SimpleLocalizeClient create(String baseUrl, String apiKey) {\n        return new SimpleLocalizeClient(baseUrl, apiKey);\n    }\n\n    public void uploadKeys(Collection<String> keys) throws IOException, InterruptedException {\n        URI uri = uriFactory.buildSendKeysURI();\n        HttpRequest httpRequest = httpRequestFactory.createSendKeysRequest(uri, keys);\n        HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n        throwOnError(httpResponse);\n        int keysProcessed = JsonPath.read(httpResponse.body(), \"$.data.uniqueKeysProcessed\");\n        log.info(\"Successfully uploaded {} keys\", keysProcessed);\n    }\n\n    public void uploadFile(UploadRequest uploadRequest) throws IOException, InterruptedException {\n        Path uploadPath = uploadRequest.getPath();\n        log.info(\"Uploading {}\", uploadPath);\n        URI uri = uriFactory.buildUploadUri(uploadRequest);\n        HttpRequest httpRequest = httpRequestFactory.createUploadFileRequest(uri, uploadRequest);\n        HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n        throwOnError(httpResponse);\n    }\n\n    public List<DownloadableFile> fetchDownloadableFiles(DownloadRequest downloadRequest) throws IOException, InterruptedException {\n        log.info(\"Preparing files to download\");\n        URI downloadUri = uriFactory.buildDownloadUri(downloadRequest);\n        HttpRequest httpRequest = httpRequestFactory.createGetRequest(downloadUri).build();\n        HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n        throwOnError(httpResponse);\n        String body = httpResponse.body();\n        ExportResponse exportResponse = objectMapper.readValue(body, ExportResponse.class);\n        return exportResponse.getFiles();\n    }\n\n    public void downloadFile(DownloadableFile downloadableFile, String downloadPathTemplate) {\n        Optional<DownloadableFile> optionalDownloadableFile = Optional.of(downloadableFile);\n        String downloadPath = downloadPathTemplate.replace(NAMESPACE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getNamespace).orElse(\"\")).replace(LANGUAGE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getLanguage).orElse(\"\"));\n        String url = downloadableFile.getUrl();\n        HttpRequest httpRequest = httpRequestFactory.createGetRequest(URI.create(url)).build();\n        Path savePath = Path.of(downloadPath);\n        try {\n            Path parentDirectory = savePath.getParent();\n            if (parentDirectory != null) {\n                Files.createDirectories(parentDirectory);\n            }\n            log.info(\"Downloading {}\", savePath);\n            httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofFile(savePath, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING));\n        } catch (IOException e) {\n            log.error(\"Download failed: {}\", savePath, e);\n        } catch (InterruptedException e) {\n            log.error(\"Download interrupted: {}\", savePath, e);\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public int validateGate() throws IOException, InterruptedException {\n        URI validateUri = uriFactory.buildValidateGateUri();\n        HttpRequest httpRequest = httpRequestFactory.createGetRequest(validateUri).build();\n        HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n        throwOnError(httpResponse);\n        String json = httpResponse.body();\n        Boolean passed = JsonPath.read(json, \"$.data.passed\");\n        String message = JsonPath.read(json, \"$.data.message\");\n        int status = JsonPath.read(json, \"$.data.status\");\n        log.info(\"Gate result: {} (status: {}, message: {})\", passed, status, message);\n        return status;\n    }\n\n    private void throwOnError(HttpResponse<?> httpResponse) {\n        if (httpResponse.statusCode() != 200) {\n            Configuration parseContext = io.simplelocalize.cli.client.Configuration.defaultConfiguration().addOptions(Option.SUPPRESS_EXCEPTIONS);\n            Object responseBody = httpResponse.body();\n            String stringBody = safeCastHttpBodyToString(responseBody);\n            String message = JsonPath.using(parseContext).parse(stringBody).read(ERROR_MESSAGE_PATH);\n            if (message == null) {\n                message = \"Unknown error, HTTP Status: \" + httpResponse.statusCode();\n            }\n            log.error(\"Request failed: {}\", message);\n            throw new ApiRequestException(message, httpResponse);\n        }\n    }\n\n    private String safeCastHttpBodyToString(Object responseBody) {\n        if (responseBody instanceof byte[]) {\n            return new String(((byte[]) (responseBody)));\n        } else if (responseBody instanceof String) {\n            return ((String) (responseBody));\n        }\n        return \"\";\n    }\n}\n",
    "project": "simplelocalize-cli",
    "libraryName": "jackson-databind",
    "libraryGroupID": "com.fasterxml.jackson.core",
    "newVersion": "2.13.4.1",
    "previousVersion": "2.9.10.5",
    "breakingCommit": "741f3b5e20a91b0e9305ae79261e3c5e64971c98"
}