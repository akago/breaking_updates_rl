{
    "absolute_path_to_file_in_container": "/jcabi-http/src/main/java/com/jcabi/http/response/RestResponse.java",
    "errors": [
        {
            "line_number": 48,
            "message": "[ERROR] /jcabi-http/src/main/java/com/jcabi/http/response/RestResponse.java:[48,20] cannot find symbol",
            "additional_info": "  symbol:   class Matchers\n  location: package org.hamcrest",
            "file_name": "RestResponse.java",
            "uid": "6418729a-b14f-5b54-a31e-5dfa1bf0dce8"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: hamcrest-library 1.3->2.2\n\nthe following client code fails: \n'''java\npackage com.jcabi.http.response;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(String.format(\"HTTP response is not valid: %s\", this), this, matcher);\n        return this;\n    }\n\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\"HTTP response with status %d\", status);\n        MatcherAssert.assertThat(String.format(\"HTTP response status is not equal to %d:%n%s\", status, this), this, new RestResponse.StatusMatch(message, status));\n        return this;\n    }\n\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(String.format(\"HTTP response status is not the one expected:%n%s\", this), this.status(), matcher);\n        return this;\n    }\n\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(String.format(\"HTTP response body content is not valid:%n%s\", this), this.body(), matcher);\n        return this;\n    }\n\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(String.format(\"HTTP response binary content is not valid:%n%s\", this), this.binary(), matcher);\n        return this;\n    }\n\n    public RestResponse assertHeader(final String name, final Matcher<Iterable<String>> matcher) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(String.format(\"HTTP header '%s' is not valid:%n%s\", name, this), values, matcher);\n        return this;\n    }\n\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri().set(this.back().uri().get().resolve(uri)).back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(HttpHeaders.COOKIE, String.format(\"%s=%s\", cookie.getName(), cookie.getValue()));\n                }\n            }\n        }\n        return req;\n    }\n\n    public Request follow() {\n        this.assertHeader(HttpHeaders.LOCATION, Matchers.not(Matchers.emptyIterableOf(String.class)));\n        return this.jump(URI.create(this.headers().get(HttpHeaders.LOCATION).get(0)));\n    }\n\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\"cookies should be set in HTTP header\", headers.containsKey(HttpHeaders.SET_COOKIE));\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        } \n        MatcherAssert.assertThat(Logger.format(\"cookie '%s' not found in Set-Cookie header: '%s'\", name, cookies), cookie, Matchers.notNullValue());\n        assert cookie != null;\n        return cookie;\n    }\n\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(cookie.getName(), cookie.getValue(), cookie.getPath(), cookie.getDomain(), cookie.getVersion());\n    }\n\n    private static final class StatusMatch extends CustomMatcher<Response> {\n        private transient final int status;\n\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport org.hamcrest.Matchers;\nwith the following error message:\n[ERROR] /jcabi-http/src/main/java/com/jcabi/http/response/RestResponse.java:[48,20] cannot find symbol  symbol:   class Matchers\n  location: package org.hamcrest\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.hamcrest.Matchers | DELETION | TYPE_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import org.hamcrest.Matchers;",
    "error_message": "[ERROR] /jcabi-http/src/main/java/com/jcabi/http/response/RestResponse.java:[48,20] cannot find symbol  symbol:   class Matchers\n  location: package org.hamcrest",
    "api_diff": "Format: element | nature | kind\norg.hamcrest.Matchers | DELETION | TYPE_REMOVED",
    "original_code": "package com.jcabi.http.response;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(String.format(\"HTTP response is not valid: %s\", this), this, matcher);\n        return this;\n    }\n\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\"HTTP response with status %d\", status);\n        MatcherAssert.assertThat(String.format(\"HTTP response status is not equal to %d:%n%s\", status, this), this, new RestResponse.StatusMatch(message, status));\n        return this;\n    }\n\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(String.format(\"HTTP response status is not the one expected:%n%s\", this), this.status(), matcher);\n        return this;\n    }\n\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(String.format(\"HTTP response body content is not valid:%n%s\", this), this.body(), matcher);\n        return this;\n    }\n\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(String.format(\"HTTP response binary content is not valid:%n%s\", this), this.binary(), matcher);\n        return this;\n    }\n\n    public RestResponse assertHeader(final String name, final Matcher<Iterable<String>> matcher) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(String.format(\"HTTP header '%s' is not valid:%n%s\", name, this), values, matcher);\n        return this;\n    }\n\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri().set(this.back().uri().get().resolve(uri)).back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(HttpHeaders.COOKIE, String.format(\"%s=%s\", cookie.getName(), cookie.getValue()));\n                }\n            }\n        }\n        return req;\n    }\n\n    public Request follow() {\n        this.assertHeader(HttpHeaders.LOCATION, Matchers.not(Matchers.emptyIterableOf(String.class)));\n        return this.jump(URI.create(this.headers().get(HttpHeaders.LOCATION).get(0)));\n    }\n\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\"cookies should be set in HTTP header\", headers.containsKey(HttpHeaders.SET_COOKIE));\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        } \n        MatcherAssert.assertThat(Logger.format(\"cookie '%s' not found in Set-Cookie header: '%s'\", name, cookies), cookie, Matchers.notNullValue());\n        assert cookie != null;\n        return cookie;\n    }\n\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(cookie.getName(), cookie.getValue(), cookie.getPath(), cookie.getDomain(), cookie.getVersion());\n    }\n\n    private static final class StatusMatch extends CustomMatcher<Response> {\n        private transient final int status;\n\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n}\n",
    "project": "jcabi-http",
    "libraryName": "hamcrest-library",
    "libraryGroupID": "org.hamcrest",
    "newVersion": "2.2",
    "previousVersion": "1.3",
    "breakingCommit": "cb541fd65c7b9bbc3424ea927f1dab223261d156"
}