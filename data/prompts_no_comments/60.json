{
    "absolute_path_to_file_in_container": "/assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java",
    "errors": [
        {
            "line_number": 24,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[24,43] package org.assertj.core.internal.bytebuddy does not exist",
            "additional_info": "",
            "file_name": "VavrAssumptions.java",
            "uid": "4df3562d-3802-55d2-b7b3-689e23bcbff8"
        },
        {
            "line_number": 25,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[25,43] package org.assertj.core.internal.bytebuddy does not exist",
            "additional_info": "",
            "file_name": "VavrAssumptions.java",
            "uid": "4df3562d-3802-55d2-b7b3-689e23bcbff8"
        },
        {
            "line_number": 26,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[26,53] package org.assertj.core.internal.bytebuddy.TypeCache does not exist",
            "additional_info": "",
            "file_name": "VavrAssumptions.java",
            "uid": "6a98450b-9d6d-5929-9ca3-0edbd97cf291"
        },
        {
            "line_number": 27,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[27,60] package org.assertj.core.internal.bytebuddy.dynamic.scaffold does not exist",
            "additional_info": "",
            "file_name": "VavrAssumptions.java",
            "uid": "b9c1dd26-7b7c-56f6-8ffd-89d8e8df290b"
        },
        {
            "line_number": 28,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[28,58] package org.assertj.core.internal.bytebuddy.implementation does not exist",
            "additional_info": "",
            "file_name": "VavrAssumptions.java",
            "uid": "f2098d2a-260b-5e2a-8186-8b47603209c8"
        },
        {
            "line_number": 29,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[29,58] package org.assertj.core.internal.bytebuddy.implementation does not exist",
            "additional_info": "",
            "file_name": "VavrAssumptions.java",
            "uid": "f2098d2a-260b-5e2a-8186-8b47603209c8"
        },
        {
            "line_number": 30,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[30,68] package org.assertj.core.internal.bytebuddy.implementation.auxiliary does not exist",
            "additional_info": "",
            "file_name": "VavrAssumptions.java",
            "uid": "4bdebe58-9b48-5ac4-8c30-be40aa0c1259"
        },
        {
            "line_number": 31,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[31,74] package org.assertj.core.internal.bytebuddy.implementation.bind.annotation does not exist",
            "additional_info": "",
            "file_name": "VavrAssumptions.java",
            "uid": "9270302a-93b8-5649-8e47-fb148b103c40"
        },
        {
            "line_number": 32,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[32,74] package org.assertj.core.internal.bytebuddy.implementation.bind.annotation does not exist",
            "additional_info": "",
            "file_name": "VavrAssumptions.java",
            "uid": "9270302a-93b8-5649-8e47-fb148b103c40"
        },
        {
            "line_number": 33,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[33,74] package org.assertj.core.internal.bytebuddy.implementation.bind.annotation does not exist",
            "additional_info": "",
            "file_name": "VavrAssumptions.java",
            "uid": "9270302a-93b8-5649-8e47-fb148b103c40"
        },
        {
            "line_number": 40,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[40,58] package org.assertj.core.internal.bytebuddy.matcher does not exist",
            "additional_info": "",
            "file_name": "VavrAssumptions.java",
            "uid": "a0071150-a8b3-5f15-832f-2a8f57ed098f"
        },
        {
            "line_number": 50,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[50,26] cannot find symbol",
            "additional_info": "  symbol:   class ByteBuddy\n  location: class org.assertj.vavr.api.VavrAssumptions",
            "file_name": "VavrAssumptions.java",
            "uid": "7e6c0751-2729-5b98-b1d8-8bf552d78a54"
        },
        {
            "line_number": 51,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[51,51] package AuxiliaryType.NamingStrategy does not exist",
            "additional_info": "",
            "file_name": "VavrAssumptions.java",
            "uid": "b7ff15af-d04a-5121-8bcf-cfc4a31d285e"
        },
        {
            "line_number": 53,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[53,26] cannot find symbol",
            "additional_info": "  symbol:   class Implementation\n  location: class org.assertj.vavr.api.VavrAssumptions",
            "file_name": "VavrAssumptions.java",
            "uid": "7dd9ea69-ebb1-5ed0-926f-750f77d55424"
        },
        {
            "line_number": 55,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[55,26] cannot find symbol",
            "additional_info": "  symbol:   class TypeCache\n  location: class org.assertj.vavr.api.VavrAssumptions",
            "file_name": "VavrAssumptions.java",
            "uid": "913d3fbe-c2dc-5d3a-8296-90fe0da4be08"
        },
        {
            "line_number": 59,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[59,10] cannot find symbol",
            "additional_info": "  symbol:   class RuntimeType\n  location: class org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor",
            "file_name": "VavrAssumptions.java",
            "uid": "f62a6ab8-19ec-5a7c-a021-4204c40dc325"
        },
        {
            "line_number": 60,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[60,41] cannot find symbol",
            "additional_info": "  symbol:   class This\n  location: class org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor",
            "file_name": "VavrAssumptions.java",
            "uid": "2988e785-3a3e-50e5-8f62-808ca360b057"
        },
        {
            "line_number": 215,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[215,9] cannot find symbol",
            "additional_info": "  symbol:   class SimpleKey\n  location: class org.assertj.vavr.api.VavrAssumptions",
            "file_name": "VavrAssumptions.java",
            "uid": "433e01a4-30b5-56e3-b5d7-6bb40d62f3ab"
        },
        {
            "line_number": 223,
            "message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[223,25] cannot find symbol",
            "additional_info": "  symbol:   method any()\n  location: class org.assertj.vavr.api.VavrAssumptions",
            "file_name": "VavrAssumptions.java",
            "uid": "fc0a164b-f429-5f6a-8641-854040448d97"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: assertj-core 3.22.0->3.23.0\n\nthe following client code fails: \n'''java\npackage org.assertj.vavr.api;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.concurrent.Callable;\nimport io.vavr.Lazy;\nimport io.vavr.collection.Map;\nimport io.vavr.collection.Multimap;\nimport io.vavr.collection.Seq;\nimport io.vavr.collection.Set;\nimport io.vavr.control.Either;\nimport io.vavr.control.Option;\nimport io.vavr.control.Try;\nimport io.vavr.control.Validation;\nimport org.assertj.core.internal.bytebuddy.ByteBuddy;\nimport org.assertj.core.internal.bytebuddy.TypeCache;\nimport org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;\nimport org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;\nimport org.assertj.core.internal.bytebuddy.implementation.Implementation;\nimport org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;\nimport org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;\nimport org.assertj.core.util.CheckReturnValue;\nimport static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;\nimport static org.assertj.core.util.Arrays.array;\nimport static org.assertj.vavr.api.ClassLoadingStrategyFactory.classLoadingStrategy;\npublic class VavrAssumptions {\n    private static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED).with(new AuxiliaryType.NamingStrategy.SuffixingRandom(\"Assertj$Assumptions\"));\n\n    private static final Implementation ASSUMPTION = MethodDelegation.to(VavrAssumptions.AssumptionMethodInterceptor.class);\n\n    private static final TypeCache<SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>(TypeCache.Sort.SOFT);\n\n    private static final class AssumptionMethodInterceptor {\n        @RuntimeType\n        public static Object intercept(@This\n        AbstractVavrAssert<?, ?> assertion, @SuperCall\n        Callable<Object> proxy) throws Exception {\n            try {\n                Object result = proxy.call();\n                if ((result != assertion) && (result instanceof AbstractVavrAssert)) {\n                    final AbstractVavrAssert<?, ?> assumption = asAssumption(((AbstractVavrAssert<?, ?>) (result)));\n                    return assumption.withAssertionState(assertion);\n                }\n                return result;\n            } catch (AssertionError e) {\n                throw assumptionNotMet(e);\n            }\n        }\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <LEFT, RIGHT> EitherAssert<LEFT, RIGHT> assumeThat(Either<LEFT, RIGHT> actual) {\n        return asAssumption(EitherAssert.class, Either.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <VALUE> LazyAssert<VALUE> assumeThat(Lazy<VALUE> actual) {\n        return asAssumption(LazyAssert.class, Lazy.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <K, V> MapAssert<K, V> assumeThat(Map<K, V> actual) {\n        return asAssumption(MapAssert.class, Map.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <K, V> MultimapAssert<K, V> assumeThat(Multimap<K, V> actual) {\n        return asAssumption(MultimapAssert.class, Multimap.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <VALUE> OptionAssert<VALUE> assumeThat(Option<VALUE> actual) {\n        return asAssumption(OptionAssert.class, Option.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <ELEMENT> SetAssert<ELEMENT> assumeThat(Set<ELEMENT> actual) {\n        return asAssumption(SetAssert.class, Set.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <ELEMENT> SeqAssert<ELEMENT> assumeThat(Seq<ELEMENT> actual) {\n        return asAssumption(SeqAssert.class, Seq.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <VALUE> TryAssert<VALUE> assumeThat(Try<VALUE> actual) {\n        return asAssumption(TryAssert.class, Try.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <INVALID, VALID> ValidationAssert<INVALID, VALID> assumeThat(Validation<INVALID, VALID> actual) {\n        return asAssumption(ValidationAssert.class, Validation.class, actual);\n    }\n\n    private static <ASSERTION, ACTUAL> ASSERTION asAssumption(Class<ASSERTION> assertionType, Class<ACTUAL> actualType, Object actual) {\n        return asAssumption(assertionType, array(actualType), array(actual));\n    }\n\n    private static <ASSERTION> ASSERTION asAssumption(Class<ASSERTION> assertionType, Class<?>[] constructorTypes, Object... constructorParams) {\n        try {\n            Class<? extends ASSERTION> type = createAssumptionClass(assertionType);\n            Constructor<? extends ASSERTION> constructor = type.getConstructor(constructorTypes);\n            return constructor.newInstance(constructorParams);\n        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) {\n            throw new RuntimeException(\"Cannot create assumption instance\", e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private static <ASSERTION> Class<? extends ASSERTION> createAssumptionClass(Class<ASSERTION> assertClass) {\n        SimpleKey cacheKey = new SimpleKey(assertClass);\n        return ((Class<ASSERTION>) (CACHE.findOrInsert(VavrAssumptions.class.getClassLoader(), cacheKey, () -> generateAssumptionClass(assertClass))));\n    }\n\n    private static <ASSERTION> Class<? extends ASSERTION> generateAssumptionClass(Class<ASSERTION> assertionType) {\n        return BYTE_BUDDY.subclass(assertionType).method(any()).intercept(ASSUMPTION).make().load(VavrAssumptions.class.getClassLoader(), classLoadingStrategy(assertionType)).getLoaded();\n    }\n\n    private static RuntimeException assumptionNotMet(AssertionError assertionError) throws ReflectiveOperationException {\n        Class<?> assumptionClass = getAssumptionClass(\"org.junit.AssumptionViolatedException\");\n        if (assumptionClass != null)\n            return assumptionNotMet(assumptionClass, assertionError);\n\n        assumptionClass = getAssumptionClass(\"org.opentest4j.TestAbortedException\");\n        if (assumptionClass != null)\n            return assumptionNotMet(assumptionClass, assertionError);\n\n        assumptionClass = getAssumptionClass(\"org.testng.SkipException\");\n        if (assumptionClass != null)\n            return assumptionNotMet(assumptionClass, assertionError);\n\n        throw new IllegalStateException(\"Assumptions require JUnit, opentest4j or TestNG on the classpath\");\n    }\n\n    private static Class<?> getAssumptionClass(String className) {\n        try {\n            return Class.forName(className);\n        } catch (ClassNotFoundException e) {\n            return null;\n        }\n    }\n\n    private static RuntimeException assumptionNotMet(Class<?> exceptionClass, AssertionError e) throws ReflectiveOperationException {\n        return ((RuntimeException) (exceptionClass.getConstructor(String.class, Throwable.class).newInstance(\"assumption was not met due to: \" + e.getMessage(), e)));\n    }\n\n    private static AbstractVavrAssert<?, ?> asAssumption(AbstractVavrAssert<?, ?> assertion) {\n        Object actual = assertion.actual();\n        if (assertion instanceof LazyAssert)\n            return asAssumption(LazyAssert.class, Lazy.class, actual);\n\n        if (assertion instanceof EitherAssert)\n            return asAssumption(EitherAssert.class, Either.class, actual);\n\n        if (assertion instanceof MapAssert)\n            return asAssumption(MapAssert.class, Map.class, actual);\n\n        if (assertion instanceof OptionAssert)\n            return asAssumption(OptionAssert.class, Option.class, actual);\n\n        if (assertion instanceof SeqAssert)\n            return asAssumption(SeqAssert.class, Seq.class, actual);\n\n        if (assertion instanceof TryAssert)\n            return asAssumption(TryAssert.class, Try.class, actual);\n\n        if (assertion instanceof ValidationAssert)\n            return asAssumption(ValidationAssert.class, Validation.class, actual);\n\n        throw new IllegalArgumentException(\"Unsupported assumption creation for \" + assertion.getClass());\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport org.assertj.core.internal.bytebuddy.ByteBuddy;\nimport org.assertj.core.internal.bytebuddy.TypeCache;\nimport org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;\nimport org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;\nimport org.assertj.core.internal.bytebuddy.implementation.Implementation;\nimport org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;\nimport org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;\nimport static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;\n    private static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED)\n            .with(new AuxiliaryType.NamingStrategy.SuffixingRandom(\"Assertj$Assumptions\"));\n    private static final Implementation ASSUMPTION = MethodDelegation.to(AssumptionMethodInterceptor.class);\n    private static final TypeCache<SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>(TypeCache.Sort.SOFT);\n        @RuntimeType\n        public static Object intercept(@This AbstractVavrAssert<?, ?> assertion, @SuperCall Callable<Object> proxy) throws Exception {\n        SimpleKey cacheKey = new SimpleKey(assertClass);\n                .method(any())\nwith the following error message:\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[24,43] package org.assertj.core.internal.bytebuddy does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[25,43] package org.assertj.core.internal.bytebuddy does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[26,53] package org.assertj.core.internal.bytebuddy.TypeCache does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[27,60] package org.assertj.core.internal.bytebuddy.dynamic.scaffold does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[28,58] package org.assertj.core.internal.bytebuddy.implementation does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[29,58] package org.assertj.core.internal.bytebuddy.implementation does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[30,68] package org.assertj.core.internal.bytebuddy.implementation.auxiliary does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[31,74] package org.assertj.core.internal.bytebuddy.implementation.bind.annotation does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[32,74] package org.assertj.core.internal.bytebuddy.implementation.bind.annotation does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[33,74] package org.assertj.core.internal.bytebuddy.implementation.bind.annotation does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[40,58] package org.assertj.core.internal.bytebuddy.matcher does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[50,26] cannot find symbol  symbol:   class ByteBuddy\n  location: class org.assertj.vavr.api.VavrAssumptions\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[51,51] package AuxiliaryType.NamingStrategy does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[53,26] cannot find symbol  symbol:   class Implementation\n  location: class org.assertj.vavr.api.VavrAssumptions\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[55,26] cannot find symbol  symbol:   class TypeCache\n  location: class org.assertj.vavr.api.VavrAssumptions\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[59,10] cannot find symbol  symbol:   class RuntimeType\n  location: class org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[60,41] cannot find symbol  symbol:   class This\n  location: class org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[215,9] cannot find symbol  symbol:   class SimpleKey\n  location: class org.assertj.vavr.api.VavrAssumptions\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[223,25] cannot find symbol  symbol:   method any()\n  location: class org.assertj.vavr.api.VavrAssumptions\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$ForUnsafeInjection | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingLookup | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$ForField | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Dispatcher$Enabled | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType$NamingStrategy$Enumerating | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna$Dispatcher$Windows32BitFunctionMapper | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$System | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Factory | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Direct | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$Default | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Simple | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna$Dispatcher$Jvm | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$Compiled | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingLookup$MethodHandles | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$ForField$WithInstance | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Unavailable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$Compiled$ForMethodReturn | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.ByteBuddy$EnumerationImplementation$ValuesMethodAppender | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$ExtractableView | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Target | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.ByteBuddy$EnumerationImplementation$InitializationAppender | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$ForBootstrapInjection | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall$Binder | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Disabled | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$UsingUnsafeOverride$ForJava7CapableVm | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$AccessorMethod | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$AbstractPropertyAccessorMethod | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$FieldSetterDelegation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Dispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$UsingLookup | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$UsingUnsafeInjection | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Dispatcher$CreationAction | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$SpecialMethodInvocation$AbstractBase | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Composable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Factory$AccessResolver | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$ExtractableView$AbstractBase | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$FieldGetter | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$Compiled$ForStaticCall | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$ForStaticMethod | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.Default | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.TypeCache$Sort | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Factory | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$ForField$WithLookup | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType$NamingStrategy | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingInstrumentation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$ForConstruction | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType$NamingStrategy$SuffixingRandom | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$Compiled$ForConstruction | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Disabled$Factory | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Factory$AccessResolver$Default | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Compound | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$FieldSetter | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.TypeCache$LookupKey | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$FieldGetterDelegation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna$Dispatcher$CreationAction | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.TypeCache$WithInlineExpunction | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$System | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$Default$WrappingDispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Dispatcher$Initializable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingLookup$MethodHandles$Lookup | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$DelegationRecord | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.TypeCache | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Compound$Composable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Target$AbstractBase | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$ForJnaInjection | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Simple$Dispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$SpecialMethodInvocation$Illegal | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$FieldCacheEntry | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$CacheValueField | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Initializable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Simple$ForDispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingInstrumentation$Target | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna$Dispatcher$Unavailable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Initializable$Unavailable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$SpecialMethodInvocation$Simple | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Direct$ForJava7CapableVm | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Simple$ForDispatcher$Appender | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna$Dispatcher$Enabled | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.ByteBuddy | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType$SignatureRelevant | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$UsingUnsafeOverride$ForLegacyVm | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Direct$ForLegacyVm | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.This$Binder | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.ByteBuddy$EnumerationImplementation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.TypeCache$SimpleKey | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$Factory | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Dispatcher$Unavailable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$CreationAction | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$AbstractBase | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$ForPreloadedTypes | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$Configurable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$SpecialMethodInvocation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Target$Factory | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.This | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$Default$InjectionDispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$UsingUnsafeOverride | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$Appender | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType$Verifier | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.TypeCache$StorageKey | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingInstrumentation$Dispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna$Dispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$ForMethodReturn | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$Compiled$ForField | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$WithCustomProperties | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$AccessorMethodDelegation | DELETION | TYPE_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import org.assertj.core.internal.bytebuddy.ByteBuddy;\nimport org.assertj.core.internal.bytebuddy.TypeCache;\nimport org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;\nimport org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;\nimport org.assertj.core.internal.bytebuddy.implementation.Implementation;\nimport org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;\nimport org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;\nimport static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;\n    private static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED)\n            .with(new AuxiliaryType.NamingStrategy.SuffixingRandom(\"Assertj$Assumptions\"));\n    private static final Implementation ASSUMPTION = MethodDelegation.to(AssumptionMethodInterceptor.class);\n    private static final TypeCache<SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>(TypeCache.Sort.SOFT);\n        @RuntimeType\n        public static Object intercept(@This AbstractVavrAssert<?, ?> assertion, @SuperCall Callable<Object> proxy) throws Exception {\n        SimpleKey cacheKey = new SimpleKey(assertClass);\n                .method(any())",
    "error_message": "[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[24,43] package org.assertj.core.internal.bytebuddy does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[25,43] package org.assertj.core.internal.bytebuddy does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[26,53] package org.assertj.core.internal.bytebuddy.TypeCache does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[27,60] package org.assertj.core.internal.bytebuddy.dynamic.scaffold does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[28,58] package org.assertj.core.internal.bytebuddy.implementation does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[29,58] package org.assertj.core.internal.bytebuddy.implementation does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[30,68] package org.assertj.core.internal.bytebuddy.implementation.auxiliary does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[31,74] package org.assertj.core.internal.bytebuddy.implementation.bind.annotation does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[32,74] package org.assertj.core.internal.bytebuddy.implementation.bind.annotation does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[33,74] package org.assertj.core.internal.bytebuddy.implementation.bind.annotation does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[40,58] package org.assertj.core.internal.bytebuddy.matcher does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[50,26] cannot find symbol  symbol:   class ByteBuddy\n  location: class org.assertj.vavr.api.VavrAssumptions\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[51,51] package AuxiliaryType.NamingStrategy does not exist\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[53,26] cannot find symbol  symbol:   class Implementation\n  location: class org.assertj.vavr.api.VavrAssumptions\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[55,26] cannot find symbol  symbol:   class TypeCache\n  location: class org.assertj.vavr.api.VavrAssumptions\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[59,10] cannot find symbol  symbol:   class RuntimeType\n  location: class org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[60,41] cannot find symbol  symbol:   class This\n  location: class org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[215,9] cannot find symbol  symbol:   class SimpleKey\n  location: class org.assertj.vavr.api.VavrAssumptions\n[ERROR] /assertj-vavr/src/main/java/org/assertj/vavr/api/VavrAssumptions.java:[223,25] cannot find symbol  symbol:   method any()\n  location: class org.assertj.vavr.api.VavrAssumptions",
    "api_diff": "Format: element | nature | kind\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$ForUnsafeInjection | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingLookup | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$ForField | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Dispatcher$Enabled | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType$NamingStrategy$Enumerating | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna$Dispatcher$Windows32BitFunctionMapper | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$System | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Factory | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Direct | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$Default | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Simple | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna$Dispatcher$Jvm | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$Compiled | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingLookup$MethodHandles | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$ForField$WithInstance | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Unavailable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$Compiled$ForMethodReturn | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.ByteBuddy$EnumerationImplementation$ValuesMethodAppender | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$ExtractableView | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Target | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.ByteBuddy$EnumerationImplementation$InitializationAppender | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$ForBootstrapInjection | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall$Binder | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Disabled | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$UsingUnsafeOverride$ForJava7CapableVm | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$AccessorMethod | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$AbstractPropertyAccessorMethod | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$FieldSetterDelegation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Dispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$UsingLookup | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$UsingUnsafeInjection | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Dispatcher$CreationAction | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$SpecialMethodInvocation$AbstractBase | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Composable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Factory$AccessResolver | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$ExtractableView$AbstractBase | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$FieldGetter | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$Compiled$ForStaticCall | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$ForStaticMethod | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.Default | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.TypeCache$Sort | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Factory | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$ForField$WithLookup | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType$NamingStrategy | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingInstrumentation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$ForConstruction | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType$NamingStrategy$SuffixingRandom | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$Compiled$ForConstruction | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Disabled$Factory | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Factory$AccessResolver$Default | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Compound | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$FieldSetter | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.TypeCache$LookupKey | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$FieldGetterDelegation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna$Dispatcher$CreationAction | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.TypeCache$WithInlineExpunction | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$System | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$Default$WrappingDispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Dispatcher$Initializable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingLookup$MethodHandles$Lookup | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$DelegationRecord | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.TypeCache | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Compound$Composable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Target$AbstractBase | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$ForJnaInjection | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Simple$Dispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$SpecialMethodInvocation$Illegal | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$FieldCacheEntry | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$CacheValueField | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Initializable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Simple$ForDispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingInstrumentation$Target | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna$Dispatcher$Unavailable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Initializable$Unavailable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$SpecialMethodInvocation$Simple | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Direct$ForJava7CapableVm | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Simple$ForDispatcher$Appender | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna$Dispatcher$Enabled | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.ByteBuddy | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType$SignatureRelevant | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$UsingUnsafeOverride$ForLegacyVm | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Direct$ForLegacyVm | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.This$Binder | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.ByteBuddy$EnumerationImplementation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.TypeCache$SimpleKey | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$Factory | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Dispatcher$Unavailable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$CreationAction | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$AbstractBase | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$ForPreloadedTypes | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$Configurable | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$SpecialMethodInvocation | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Target$Factory | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.This | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$Default$InjectionDispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$UsingUnsafeOverride | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$Appender | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType$Verifier | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.TypeCache$StorageKey | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingInstrumentation$Dispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingJna$Dispatcher | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$ForMethodReturn | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$ImplementationDelegate$Compiled$ForField | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.MethodDelegation$WithCustomProperties | DELETION | TYPE_REMOVED\norg.assertj.core.internal.bytebuddy.implementation.Implementation$Context$Default$AccessorMethodDelegation | DELETION | TYPE_REMOVED",
    "original_code": "package org.assertj.vavr.api;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.concurrent.Callable;\nimport io.vavr.Lazy;\nimport io.vavr.collection.Map;\nimport io.vavr.collection.Multimap;\nimport io.vavr.collection.Seq;\nimport io.vavr.collection.Set;\nimport io.vavr.control.Either;\nimport io.vavr.control.Option;\nimport io.vavr.control.Try;\nimport io.vavr.control.Validation;\nimport org.assertj.core.internal.bytebuddy.ByteBuddy;\nimport org.assertj.core.internal.bytebuddy.TypeCache;\nimport org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;\nimport org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;\nimport org.assertj.core.internal.bytebuddy.implementation.Implementation;\nimport org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;\nimport org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;\nimport org.assertj.core.util.CheckReturnValue;\nimport static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;\nimport static org.assertj.core.util.Arrays.array;\nimport static org.assertj.vavr.api.ClassLoadingStrategyFactory.classLoadingStrategy;\npublic class VavrAssumptions {\n    private static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED).with(new AuxiliaryType.NamingStrategy.SuffixingRandom(\"Assertj$Assumptions\"));\n\n    private static final Implementation ASSUMPTION = MethodDelegation.to(VavrAssumptions.AssumptionMethodInterceptor.class);\n\n    private static final TypeCache<SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>(TypeCache.Sort.SOFT);\n\n    private static final class AssumptionMethodInterceptor {\n        @RuntimeType\n        public static Object intercept(@This\n        AbstractVavrAssert<?, ?> assertion, @SuperCall\n        Callable<Object> proxy) throws Exception {\n            try {\n                Object result = proxy.call();\n                if ((result != assertion) && (result instanceof AbstractVavrAssert)) {\n                    final AbstractVavrAssert<?, ?> assumption = asAssumption(((AbstractVavrAssert<?, ?>) (result)));\n                    return assumption.withAssertionState(assertion);\n                }\n                return result;\n            } catch (AssertionError e) {\n                throw assumptionNotMet(e);\n            }\n        }\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <LEFT, RIGHT> EitherAssert<LEFT, RIGHT> assumeThat(Either<LEFT, RIGHT> actual) {\n        return asAssumption(EitherAssert.class, Either.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <VALUE> LazyAssert<VALUE> assumeThat(Lazy<VALUE> actual) {\n        return asAssumption(LazyAssert.class, Lazy.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <K, V> MapAssert<K, V> assumeThat(Map<K, V> actual) {\n        return asAssumption(MapAssert.class, Map.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <K, V> MultimapAssert<K, V> assumeThat(Multimap<K, V> actual) {\n        return asAssumption(MultimapAssert.class, Multimap.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <VALUE> OptionAssert<VALUE> assumeThat(Option<VALUE> actual) {\n        return asAssumption(OptionAssert.class, Option.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <ELEMENT> SetAssert<ELEMENT> assumeThat(Set<ELEMENT> actual) {\n        return asAssumption(SetAssert.class, Set.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <ELEMENT> SeqAssert<ELEMENT> assumeThat(Seq<ELEMENT> actual) {\n        return asAssumption(SeqAssert.class, Seq.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <VALUE> TryAssert<VALUE> assumeThat(Try<VALUE> actual) {\n        return asAssumption(TryAssert.class, Try.class, actual);\n    }\n\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <INVALID, VALID> ValidationAssert<INVALID, VALID> assumeThat(Validation<INVALID, VALID> actual) {\n        return asAssumption(ValidationAssert.class, Validation.class, actual);\n    }\n\n    private static <ASSERTION, ACTUAL> ASSERTION asAssumption(Class<ASSERTION> assertionType, Class<ACTUAL> actualType, Object actual) {\n        return asAssumption(assertionType, array(actualType), array(actual));\n    }\n\n    private static <ASSERTION> ASSERTION asAssumption(Class<ASSERTION> assertionType, Class<?>[] constructorTypes, Object... constructorParams) {\n        try {\n            Class<? extends ASSERTION> type = createAssumptionClass(assertionType);\n            Constructor<? extends ASSERTION> constructor = type.getConstructor(constructorTypes);\n            return constructor.newInstance(constructorParams);\n        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) {\n            throw new RuntimeException(\"Cannot create assumption instance\", e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private static <ASSERTION> Class<? extends ASSERTION> createAssumptionClass(Class<ASSERTION> assertClass) {\n        SimpleKey cacheKey = new SimpleKey(assertClass);\n        return ((Class<ASSERTION>) (CACHE.findOrInsert(VavrAssumptions.class.getClassLoader(), cacheKey, () -> generateAssumptionClass(assertClass))));\n    }\n\n    private static <ASSERTION> Class<? extends ASSERTION> generateAssumptionClass(Class<ASSERTION> assertionType) {\n        return BYTE_BUDDY.subclass(assertionType).method(any()).intercept(ASSUMPTION).make().load(VavrAssumptions.class.getClassLoader(), classLoadingStrategy(assertionType)).getLoaded();\n    }\n\n    private static RuntimeException assumptionNotMet(AssertionError assertionError) throws ReflectiveOperationException {\n        Class<?> assumptionClass = getAssumptionClass(\"org.junit.AssumptionViolatedException\");\n        if (assumptionClass != null)\n            return assumptionNotMet(assumptionClass, assertionError);\n\n        assumptionClass = getAssumptionClass(\"org.opentest4j.TestAbortedException\");\n        if (assumptionClass != null)\n            return assumptionNotMet(assumptionClass, assertionError);\n\n        assumptionClass = getAssumptionClass(\"org.testng.SkipException\");\n        if (assumptionClass != null)\n            return assumptionNotMet(assumptionClass, assertionError);\n\n        throw new IllegalStateException(\"Assumptions require JUnit, opentest4j or TestNG on the classpath\");\n    }\n\n    private static Class<?> getAssumptionClass(String className) {\n        try {\n            return Class.forName(className);\n        } catch (ClassNotFoundException e) {\n            return null;\n        }\n    }\n\n    private static RuntimeException assumptionNotMet(Class<?> exceptionClass, AssertionError e) throws ReflectiveOperationException {\n        return ((RuntimeException) (exceptionClass.getConstructor(String.class, Throwable.class).newInstance(\"assumption was not met due to: \" + e.getMessage(), e)));\n    }\n\n    private static AbstractVavrAssert<?, ?> asAssumption(AbstractVavrAssert<?, ?> assertion) {\n        Object actual = assertion.actual();\n        if (assertion instanceof LazyAssert)\n            return asAssumption(LazyAssert.class, Lazy.class, actual);\n\n        if (assertion instanceof EitherAssert)\n            return asAssumption(EitherAssert.class, Either.class, actual);\n\n        if (assertion instanceof MapAssert)\n            return asAssumption(MapAssert.class, Map.class, actual);\n\n        if (assertion instanceof OptionAssert)\n            return asAssumption(OptionAssert.class, Option.class, actual);\n\n        if (assertion instanceof SeqAssert)\n            return asAssumption(SeqAssert.class, Seq.class, actual);\n\n        if (assertion instanceof TryAssert)\n            return asAssumption(TryAssert.class, Try.class, actual);\n\n        if (assertion instanceof ValidationAssert)\n            return asAssumption(ValidationAssert.class, Validation.class, actual);\n\n        throw new IllegalArgumentException(\"Unsupported assumption creation for \" + assertion.getClass());\n    }\n}\n",
    "project": "assertj-vavr",
    "libraryName": "assertj-core",
    "libraryGroupID": "org.assertj",
    "newVersion": "3.23.0",
    "previousVersion": "3.22.0",
    "breakingCommit": "1cc7071371953a7880c2c2c3a5a32c36af7f88f9"
}