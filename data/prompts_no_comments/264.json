{
    "absolute_path_to_file_in_container": "/sorald/sorald/src/main/java/sorald/sonar/SonarLintEngine.java",
    "errors": [
        {
            "line_number": 163,
            "message": "[ERROR] /sorald/sorald/src/main/java/sorald/sonar/SonarLintEngine.java:[163,17] cannot find symbol",
            "additional_info": "  symbol:   method addEnabledLanguages(java.util.Set<org.sonarsource.sonarlint.core.commons.Language>)\n  location: class org.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration.Builder",
            "file_name": "SonarLintEngine.java",
            "uid": "0882acf0-761e-5738-a28b-2041926faf28"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: sonarlint-core 8.15.0.65216->8.19.0.72745\n\nthe following client code fails: \n'''java\npackage sorald.sonar;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ExecutionException;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\nimport javax.annotation.Nullable;\nimport org.sonar.api.Plugin;\nimport org.sonarsource.sonarlint.core.AbstractSonarLintEngine;\nimport org.sonarsource.sonarlint.core.analysis.AnalysisEngine;\nimport org.sonarsource.sonarlint.core.analysis.api.ActiveRule;\nimport org.sonarsource.sonarlint.core.analysis.api.AnalysisConfiguration;\nimport org.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration;\nimport org.sonarsource.sonarlint.core.analysis.api.AnalysisResults;\nimport org.sonarsource.sonarlint.core.analysis.command.AnalyzeCommand;\nimport org.sonarsource.sonarlint.core.client.api.common.PluginDetails;\nimport org.sonarsource.sonarlint.core.client.api.common.analysis.DefaultClientIssue;\nimport org.sonarsource.sonarlint.core.client.api.common.analysis.IssueListener;\nimport org.sonarsource.sonarlint.core.client.api.exceptions.SonarLintWrappedException;\nimport org.sonarsource.sonarlint.core.client.api.standalone.StandaloneAnalysisConfiguration;\nimport org.sonarsource.sonarlint.core.client.api.standalone.StandaloneGlobalConfiguration;\nimport org.sonarsource.sonarlint.core.commons.Language;\nimport org.sonarsource.sonarlint.core.commons.RuleKey;\nimport org.sonarsource.sonarlint.core.commons.log.ClientLogOutput;\nimport org.sonarsource.sonarlint.core.commons.progress.ClientProgressMonitor;\nimport org.sonarsource.sonarlint.core.commons.progress.ProgressMonitor;\nimport org.sonarsource.sonarlint.core.plugin.commons.LoadedPlugins;\nimport org.sonarsource.sonarlint.core.plugin.commons.PluginsLoadResult;\nimport org.sonarsource.sonarlint.core.plugin.commons.PluginsLoader;\nimport org.sonarsource.sonarlint.core.plugin.commons.PluginsLoader.Configuration;\nimport org.sonarsource.sonarlint.core.plugin.commons.loading.PluginInfo;\nimport org.sonarsource.sonarlint.core.plugin.commons.loading.PluginInstancesLoader;\nimport org.sonarsource.sonarlint.core.plugin.commons.loading.PluginRequirementsCheckResult;\nimport org.sonarsource.sonarlint.core.rule.extractor.SonarLintRuleDefinition;\nimport sorald.FileUtils;\nimport sorald.util.ConfigLoader;\nimport static java.util.Objects.requireNonNull;\nimport static java.util.stream.Collectors.toList;\nimport static java.util.stream.Collectors.toSet;\npublic final class SonarLintEngine extends AbstractSonarLintEngine {\n    private static final String SONAR_JAVA_PLUGIN_JAR_NAME = \"sonar-java-plugin.jar\";\n\n    private static final Path sonarJavaPlugin = getOrDownloadSonarJavaPlugin().getPath();\n\n    private static final StandaloneGlobalConfiguration globalConfig = buildGlobalConfig();\n\n    private static final LoadedPluginsThatDoesNotCloseLoader loadedPlugins = getLoadedPlugins();\n\n    private static final Map<String, SonarLintRuleDefinition> allRulesDefinitionsByKey = computeAllRulesDefinitionsByKey();\n\n    private static final AnalysisEngineConfiguration analysisGlobalConfig = buildAnalysisEngineConfiguration();\n\n    private static SonarLintEngine theOnlyInstance;\n\n    private AnalysisEngine analysisEngine;\n\n    private SonarLintEngine() {\n        super(null);\n        setLogging(null);\n        this.analysisEngine = new AnalysisEngine(analysisGlobalConfig, loadedPlugins, null);\n    }\n\n    private static SonarJavaJarHolder getOrDownloadSonarJavaPlugin() {\n        File cacheDirectory = FileUtils.getCacheDir();\n        String sonarJavaPluginFileName = (cacheDirectory + System.getProperty(\"file.separator\")) + SONAR_JAVA_PLUGIN_JAR_NAME;\n        File sonarJavaPlugin = new File(sonarJavaPluginFileName);\n        if (sonarJavaPlugin.exists()) {\n            return new SonarJavaJarHolder(sonarJavaPlugin.toPath(), false);\n        }\n        try {\n            InputStream inputStream = new URL(ConfigLoader.getSonarJavaPluginUrl()).openStream();\n            Files.copy(inputStream, Paths.get(sonarJavaPluginFileName), StandardCopyOption.REPLACE_EXISTING);\n            return new SonarJavaJarHolder(new File(sonarJavaPluginFileName).toPath(), true);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Could not download Sonar Java plugin\", e);\n        }\n    }\n\n    public static class SonarJavaJarHolder {\n        private final Path path;\n\n        private final boolean downloaded;\n\n        SonarJavaJarHolder(Path path, boolean downloaded) {\n            this.path = path;\n            this.downloaded = downloaded;\n        }\n\n        public Path getPath() {\n            return path;\n        }\n\n        public boolean isDownloaded() {\n            return downloaded;\n        }\n    }\n\n    private static StandaloneGlobalConfiguration buildGlobalConfig() {\n        return StandaloneGlobalConfiguration.builder().addPlugin(sonarJavaPlugin).addEnabledLanguage(Language.JAVA).build();\n    }\n\n    private static LoadedPluginsThatDoesNotCloseLoader getLoadedPlugins() {\n        var config = new Configuration(globalConfig.getPluginPaths(), globalConfig.getEnabledLanguages(), Optional.ofNullable(globalConfig.getNodeJsVersion()));\n        PluginsLoadResult loadedResult = new PluginsLoader().load(config);\n        Map<String, PluginRequirementsCheckResult> pluginCheckResultByKeys = loadedResult.getPluginCheckResultByKeys();\n        Collection<PluginInfo> allPlugins = getAllPlugins(pluginCheckResultByKeys);\n        PluginInstancesLoader instancesLoader = new PluginInstancesLoader();\n        Map<String, Plugin> pluginInstancesByKeys = instancesLoader.instantiatePluginClasses(allPlugins);\n        return new LoadedPluginsThatDoesNotCloseLoader(pluginInstancesByKeys, new PluginInstancesLoader());\n    }\n\n    private static Collection<PluginInfo> getAllPlugins(Map<String, PluginRequirementsCheckResult> pluginCheckResultByKeys) {\n        return pluginCheckResultByKeys.values().stream().map(PluginRequirementsCheckResult::getPlugin).collect(toList());\n    }\n\n    private static Map<String, SonarLintRuleDefinition> computeAllRulesDefinitionsByKey() {\n        return loadPluginMetadata(loadedPlugins, globalConfig.getEnabledLanguages(), false, false);\n    }\n\n    private static AnalysisEngineConfiguration buildAnalysisEngineConfiguration() {\n        return AnalysisEngineConfiguration.builder().addEnabledLanguages(globalConfig.getEnabledLanguages()).setClientPid(globalConfig.getClientPid()).setExtraProperties(globalConfig.extraProperties()).setWorkDir(globalConfig.getWorkDir()).setModulesProvider(globalConfig.getModulesProvider()).build();\n    }\n\n    public static SonarLintEngine getInstance() {\n        if (theOnlyInstance == null) {\n            theOnlyInstance = new SonarLintEngine();\n        } else {\n            theOnlyInstance.recreateAnalysisEngine();\n        }\n        return theOnlyInstance;\n    }\n\n    public void recreateAnalysisEngine() {\n        this.analysisEngine = new AnalysisEngine(analysisGlobalConfig, loadedPlugins, logOutput);\n    }\n\n    @Override\n    public AnalysisEngine getAnalysisEngine() {\n        return analysisEngine;\n    }\n\n    public AnalysisResults analyze(StandaloneAnalysisConfiguration configuration, IssueListener issueListener, @Nullable\n    ClientLogOutput logOutput, @Nullable\n    ClientProgressMonitor monitor) {\n        requireNonNull(configuration);\n        requireNonNull(issueListener);\n        setLogging(logOutput);\n        var analysisConfig = AnalysisConfiguration.builder().addInputFiles(configuration.inputFiles()).putAllExtraProperties(configuration.extraProperties()).addActiveRules(identifyActiveRules(configuration)).setBaseDir(configuration.baseDir()).build();\n        try {\n            var analysisResults = analysisEngine.post(new AnalyzeCommand(configuration.moduleKey(), analysisConfig, i -> issueListener.handle(new DefaultClientIssue(i, allRulesDefinitionsByKey.get(i.getRuleKey()))), logOutput), new ProgressMonitor(monitor)).get();\n            return analysisResults == null ? new AnalysisResults() : analysisResults;\n        } catch (ExecutionException e) {\n            throw SonarLintWrappedException.wrap(e);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw SonarLintWrappedException.wrap(e);\n        }\n    }\n\n    public static Map<String, SonarLintRuleDefinition> getAllRulesDefinitionsByKey() {\n        return allRulesDefinitionsByKey;\n    }\n\n    private Collection<ActiveRule> identifyActiveRules(StandaloneAnalysisConfiguration configuration) {\n        Set<String> includedRules = configuration.includedRules().stream().map(RuleKey::toString).collect(toSet());\n        return allRulesDefinitionsByKey.values().stream().filter(isImplementedBySonarJavaPlugin(includedRules)).map(rd -> {\n            ActiveRule activeRule = new ActiveRule(rd.getKey(), rd.getLanguage().getLanguageKey());\n            RuleKey ruleKey = RuleKey.parse(rd.getKey());\n            if (configuration.ruleParameters().containsKey(ruleKey)) {\n                activeRule.setParams(configuration.ruleParameters().get(ruleKey));\n            }\n            return activeRule;\n        }).collect(Collectors.toList());\n    }\n\n    private static Predicate<? super SonarLintRuleDefinition> isImplementedBySonarJavaPlugin(Set<String> includedRules) {\n        return r -> includedRules.contains(r.getKey());\n    }\n\n    public void stop() {\n        analysisEngine.stop();\n    }\n\n    public List<PluginDetails> getPluginDetails() {\n        throw new RuntimeException(\"Not implemented\");\n    }\n\n    public static class LoadedPluginsThatDoesNotCloseLoader extends LoadedPlugins {\n        public LoadedPluginsThatDoesNotCloseLoader(Map<String, Plugin> pluginInstancesByKeys, PluginInstancesLoader pluginInstancesLoader) {\n            super(pluginInstancesByKeys, pluginInstancesLoader);\n        }\n\n        @Override\n        public void unload() {\n        }\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n                .addEnabledLanguages(globalConfig.getEnabledLanguages())\nwith the following error message:\n[ERROR] /sorald/sorald/src/main/java/sorald/sonar/SonarLintEngine.java:[163,17] cannot find symbol  symbol:   method addEnabledLanguages(java.util.Set<org.sonarsource.sonarlint.core.commons.Language>)\n  location: class org.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration.Builder\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration.getEnabledLanguages | DELETION | METHOD_REMOVED\norg.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration$Builder.addEnabledLanguages | DELETION | METHOD_REMOVED\norg.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration$Builder.addEnabledLanguage | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "                .addEnabledLanguages(globalConfig.getEnabledLanguages())",
    "error_message": "[ERROR] /sorald/sorald/src/main/java/sorald/sonar/SonarLintEngine.java:[163,17] cannot find symbol  symbol:   method addEnabledLanguages(java.util.Set<org.sonarsource.sonarlint.core.commons.Language>)\n  location: class org.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration.Builder",
    "api_diff": "Format: element | nature | kind\norg.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration.getEnabledLanguages | DELETION | METHOD_REMOVED\norg.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration$Builder.addEnabledLanguages | DELETION | METHOD_REMOVED\norg.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration$Builder.addEnabledLanguage | DELETION | METHOD_REMOVED",
    "original_code": "package sorald.sonar;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ExecutionException;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\nimport javax.annotation.Nullable;\nimport org.sonar.api.Plugin;\nimport org.sonarsource.sonarlint.core.AbstractSonarLintEngine;\nimport org.sonarsource.sonarlint.core.analysis.AnalysisEngine;\nimport org.sonarsource.sonarlint.core.analysis.api.ActiveRule;\nimport org.sonarsource.sonarlint.core.analysis.api.AnalysisConfiguration;\nimport org.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration;\nimport org.sonarsource.sonarlint.core.analysis.api.AnalysisResults;\nimport org.sonarsource.sonarlint.core.analysis.command.AnalyzeCommand;\nimport org.sonarsource.sonarlint.core.client.api.common.PluginDetails;\nimport org.sonarsource.sonarlint.core.client.api.common.analysis.DefaultClientIssue;\nimport org.sonarsource.sonarlint.core.client.api.common.analysis.IssueListener;\nimport org.sonarsource.sonarlint.core.client.api.exceptions.SonarLintWrappedException;\nimport org.sonarsource.sonarlint.core.client.api.standalone.StandaloneAnalysisConfiguration;\nimport org.sonarsource.sonarlint.core.client.api.standalone.StandaloneGlobalConfiguration;\nimport org.sonarsource.sonarlint.core.commons.Language;\nimport org.sonarsource.sonarlint.core.commons.RuleKey;\nimport org.sonarsource.sonarlint.core.commons.log.ClientLogOutput;\nimport org.sonarsource.sonarlint.core.commons.progress.ClientProgressMonitor;\nimport org.sonarsource.sonarlint.core.commons.progress.ProgressMonitor;\nimport org.sonarsource.sonarlint.core.plugin.commons.LoadedPlugins;\nimport org.sonarsource.sonarlint.core.plugin.commons.PluginsLoadResult;\nimport org.sonarsource.sonarlint.core.plugin.commons.PluginsLoader;\nimport org.sonarsource.sonarlint.core.plugin.commons.PluginsLoader.Configuration;\nimport org.sonarsource.sonarlint.core.plugin.commons.loading.PluginInfo;\nimport org.sonarsource.sonarlint.core.plugin.commons.loading.PluginInstancesLoader;\nimport org.sonarsource.sonarlint.core.plugin.commons.loading.PluginRequirementsCheckResult;\nimport org.sonarsource.sonarlint.core.rule.extractor.SonarLintRuleDefinition;\nimport sorald.FileUtils;\nimport sorald.util.ConfigLoader;\nimport static java.util.Objects.requireNonNull;\nimport static java.util.stream.Collectors.toList;\nimport static java.util.stream.Collectors.toSet;\npublic final class SonarLintEngine extends AbstractSonarLintEngine {\n    private static final String SONAR_JAVA_PLUGIN_JAR_NAME = \"sonar-java-plugin.jar\";\n\n    private static final Path sonarJavaPlugin = getOrDownloadSonarJavaPlugin().getPath();\n\n    private static final StandaloneGlobalConfiguration globalConfig = buildGlobalConfig();\n\n    private static final LoadedPluginsThatDoesNotCloseLoader loadedPlugins = getLoadedPlugins();\n\n    private static final Map<String, SonarLintRuleDefinition> allRulesDefinitionsByKey = computeAllRulesDefinitionsByKey();\n\n    private static final AnalysisEngineConfiguration analysisGlobalConfig = buildAnalysisEngineConfiguration();\n\n    private static SonarLintEngine theOnlyInstance;\n\n    private AnalysisEngine analysisEngine;\n\n    private SonarLintEngine() {\n        super(null);\n        setLogging(null);\n        this.analysisEngine = new AnalysisEngine(analysisGlobalConfig, loadedPlugins, null);\n    }\n\n    private static SonarJavaJarHolder getOrDownloadSonarJavaPlugin() {\n        File cacheDirectory = FileUtils.getCacheDir();\n        String sonarJavaPluginFileName = (cacheDirectory + System.getProperty(\"file.separator\")) + SONAR_JAVA_PLUGIN_JAR_NAME;\n        File sonarJavaPlugin = new File(sonarJavaPluginFileName);\n        if (sonarJavaPlugin.exists()) {\n            return new SonarJavaJarHolder(sonarJavaPlugin.toPath(), false);\n        }\n        try {\n            InputStream inputStream = new URL(ConfigLoader.getSonarJavaPluginUrl()).openStream();\n            Files.copy(inputStream, Paths.get(sonarJavaPluginFileName), StandardCopyOption.REPLACE_EXISTING);\n            return new SonarJavaJarHolder(new File(sonarJavaPluginFileName).toPath(), true);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Could not download Sonar Java plugin\", e);\n        }\n    }\n\n    public static class SonarJavaJarHolder {\n        private final Path path;\n\n        private final boolean downloaded;\n\n        SonarJavaJarHolder(Path path, boolean downloaded) {\n            this.path = path;\n            this.downloaded = downloaded;\n        }\n\n        public Path getPath() {\n            return path;\n        }\n\n        public boolean isDownloaded() {\n            return downloaded;\n        }\n    }\n\n    private static StandaloneGlobalConfiguration buildGlobalConfig() {\n        return StandaloneGlobalConfiguration.builder().addPlugin(sonarJavaPlugin).addEnabledLanguage(Language.JAVA).build();\n    }\n\n    private static LoadedPluginsThatDoesNotCloseLoader getLoadedPlugins() {\n        var config = new Configuration(globalConfig.getPluginPaths(), globalConfig.getEnabledLanguages(), Optional.ofNullable(globalConfig.getNodeJsVersion()));\n        PluginsLoadResult loadedResult = new PluginsLoader().load(config);\n        Map<String, PluginRequirementsCheckResult> pluginCheckResultByKeys = loadedResult.getPluginCheckResultByKeys();\n        Collection<PluginInfo> allPlugins = getAllPlugins(pluginCheckResultByKeys);\n        PluginInstancesLoader instancesLoader = new PluginInstancesLoader();\n        Map<String, Plugin> pluginInstancesByKeys = instancesLoader.instantiatePluginClasses(allPlugins);\n        return new LoadedPluginsThatDoesNotCloseLoader(pluginInstancesByKeys, new PluginInstancesLoader());\n    }\n\n    private static Collection<PluginInfo> getAllPlugins(Map<String, PluginRequirementsCheckResult> pluginCheckResultByKeys) {\n        return pluginCheckResultByKeys.values().stream().map(PluginRequirementsCheckResult::getPlugin).collect(toList());\n    }\n\n    private static Map<String, SonarLintRuleDefinition> computeAllRulesDefinitionsByKey() {\n        return loadPluginMetadata(loadedPlugins, globalConfig.getEnabledLanguages(), false, false);\n    }\n\n    private static AnalysisEngineConfiguration buildAnalysisEngineConfiguration() {\n        return AnalysisEngineConfiguration.builder().addEnabledLanguages(globalConfig.getEnabledLanguages()).setClientPid(globalConfig.getClientPid()).setExtraProperties(globalConfig.extraProperties()).setWorkDir(globalConfig.getWorkDir()).setModulesProvider(globalConfig.getModulesProvider()).build();\n    }\n\n    public static SonarLintEngine getInstance() {\n        if (theOnlyInstance == null) {\n            theOnlyInstance = new SonarLintEngine();\n        } else {\n            theOnlyInstance.recreateAnalysisEngine();\n        }\n        return theOnlyInstance;\n    }\n\n    public void recreateAnalysisEngine() {\n        this.analysisEngine = new AnalysisEngine(analysisGlobalConfig, loadedPlugins, logOutput);\n    }\n\n    @Override\n    public AnalysisEngine getAnalysisEngine() {\n        return analysisEngine;\n    }\n\n    public AnalysisResults analyze(StandaloneAnalysisConfiguration configuration, IssueListener issueListener, @Nullable\n    ClientLogOutput logOutput, @Nullable\n    ClientProgressMonitor monitor) {\n        requireNonNull(configuration);\n        requireNonNull(issueListener);\n        setLogging(logOutput);\n        var analysisConfig = AnalysisConfiguration.builder().addInputFiles(configuration.inputFiles()).putAllExtraProperties(configuration.extraProperties()).addActiveRules(identifyActiveRules(configuration)).setBaseDir(configuration.baseDir()).build();\n        try {\n            var analysisResults = analysisEngine.post(new AnalyzeCommand(configuration.moduleKey(), analysisConfig, i -> issueListener.handle(new DefaultClientIssue(i, allRulesDefinitionsByKey.get(i.getRuleKey()))), logOutput), new ProgressMonitor(monitor)).get();\n            return analysisResults == null ? new AnalysisResults() : analysisResults;\n        } catch (ExecutionException e) {\n            throw SonarLintWrappedException.wrap(e);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw SonarLintWrappedException.wrap(e);\n        }\n    }\n\n    public static Map<String, SonarLintRuleDefinition> getAllRulesDefinitionsByKey() {\n        return allRulesDefinitionsByKey;\n    }\n\n    private Collection<ActiveRule> identifyActiveRules(StandaloneAnalysisConfiguration configuration) {\n        Set<String> includedRules = configuration.includedRules().stream().map(RuleKey::toString).collect(toSet());\n        return allRulesDefinitionsByKey.values().stream().filter(isImplementedBySonarJavaPlugin(includedRules)).map(rd -> {\n            ActiveRule activeRule = new ActiveRule(rd.getKey(), rd.getLanguage().getLanguageKey());\n            RuleKey ruleKey = RuleKey.parse(rd.getKey());\n            if (configuration.ruleParameters().containsKey(ruleKey)) {\n                activeRule.setParams(configuration.ruleParameters().get(ruleKey));\n            }\n            return activeRule;\n        }).collect(Collectors.toList());\n    }\n\n    private static Predicate<? super SonarLintRuleDefinition> isImplementedBySonarJavaPlugin(Set<String> includedRules) {\n        return r -> includedRules.contains(r.getKey());\n    }\n\n    public void stop() {\n        analysisEngine.stop();\n    }\n\n    public List<PluginDetails> getPluginDetails() {\n        throw new RuntimeException(\"Not implemented\");\n    }\n\n    public static class LoadedPluginsThatDoesNotCloseLoader extends LoadedPlugins {\n        public LoadedPluginsThatDoesNotCloseLoader(Map<String, Plugin> pluginInstancesByKeys, PluginInstancesLoader pluginInstancesLoader) {\n            super(pluginInstancesByKeys, pluginInstancesLoader);\n        }\n\n        @Override\n        public void unload() {\n        }\n    }\n}\n",
    "project": "sorald",
    "libraryName": "sonarlint-core",
    "libraryGroupID": "org.sonarsource.sonarlint.core",
    "newVersion": "8.19.0.72745",
    "previousVersion": "8.15.0.65216",
    "breakingCommit": "c0f6ab75784dbc13ae8ff47298704c0756cf3a2c"
}