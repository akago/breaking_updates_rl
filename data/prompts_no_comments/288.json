{
    "absolute_path_to_file_in_container": "/OCR4all/src/main/java/de/uniwue/helper/RecognitionHelper.java",
    "errors": [
        {
            "line_number": 242,
            "message": "[ERROR] /OCR4all/src/main/java/de/uniwue/helper/RecognitionHelper.java:[242,42] cannot access com.fasterxml.jackson.core.exc.StreamWriteException",
            "additional_info": "  class file for com.fasterxml.jackson.core.exc.StreamWriteException not found",
            "file_name": "RecognitionHelper.java",
            "uid": "74780fd6-e634-5337-81f3-cfab3e160a4f"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: jackson-databind 2.10.0->2.13.4.1\n\nthe following client code fails: \n'''java\npackage de.uniwue.helper;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport org.apache.commons.io.FileUtils;\nimport de.uniwue.config.ProjectConfiguration;\nimport de.uniwue.feature.ProcessConflictDetector;\nimport de.uniwue.feature.ProcessHandler;\nimport de.uniwue.feature.ProcessStateCollector;\npublic class RecognitionHelper {\n    private ProjectConfiguration projConf;\n\n    private String projectImageType;\n\n    private GenericHelper genericHelper;\n\n    private ProcessStateCollector procStateCol;\n\n    private ProcessHandler processHandler;\n\n    private int progress = -1;\n\n    private boolean RecognitionRunning = false;\n\n    private Map<String, Long> imagesLastModified;\n\n    private TreeMap<String, TreeMap<String, TreeMap<String, Boolean>>> processState = new TreeMap<>();\n\n    public RecognitionHelper(String projectDir, String projectImageType) {\n        this.projectImageType = projectImageType;\n        projConf = new ProjectConfiguration(projectDir);\n        genericHelper = new GenericHelper(projConf);\n        procStateCol = new ProcessStateCollector(projConf, projectImageType);\n        processHandler = new ProcessHandler();\n    }\n\n    public ProcessHandler getProcessHandler() {\n        return processHandler;\n    }\n\n    public void initialize(List<String> pageIds) throws IOException {\n        imagesLastModified = new HashMap<>();\n        for (String pageId : pageIds) {\n            final String pageXML = (projConf.OCR_DIR + pageId) + projConf.CONF_EXT;\n            imagesLastModified.put(pageXML, new File(pageXML).lastModified());\n        }\n    }\n\n    public List<String> getLineSegmentImagesForCurrentProcess(List<String> pageIds) throws IOException {\n        List<String> LineSegmentsOfPage = new ArrayList<String>();\n        for (String pageId : processState.keySet()) {\n            for (String segmentId : processState.get(pageId).keySet()) {\n                for (String lineSegmentId : processState.get(pageId).get(segmentId).keySet()) {\n                    LineSegmentsOfPage.add((((((projConf.PAGE_DIR + pageId) + File.separator) + segmentId) + File.separator) + lineSegmentId) + projConf.getImageExtensionByType(projectImageType));\n                }\n            }\n        }\n        return LineSegmentsOfPage;\n    }\n\n    public int getProgress() throws IOException {\n        if (!RecognitionRunning)\n            return progress;\n\n        int modifiedCount = 0;\n        if (imagesLastModified != null) {\n            for (String pagexml : imagesLastModified.keySet()) {\n                if (imagesLastModified.get(pagexml) < new File(pagexml).lastModified()) {\n                    modifiedCount++;\n                }\n            }\n            progress = (modifiedCount * 100) / imagesLastModified.size();\n        } else {\n            progress = -1;\n        }\n        return progress;\n    }\n\n    public List<String> extractModelsOfJoinedString(String joinedckptString) {\n        String[] checkpoints = joinedckptString.split(ProjectConfiguration.MODEL_EXT + \" \");\n        List<String> ckptList = new ArrayList<>();\n        Iterator<String> ckptIterator = Arrays.asList(checkpoints).iterator();\n        while (ckptIterator.hasNext()) {\n            String ckpt = ckptIterator.next();\n            if (ckptIterator.hasNext())\n                ckpt = ckpt + ProjectConfiguration.MODEL_EXT;\n\n            ckptList.add(ckpt);\n        } \n        return ckptList;\n    }\n\n    public void execute(List<String> pageIds, final List<String> cmdArgs) throws IOException {\n        RecognitionRunning = true;\n        progress = 0;\n        List<String> cmdArgsWork = new ArrayList<>(cmdArgs);\n        if (cmdArgsWork.contains(\"--estimate_skew\")) {\n            List<String> skewparams = new ArrayList<>();\n            skewparams.add(\"skewestimate\");\n            final int maxskewIndex = cmdArgsWork.indexOf(\"--maxskew\");\n            if (maxskewIndex > (-1)) {\n                skewparams.add(cmdArgsWork.remove(maxskewIndex));\n                skewparams.add(cmdArgsWork.remove(maxskewIndex));\n            }\n            final int skewstepsIndex = cmdArgsWork.indexOf(\"--skewsteps\");\n            if (skewstepsIndex > (-1)) {\n                skewparams.add(cmdArgsWork.remove(skewstepsIndex));\n                skewparams.add(cmdArgsWork.remove(skewstepsIndex));\n            }\n            File segmentListFile = File.createTempFile(\"skew-\", \".json\");\n            skewparams.add(segmentListFile.toString());\n            segmentListFile.deleteOnExit();\n            ObjectMapper mapper = new ObjectMapper();\n            ArrayNode dataList = mapper.createArrayNode();\n            for (String pageId : pageIds) {\n                ArrayNode pageList = mapper.createArrayNode();\n                pageList.add((projConf.getImageDirectoryByType(projectImageType) + pageId) + projConf.getImageExtensionByType(projectImageType));\n                final String pageXML = (projConf.OCR_DIR + pageId) + projConf.CONF_EXT;\n                pageList.add(pageXML);\n                dataList.add(pageList);\n            }\n            ObjectWriter writer = mapper.writer();\n            writer.writeValue(segmentListFile, dataList);\n            processHandler = new ProcessHandler();\n            processHandler.setFetchProcessConsole(true);\n            processHandler.startProcess(\"ocr4all-helper-scripts\", skewparams, false);\n            cmdArgsWork.remove(\"--estimate_skew\");\n        }\n        deleteOldFiles(pageIds);\n        initialize(pageIds);\n        int index;\n        if (cmdArgsWork.contains(\"--checkpoint\")) {\n            index = cmdArgsWork.indexOf(\"--checkpoint\");\n            for (String ckpt : extractModelsOfJoinedString(cmdArgsWork.get(index + 1))) {\n                if (!new File(ckpt).exists())\n                    throw new IOException(\"Model does not exist under the specified path\");\n\n            }\n        }\n        List<String> command = new ArrayList<>();\n        if (cmdArgsWork.contains(\"--data.output_glyphs\")) {\n            cmdArgsWork.remove(\"--data.output_glyphs\");\n            command.add(\"--data.output_glyphs\");\n            command.add(\"True\");\n        }\n        if (cmdArgsWork.contains(\"--data.output_confidences\")) {\n            cmdArgsWork.remove(\"--data.output_confidences\");\n            command.add(\"--data.output_confidences\");\n            command.add(\"True\");\n        }\n        command.add(\"--data.images\");\n        File segmentListFile = File.createTempFile(\"calamari-\", \".files\");\n        segmentListFile.deleteOnExit();\n        List<String> content = new ArrayList<>();\n        for (String pageId : pageIds) {\n            content.add((projConf.getImageDirectoryByType(projectImageType) + pageId) + projConf.getImageExtensionByType(projectImageType));\n        }\n        Files.write(segmentListFile.toPath(), content, StandardOpenOption.APPEND);\n        command.add(segmentListFile.toString());\n        Iterator<String> cmdArgsIterator = cmdArgsWork.iterator();\n        while (cmdArgsIterator.hasNext()) {\n            String arg = cmdArgsIterator.next();\n            command.add(arg);\n            if (arg.equals(\"--checkpoint\") && cmdArgsIterator.hasNext()) {\n                command.addAll(extractModelsOfJoinedString(cmdArgsIterator.next()));\n            }\n        } \n        command.add(\"--data\");\n        command.add(\"PageXML\");\n        command.add(\"--data.gt_extension\");\n        command.add(\".xml\");\n        command.add(\"--data.pred_extension\");\n        command.add(\".xml\");\n        command.add(\"--data.text_index\");\n        command.add(\"1\");\n        command.add(\"--verbose\");\n        command.add(\"True\");\n        command.add(\"--predictor.progress_bar\");\n        command.add(\"False\");\n        processHandler = new ProcessHandler();\n        processHandler.setFetchProcessConsole(true);\n        processHandler.startProcess(\"calamari-predict\", command, false);\n        getProgress();\n        createSkippedSegments();\n        progress = 100;\n        RecognitionRunning = false;\n    }\n\n    public void resetProgress() {\n        RecognitionRunning = false;\n        progress = -1;\n    }\n\n    public void cancelProcess() {\n        if (processHandler != null)\n            processHandler.stopProcess();\n\n        RecognitionRunning = false;\n    }\n\n    public ArrayList<String> getValidPageIds() throws IOException {\n        ArrayList<String> validPageIds = new ArrayList<String>();\n        ArrayList<String> allPageIds = genericHelper.getPageList(\"Original\");\n        for (String pageId : allPageIds) {\n            if (procStateCol.lineSegmentationState(pageId) == true)\n                validPageIds.add(pageId);\n\n        }\n        Collections.sort(validPageIds);\n        return validPageIds;\n    }\n\n    public void deleteOldFiles(List<String> pageIds) throws IOException {\n        for (String pageId : pageIds) {\n            File pageXML = new File((projConf.OCR_DIR + pageId) + projConf.CONF_EXT);\n            if (!pageXML.exists())\n                return;\n\n            String pageXMLContent = new String(Files.readAllBytes(pageXML.toPath()));\n            pageXMLContent = pageXMLContent.replaceAll(\"\\\\<TextEquiv[^>]+?index=\\\"[^0]\\\"[^>]*?\\\\>[^<]*?\\\\<\\\\/TextEquiv\\\\>\", \"\");\n            try (FileWriter fileWriter = new FileWriter(pageXML)) {\n                fileWriter.write(pageXMLContent);\n                fileWriter.flush();\n                fileWriter.close();\n            }\n        }\n    }\n\n    public void createSkippedSegments() throws IOException {\n        for (String pageId : processState.keySet()) {\n            for (String segmentId : processState.get(pageId).keySet()) {\n                for (String lineSegmentId : processState.get(pageId).get(segmentId).keySet()) {\n                    if (processState.get(pageId).get(segmentId).get(lineSegmentId))\n                        continue;\n\n                    FileUtils.writeStringToFile(new File((((((projConf.PAGE_DIR + pageId) + File.separator) + segmentId) + File.separator) + lineSegmentId) + projConf.REC_EXT), \"\", \"UTF8\");\n                }\n            }\n        }\n    }\n\n    public boolean doOldFilesExist(String[] pageIds) {\n        for (String pageId : pageIds) {\n            if (procStateCol.recognitionState(pageId))\n                return true;\n\n        }\n        return false;\n    }\n\n    public static TreeMap<String, String> listModels() throws IOException {\n        TreeMap<String, String> models = new TreeMap<String, String>();\n        File modelsDir = new File(ProjectConfiguration.PROJ_MODEL_DIR);\n        if (!modelsDir.exists())\n            return models;\n\n        Files.walk(Paths.get(ProjectConfiguration.PROJ_MODEL_DIR), FileVisitOption.FOLLOW_LINKS).map(Path::toFile).filter(fileEntry -> fileEntry.getName().endsWith(ProjectConfiguration.MODEL_EXT)).forEach(fileEntry -> {\n            String modelName = fileEntry.getAbsolutePath();\n            modelName = modelName.replace(ProjectConfiguration.PROJ_MODEL_DEFAULT_DIR, \"\");\n            modelName = modelName.replace(ProjectConfiguration.PROJ_MODEL_CUSTOM_DIR, \"\");\n            modelName = modelName.replace(ProjectConfiguration.MODEL_EXT, \"\");\n            models.put(modelName, fileEntry.getAbsolutePath());\n        });\n        return models;\n    }\n\n    public int getConflictType(List<String> currentProcesses, boolean inProcessFlow) {\n        return ProcessConflictDetector.recognitionConflict(currentProcesses, inProcessFlow);\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n\t\t\twriter.writeValue(segmentListFile, dataList);\nwith the following error message:\n[ERROR] /OCR4all/src/main/java/de/uniwue/helper/RecognitionHelper.java:[242,42] cannot access com.fasterxml.jackson.core.exc.StreamWriteException  class file for com.fasterxml.jackson.core.exc.StreamWriteException not found\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\ncom.fasterxml.jackson.databind.ObjectMapper.readValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ser.BeanSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper.readValues | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.deser.BeanDeserializerBase.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ObjectWriter.writeValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper.writeValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper._initForReading | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.cfg.MapperConfig.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.DeserializationConfig.initialize | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.fasterxml.jackson.databind.cfg.MapperConfigBase.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ser.std.JsonValueSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectWriter._configureGenerator | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.fasterxml.jackson.databind.node.BaseJsonNode.toString | MUTATION | METHOD_NOW_FINAL\ncom.fasterxml.jackson.databind.ObjectMapper.writeTree | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.deser.BeanDeserializerBase.<init> | MUTATION | CONSTRUCTOR_NOW_PROTECTED\ncom.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ser.std.BeanSerializerBase.<init> | MUTATION | CONSTRUCTOR_NOW_PROTECTED\ncom.fasterxml.jackson.databind.ObjectMapper.readTree | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.cfg.BaseSettings.<init> | DELETION | CONSTRUCTOR_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "\t\t\twriter.writeValue(segmentListFile, dataList);",
    "error_message": "[ERROR] /OCR4all/src/main/java/de/uniwue/helper/RecognitionHelper.java:[242,42] cannot access com.fasterxml.jackson.core.exc.StreamWriteException  class file for com.fasterxml.jackson.core.exc.StreamWriteException not found",
    "api_diff": "Format: element | nature | kind\ncom.fasterxml.jackson.databind.ObjectMapper.readValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ser.BeanSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper.readValues | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.deser.BeanDeserializerBase.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ObjectWriter.writeValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectMapper.writeValue | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper._initForReading | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.cfg.MapperConfig.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.DeserializationConfig.initialize | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.fasterxml.jackson.databind.cfg.MapperConfigBase.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ser.std.JsonValueSerializer.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ObjectWriter._configureGenerator | MUTATION | METHOD_RETURN_TYPE_CHANGED\ncom.fasterxml.jackson.databind.node.BaseJsonNode.toString | MUTATION | METHOD_NOW_FINAL\ncom.fasterxml.jackson.databind.ObjectMapper.writeTree | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.<init> | DELETION | CONSTRUCTOR_REMOVED\ncom.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize | DELETION | METHOD_REMOVED\ncom.fasterxml.jackson.databind.deser.BeanDeserializerBase.<init> | MUTATION | CONSTRUCTOR_NOW_PROTECTED\ncom.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer | MUTATION | METHOD_NOW_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.ser.std.BeanSerializerBase.<init> | MUTATION | CONSTRUCTOR_NOW_PROTECTED\ncom.fasterxml.jackson.databind.ObjectMapper.readTree | MUTATION | METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION\ncom.fasterxml.jackson.databind.cfg.BaseSettings.<init> | DELETION | CONSTRUCTOR_REMOVED",
    "original_code": "package de.uniwue.helper;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport org.apache.commons.io.FileUtils;\nimport de.uniwue.config.ProjectConfiguration;\nimport de.uniwue.feature.ProcessConflictDetector;\nimport de.uniwue.feature.ProcessHandler;\nimport de.uniwue.feature.ProcessStateCollector;\npublic class RecognitionHelper {\n    private ProjectConfiguration projConf;\n\n    private String projectImageType;\n\n    private GenericHelper genericHelper;\n\n    private ProcessStateCollector procStateCol;\n\n    private ProcessHandler processHandler;\n\n    private int progress = -1;\n\n    private boolean RecognitionRunning = false;\n\n    private Map<String, Long> imagesLastModified;\n\n    private TreeMap<String, TreeMap<String, TreeMap<String, Boolean>>> processState = new TreeMap<>();\n\n    public RecognitionHelper(String projectDir, String projectImageType) {\n        this.projectImageType = projectImageType;\n        projConf = new ProjectConfiguration(projectDir);\n        genericHelper = new GenericHelper(projConf);\n        procStateCol = new ProcessStateCollector(projConf, projectImageType);\n        processHandler = new ProcessHandler();\n    }\n\n    public ProcessHandler getProcessHandler() {\n        return processHandler;\n    }\n\n    public void initialize(List<String> pageIds) throws IOException {\n        imagesLastModified = new HashMap<>();\n        for (String pageId : pageIds) {\n            final String pageXML = (projConf.OCR_DIR + pageId) + projConf.CONF_EXT;\n            imagesLastModified.put(pageXML, new File(pageXML).lastModified());\n        }\n    }\n\n    public List<String> getLineSegmentImagesForCurrentProcess(List<String> pageIds) throws IOException {\n        List<String> LineSegmentsOfPage = new ArrayList<String>();\n        for (String pageId : processState.keySet()) {\n            for (String segmentId : processState.get(pageId).keySet()) {\n                for (String lineSegmentId : processState.get(pageId).get(segmentId).keySet()) {\n                    LineSegmentsOfPage.add((((((projConf.PAGE_DIR + pageId) + File.separator) + segmentId) + File.separator) + lineSegmentId) + projConf.getImageExtensionByType(projectImageType));\n                }\n            }\n        }\n        return LineSegmentsOfPage;\n    }\n\n    public int getProgress() throws IOException {\n        if (!RecognitionRunning)\n            return progress;\n\n        int modifiedCount = 0;\n        if (imagesLastModified != null) {\n            for (String pagexml : imagesLastModified.keySet()) {\n                if (imagesLastModified.get(pagexml) < new File(pagexml).lastModified()) {\n                    modifiedCount++;\n                }\n            }\n            progress = (modifiedCount * 100) / imagesLastModified.size();\n        } else {\n            progress = -1;\n        }\n        return progress;\n    }\n\n    public List<String> extractModelsOfJoinedString(String joinedckptString) {\n        String[] checkpoints = joinedckptString.split(ProjectConfiguration.MODEL_EXT + \" \");\n        List<String> ckptList = new ArrayList<>();\n        Iterator<String> ckptIterator = Arrays.asList(checkpoints).iterator();\n        while (ckptIterator.hasNext()) {\n            String ckpt = ckptIterator.next();\n            if (ckptIterator.hasNext())\n                ckpt = ckpt + ProjectConfiguration.MODEL_EXT;\n\n            ckptList.add(ckpt);\n        } \n        return ckptList;\n    }\n\n    public void execute(List<String> pageIds, final List<String> cmdArgs) throws IOException {\n        RecognitionRunning = true;\n        progress = 0;\n        List<String> cmdArgsWork = new ArrayList<>(cmdArgs);\n        if (cmdArgsWork.contains(\"--estimate_skew\")) {\n            List<String> skewparams = new ArrayList<>();\n            skewparams.add(\"skewestimate\");\n            final int maxskewIndex = cmdArgsWork.indexOf(\"--maxskew\");\n            if (maxskewIndex > (-1)) {\n                skewparams.add(cmdArgsWork.remove(maxskewIndex));\n                skewparams.add(cmdArgsWork.remove(maxskewIndex));\n            }\n            final int skewstepsIndex = cmdArgsWork.indexOf(\"--skewsteps\");\n            if (skewstepsIndex > (-1)) {\n                skewparams.add(cmdArgsWork.remove(skewstepsIndex));\n                skewparams.add(cmdArgsWork.remove(skewstepsIndex));\n            }\n            File segmentListFile = File.createTempFile(\"skew-\", \".json\");\n            skewparams.add(segmentListFile.toString());\n            segmentListFile.deleteOnExit();\n            ObjectMapper mapper = new ObjectMapper();\n            ArrayNode dataList = mapper.createArrayNode();\n            for (String pageId : pageIds) {\n                ArrayNode pageList = mapper.createArrayNode();\n                pageList.add((projConf.getImageDirectoryByType(projectImageType) + pageId) + projConf.getImageExtensionByType(projectImageType));\n                final String pageXML = (projConf.OCR_DIR + pageId) + projConf.CONF_EXT;\n                pageList.add(pageXML);\n                dataList.add(pageList);\n            }\n            ObjectWriter writer = mapper.writer();\n            writer.writeValue(segmentListFile, dataList);\n            processHandler = new ProcessHandler();\n            processHandler.setFetchProcessConsole(true);\n            processHandler.startProcess(\"ocr4all-helper-scripts\", skewparams, false);\n            cmdArgsWork.remove(\"--estimate_skew\");\n        }\n        deleteOldFiles(pageIds);\n        initialize(pageIds);\n        int index;\n        if (cmdArgsWork.contains(\"--checkpoint\")) {\n            index = cmdArgsWork.indexOf(\"--checkpoint\");\n            for (String ckpt : extractModelsOfJoinedString(cmdArgsWork.get(index + 1))) {\n                if (!new File(ckpt).exists())\n                    throw new IOException(\"Model does not exist under the specified path\");\n\n            }\n        }\n        List<String> command = new ArrayList<>();\n        if (cmdArgsWork.contains(\"--data.output_glyphs\")) {\n            cmdArgsWork.remove(\"--data.output_glyphs\");\n            command.add(\"--data.output_glyphs\");\n            command.add(\"True\");\n        }\n        if (cmdArgsWork.contains(\"--data.output_confidences\")) {\n            cmdArgsWork.remove(\"--data.output_confidences\");\n            command.add(\"--data.output_confidences\");\n            command.add(\"True\");\n        }\n        command.add(\"--data.images\");\n        File segmentListFile = File.createTempFile(\"calamari-\", \".files\");\n        segmentListFile.deleteOnExit();\n        List<String> content = new ArrayList<>();\n        for (String pageId : pageIds) {\n            content.add((projConf.getImageDirectoryByType(projectImageType) + pageId) + projConf.getImageExtensionByType(projectImageType));\n        }\n        Files.write(segmentListFile.toPath(), content, StandardOpenOption.APPEND);\n        command.add(segmentListFile.toString());\n        Iterator<String> cmdArgsIterator = cmdArgsWork.iterator();\n        while (cmdArgsIterator.hasNext()) {\n            String arg = cmdArgsIterator.next();\n            command.add(arg);\n            if (arg.equals(\"--checkpoint\") && cmdArgsIterator.hasNext()) {\n                command.addAll(extractModelsOfJoinedString(cmdArgsIterator.next()));\n            }\n        } \n        command.add(\"--data\");\n        command.add(\"PageXML\");\n        command.add(\"--data.gt_extension\");\n        command.add(\".xml\");\n        command.add(\"--data.pred_extension\");\n        command.add(\".xml\");\n        command.add(\"--data.text_index\");\n        command.add(\"1\");\n        command.add(\"--verbose\");\n        command.add(\"True\");\n        command.add(\"--predictor.progress_bar\");\n        command.add(\"False\");\n        processHandler = new ProcessHandler();\n        processHandler.setFetchProcessConsole(true);\n        processHandler.startProcess(\"calamari-predict\", command, false);\n        getProgress();\n        createSkippedSegments();\n        progress = 100;\n        RecognitionRunning = false;\n    }\n\n    public void resetProgress() {\n        RecognitionRunning = false;\n        progress = -1;\n    }\n\n    public void cancelProcess() {\n        if (processHandler != null)\n            processHandler.stopProcess();\n\n        RecognitionRunning = false;\n    }\n\n    public ArrayList<String> getValidPageIds() throws IOException {\n        ArrayList<String> validPageIds = new ArrayList<String>();\n        ArrayList<String> allPageIds = genericHelper.getPageList(\"Original\");\n        for (String pageId : allPageIds) {\n            if (procStateCol.lineSegmentationState(pageId) == true)\n                validPageIds.add(pageId);\n\n        }\n        Collections.sort(validPageIds);\n        return validPageIds;\n    }\n\n    public void deleteOldFiles(List<String> pageIds) throws IOException {\n        for (String pageId : pageIds) {\n            File pageXML = new File((projConf.OCR_DIR + pageId) + projConf.CONF_EXT);\n            if (!pageXML.exists())\n                return;\n\n            String pageXMLContent = new String(Files.readAllBytes(pageXML.toPath()));\n            pageXMLContent = pageXMLContent.replaceAll(\"\\\\<TextEquiv[^>]+?index=\\\"[^0]\\\"[^>]*?\\\\>[^<]*?\\\\<\\\\/TextEquiv\\\\>\", \"\");\n            try (FileWriter fileWriter = new FileWriter(pageXML)) {\n                fileWriter.write(pageXMLContent);\n                fileWriter.flush();\n                fileWriter.close();\n            }\n        }\n    }\n\n    public void createSkippedSegments() throws IOException {\n        for (String pageId : processState.keySet()) {\n            for (String segmentId : processState.get(pageId).keySet()) {\n                for (String lineSegmentId : processState.get(pageId).get(segmentId).keySet()) {\n                    if (processState.get(pageId).get(segmentId).get(lineSegmentId))\n                        continue;\n\n                    FileUtils.writeStringToFile(new File((((((projConf.PAGE_DIR + pageId) + File.separator) + segmentId) + File.separator) + lineSegmentId) + projConf.REC_EXT), \"\", \"UTF8\");\n                }\n            }\n        }\n    }\n\n    public boolean doOldFilesExist(String[] pageIds) {\n        for (String pageId : pageIds) {\n            if (procStateCol.recognitionState(pageId))\n                return true;\n\n        }\n        return false;\n    }\n\n    public static TreeMap<String, String> listModels() throws IOException {\n        TreeMap<String, String> models = new TreeMap<String, String>();\n        File modelsDir = new File(ProjectConfiguration.PROJ_MODEL_DIR);\n        if (!modelsDir.exists())\n            return models;\n\n        Files.walk(Paths.get(ProjectConfiguration.PROJ_MODEL_DIR), FileVisitOption.FOLLOW_LINKS).map(Path::toFile).filter(fileEntry -> fileEntry.getName().endsWith(ProjectConfiguration.MODEL_EXT)).forEach(fileEntry -> {\n            String modelName = fileEntry.getAbsolutePath();\n            modelName = modelName.replace(ProjectConfiguration.PROJ_MODEL_DEFAULT_DIR, \"\");\n            modelName = modelName.replace(ProjectConfiguration.PROJ_MODEL_CUSTOM_DIR, \"\");\n            modelName = modelName.replace(ProjectConfiguration.MODEL_EXT, \"\");\n            models.put(modelName, fileEntry.getAbsolutePath());\n        });\n        return models;\n    }\n\n    public int getConflictType(List<String> currentProcesses, boolean inProcessFlow) {\n        return ProcessConflictDetector.recognitionConflict(currentProcesses, inProcessFlow);\n    }\n}\n",
    "project": "OCR4all",
    "libraryName": "jackson-databind",
    "libraryGroupID": "com.fasterxml.jackson.core",
    "newVersion": "2.13.4.1",
    "previousVersion": "2.10.0",
    "breakingCommit": "bd3ce213e2771c6ef7817c80818807a757d4e94a"
}