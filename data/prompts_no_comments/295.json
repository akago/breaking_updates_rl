{
    "absolute_path_to_file_in_container": "/smooks/core/src/main/java/org/smooks/engine/delivery/sax/ng/org/apache/xerces/dom/ElementImpl.java",
    "errors": [
        {
            "line_number": 30,
            "message": "[ERROR] /smooks/core/src/main/java/org/smooks/engine/delivery/sax/ng/org/apache/xerces/dom/ElementImpl.java:[30,19] cannot find symbol",
            "additional_info": "  symbol:   class ElementTraversal\n  location: package org.w3c.dom",
            "file_name": "ElementImpl.java",
            "uid": "57870184-1eae-5d9d-9ed6-095c47601c45"
        },
        {
            "line_number": 67,
            "message": "[ERROR] /smooks/core/src/main/java/org/smooks/engine/delivery/sax/ng/org/apache/xerces/dom/ElementImpl.java:[67,25] cannot find symbol",
            "additional_info": "  symbol: class ElementTraversal",
            "file_name": "ElementImpl.java",
            "uid": "649f8acc-a3e8-540a-8c4e-dbba69d1fd95"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: xml-apis 1.4.01->2.0.0\n\nthe following client code fails: \n'''java\npackage org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom;\nimport CoreDocumentImpl;\nimport DOMMessageFormatter;\nimport DeepNodeListImpl;\nimport DocumentTypeImpl;\nimport ElementDefinitionImpl;\nimport NamedNodeMapImpl;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.ElementTraversal;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.Text;\nimport org.w3c.dom.TypeInfo;\nimport ownerDocument;\nimport org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom.AttrImpl;\nimport org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom.AttrNSImpl;\nimport org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom.ChildNode;\nimport org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom.NodeImpl;\nimport org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom.ParentNode;\nimport org.smooks.engine.delivery.sax.ng.org.apache.xerces.util.URI;\npublic class ElementImpl extends ParentNode implements Element , ElementTraversal , TypeInfo {\n    static final long serialVersionUID = 3717253516652722278L;\n\n    protected String name;\n\n    protected AttributeMap attributes;\n\n    public ElementImpl(CoreDocumentImpl ownerDoc, String name) {\n        super(ownerDoc);\n        this.name = name;\n        needsSyncData(true);\n    }\n\n    protected ElementImpl() {\n    }\n\n    void rename(String name) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (ownerDocument.errorChecking) {\n            int colon1 = name.indexOf(':');\n            if (colon1 != (-1)) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NAMESPACE_ERR\", null);\n                throw new DOMException(DOMException.NAMESPACE_ERR, msg);\n            }\n            if (!CoreDocumentImpl.isXMLName(name, ownerDocument.isXML11Version())) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"INVALID_CHARACTER_ERR\", null);\n                throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);\n            }\n        }\n        this.name = name;\n        reconcileDefaultAttributes();\n    }\n\n    public short getNodeType() {\n        return Node.ELEMENT_NODE;\n    }\n\n    public String getNodeName() {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        return name;\n    }\n\n    public NamedNodeMap getAttributes() {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            attributes = new AttributeMap(this, null);\n        }\n        return attributes;\n    }\n\n    public Node cloneNode(boolean deep) {\n        ElementImpl newnode = ((ElementImpl) (super.cloneNode(deep)));\n        if (attributes != null) {\n            newnode.attributes = ((AttributeMap) (attributes.cloneMap(newnode)));\n        }\n        return newnode;\n    }\n\n    public String getBaseURI() {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes != null) {\n            final Attr attrNode = getXMLBaseAttribute();\n            if (attrNode != null) {\n                final String uri = attrNode.getNodeValue();\n                if (uri.length() != 0) {\n                    try {\n                        URI _uri = new URI(uri, true);\n                        if (_uri.isAbsoluteURI()) {\n                            return _uri.toString();\n                        }\n                        String parentBaseURI = (this.ownerNode != null) ? this.ownerNode.getBaseURI() : null;\n                        if (parentBaseURI != null) {\n                            try {\n                                URI _parentBaseURI = new URI(parentBaseURI);\n                                _uri.absolutize(_parentBaseURI);\n                                return _uri.toString();\n                            } catch (URI.MalformedURIException ex) {\n                                return null;\n                            }\n                        }\n                        return null;\n                    } catch (URI.MalformedURIException ex) {\n                        return null;\n                    }\n                }\n            }\n        }\n        return this.ownerNode != null ? this.ownerNode.getBaseURI() : null;\n    }\n\n    protected Attr getXMLBaseAttribute() {\n        return ((Attr) (attributes.getNamedItem(\"xml:base\")));\n    }\n\n    protected void setOwnerDocument(CoreDocumentImpl doc) {\n        super.setOwnerDocument(doc);\n        if (attributes != null) {\n            attributes.setOwnerDocument(doc);\n        }\n    }\n\n    public String getAttribute(String name) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return \"\";\n        }\n        Attr attr = ((Attr) (attributes.getNamedItem(name)));\n        return attr == null ? \"\" : attr.getValue();\n    }\n\n    public Attr getAttributeNode(String name) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return null;\n        }\n        return ((Attr) (attributes.getNamedItem(name)));\n    }\n\n    public NodeList getElementsByTagName(String tagname) {\n        return new DeepNodeListImpl(this, tagname);\n    }\n\n    public String getTagName() {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        return name;\n    }\n\n    public void normalize() {\n        if (isNormalized()) {\n            return;\n        }\n        if (needsSyncChildren()) {\n            synchronizeChildren();\n        }\n        ChildNode kid;\n        ChildNode next;\n        for (kid = firstChild; kid != null; kid = next) {\n            next = kid.nextSibling;\n            if (kid.getNodeType() == Node.TEXT_NODE) {\n                if ((next != null) && (next.getNodeType() == Node.TEXT_NODE)) {\n                    ((Text) (kid)).appendData(next.getNodeValue());\n                    removeChild(next);\n                    next = kid;\n                } else if ((kid.getNodeValue() == null) || (kid.getNodeValue().length() == 0)) {\n                    removeChild(kid);\n                }\n            } else if (kid.getNodeType() == Node.ELEMENT_NODE) {\n                kid.normalize();\n            }\n        }\n        if (attributes != null) {\n            for (int i = 0; i < attributes.getLength(); ++i) {\n                Node attr = attributes.item(i);\n                attr.normalize();\n            }\n        }\n        isNormalized(true);\n    }\n\n    public void removeAttribute(String name) {\n        if (ownerDocument.errorChecking && isReadOnly()) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n        }\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return;\n        }\n        attributes.safeRemoveNamedItem(name);\n    }\n\n    public Attr removeAttributeNode(Attr oldAttr) throws DOMException {\n        if (ownerDocument.errorChecking && isReadOnly()) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n        }\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NOT_FOUND_ERR\", null);\n            throw new DOMException(DOMException.NOT_FOUND_ERR, msg);\n        }\n        return ((Attr) (attributes.removeItem(oldAttr, true)));\n    }\n\n    public void setAttribute(String name, String value) {\n        if (ownerDocument.errorChecking && isReadOnly()) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n        }\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        Attr newAttr = getAttributeNode(name);\n        if (newAttr == null) {\n            newAttr = getOwnerDocument().createAttribute(name);\n            if (attributes == null) {\n                attributes = new AttributeMap(this, null);\n            }\n            newAttr.setNodeValue(value);\n            attributes.setNamedItem(newAttr);\n        } else {\n            newAttr.setNodeValue(value);\n        }\n    }\n\n    public Attr setAttributeNode(Attr newAttr) throws DOMException {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (ownerDocument.errorChecking) {\n            if (isReadOnly()) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n            }\n            if (newAttr.getOwnerDocument() != ownerDocument) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"WRONG_DOCUMENT_ERR\", null);\n                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);\n            }\n        }\n        if (attributes == null) {\n            attributes = new AttributeMap(this, null);\n        }\n        return ((Attr) (attributes.setNamedItem(newAttr)));\n    }\n\n    public String getAttributeNS(String namespaceURI, String localName) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return \"\";\n        }\n        Attr attr = ((Attr) (attributes.getNamedItemNS(namespaceURI, localName)));\n        return attr == null ? \"\" : attr.getValue();\n    }\n\n    public void setAttributeNS(String namespaceURI, String qualifiedName, String value) {\n        if (ownerDocument.errorChecking && isReadOnly()) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n        }\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        int index = qualifiedName.indexOf(':');\n        String prefix;\n        String localName;\n        if (index < 0) {\n            prefix = null;\n            localName = qualifiedName;\n        } else {\n            prefix = qualifiedName.substring(0, index);\n            localName = qualifiedName.substring(index + 1);\n        }\n        Attr newAttr = getAttributeNodeNS(namespaceURI, localName);\n        if (newAttr == null) {\n            newAttr = getOwnerDocument().createAttributeNS(namespaceURI, qualifiedName);\n            if (attributes == null) {\n                attributes = new AttributeMap(this, null);\n            }\n            newAttr.setNodeValue(value);\n            attributes.setNamedItemNS(newAttr);\n        } else {\n            if (newAttr instanceof AttrNSImpl) {\n                ((AttrNSImpl) (newAttr)).name = (prefix != null) ? (prefix + \":\") + localName : localName;\n            } else {\n                newAttr = ((CoreDocumentImpl) (getOwnerDocument())).createAttributeNS(namespaceURI, qualifiedName, localName);\n                attributes.setNamedItemNS(newAttr);\n            }\n            newAttr.setNodeValue(value);\n        }\n    }\n\n    public void removeAttributeNS(String namespaceURI, String localName) {\n        if (ownerDocument.errorChecking && isReadOnly()) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n        }\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return;\n        }\n        attributes.safeRemoveNamedItemNS(namespaceURI, localName);\n    }\n\n    public Attr getAttributeNodeNS(String namespaceURI, String localName) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return null;\n        }\n        return ((Attr) (attributes.getNamedItemNS(namespaceURI, localName)));\n    }\n\n    public Attr setAttributeNodeNS(Attr newAttr) throws DOMException {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (ownerDocument.errorChecking) {\n            if (isReadOnly()) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n            }\n            if (newAttr.getOwnerDocument() != ownerDocument) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"WRONG_DOCUMENT_ERR\", null);\n                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);\n            }\n        }\n        if (attributes == null) {\n            attributes = new AttributeMap(this, null);\n        }\n        return ((Attr) (attributes.setNamedItemNS(newAttr)));\n    }\n\n    protected int setXercesAttributeNode(Attr attr) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            attributes = new AttributeMap(this, null);\n        }\n        return attributes.addItem(attr);\n    }\n\n    protected int getXercesAttribute(String namespaceURI, String localName) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return -1;\n        }\n        return attributes.getNamedItemIndex(namespaceURI, localName);\n    }\n\n    public boolean hasAttributes() {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        return (attributes != null) && (attributes.getLength() != 0);\n    }\n\n    public boolean hasAttribute(String name) {\n        return getAttributeNode(name) != null;\n    }\n\n    public boolean hasAttributeNS(String namespaceURI, String localName) {\n        return getAttributeNodeNS(namespaceURI, localName) != null;\n    }\n\n    public NodeList getElementsByTagNameNS(String namespaceURI, String localName) {\n        return new DeepNodeListImpl(this, namespaceURI, localName);\n    }\n\n    public boolean isEqualNode(Node arg) {\n        if (!super.isEqualNode(arg)) {\n            return false;\n        }\n        boolean hasAttrs = hasAttributes();\n        if (hasAttrs != ((Element) (arg)).hasAttributes()) {\n            return false;\n        }\n        if (hasAttrs) {\n            NamedNodeMap map1 = getAttributes();\n            NamedNodeMap map2 = ((Element) (arg)).getAttributes();\n            int len = map1.getLength();\n            if (len != map2.getLength()) {\n                return false;\n            }\n            for (int i = 0; i < len; i++) {\n                Node n1 = map1.item(i);\n                if (n1.getLocalName() == null) {\n                    Node n2 = map2.getNamedItem(n1.getNodeName());\n                    if ((n2 == null) || (!((NodeImpl) (n1)).isEqualNode(n2))) {\n                        return false;\n                    }\n                } else {\n                    Node n2 = map2.getNamedItemNS(n1.getNamespaceURI(), n1.getLocalName());\n                    if ((n2 == null) || (!((NodeImpl) (n1)).isEqualNode(n2))) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    public void setIdAttributeNode(Attr at, boolean makeId) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (ownerDocument.errorChecking) {\n            if (isReadOnly()) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n            }\n            if (at.getOwnerElement() != this) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NOT_FOUND_ERR\", null);\n                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);\n            }\n        }\n        ((AttrImpl) (at)).isIdAttribute(makeId);\n        if (!makeId) {\n            ownerDocument.removeIdentifier(at.getValue());\n        } else {\n            ownerDocument.putIdentifier(at.getValue(), this);\n        }\n    }\n\n    public void setIdAttribute(String name, boolean makeId) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        Attr at = getAttributeNode(name);\n        if (at == null) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NOT_FOUND_ERR\", null);\n            throw new DOMException(DOMException.NOT_FOUND_ERR, msg);\n        }\n        if (ownerDocument.errorChecking) {\n            if (isReadOnly()) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n            }\n            if (at.getOwnerElement() != this) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NOT_FOUND_ERR\", null);\n                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);\n            }\n        }\n        ((AttrImpl) (at)).isIdAttribute(makeId);\n        if (!makeId) {\n            ownerDocument.removeIdentifier(at.getValue());\n        } else {\n            ownerDocument.putIdentifier(at.getValue(), this);\n        }\n    }\n\n    public void setIdAttributeNS(String namespaceURI, String localName, boolean makeId) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        Attr at = getAttributeNodeNS(namespaceURI, localName);\n        if (at == null) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NOT_FOUND_ERR\", null);\n            throw new DOMException(DOMException.NOT_FOUND_ERR, msg);\n        }\n        if (ownerDocument.errorChecking) {\n            if (isReadOnly()) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n            }\n            if (at.getOwnerElement() != this) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NOT_FOUND_ERR\", null);\n                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);\n            }\n        }\n        ((AttrImpl) (at)).isIdAttribute(makeId);\n        if (!makeId) {\n            ownerDocument.removeIdentifier(at.getValue());\n        } else {\n            ownerDocument.putIdentifier(at.getValue(), this);\n        }\n    }\n\n    public String getTypeName() {\n        return null;\n    }\n\n    public String getTypeNamespace() {\n        return null;\n    }\n\n    public boolean isDerivedFrom(String typeNamespaceArg, String typeNameArg, int derivationMethod) {\n        return false;\n    }\n\n    public TypeInfo getSchemaTypeInfo() {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        return this;\n    }\n\n    public void setReadOnly(boolean readOnly, boolean deep) {\n        super.setReadOnly(readOnly, deep);\n        if (attributes != null) {\n            attributes.setReadOnly(readOnly, true);\n        }\n    }\n\n    protected void synchronizeData() {\n        needsSyncData(false);\n        boolean orig = ownerDocument.getMutationEvents();\n        ownerDocument.setMutationEvents(false);\n        setupDefaultAttributes();\n        ownerDocument.setMutationEvents(orig);\n    }\n\n    void moveSpecifiedAttributes(ElementImpl el) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (el.hasAttributes()) {\n            if (attributes == null) {\n                attributes = new AttributeMap(this, null);\n            }\n            attributes.moveSpecifiedAttributes(el.attributes);\n        }\n    }\n\n    protected void setupDefaultAttributes() {\n        NamedNodeMapImpl defaults = getDefaultAttributes();\n        if (defaults != null) {\n            attributes = new AttributeMap(this, defaults);\n        }\n    }\n\n    protected void reconcileDefaultAttributes() {\n        if (attributes != null) {\n            NamedNodeMapImpl defaults = getDefaultAttributes();\n            attributes.reconcileDefaults(defaults);\n        }\n    }\n\n    protected org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom.NamedNodeMapImpl getDefaultAttributes() {\n        DocumentTypeImpl doctype = ((DocumentTypeImpl) (ownerDocument.getDoctype()));\n        if (doctype == null) {\n            return null;\n        }\n        ElementDefinitionImpl eldef = ((ElementDefinitionImpl) (doctype.getElements().getNamedItem(getNodeName())));\n        if (eldef == null) {\n            return null;\n        }\n        return ((NamedNodeMapImpl) (eldef.getAttributes()));\n    }\n\n    public final int getChildElementCount() {\n        int count = 0;\n        Element child = getFirstElementChild();\n        while (child != null) {\n            ++count;\n            child = ((ElementImpl) (child)).getNextElementSibling();\n        } \n        return count;\n    }\n\n    public final Element getFirstElementChild() {\n        Node n = getFirstChild();\n        while (n != null) {\n            switch (n.getNodeType()) {\n                case Node.ELEMENT_NODE :\n                    return ((Element) (n));\n                case Node.ENTITY_REFERENCE_NODE :\n                    final Element e = getFirstElementChild(n);\n                    if (e != null) {\n                        return e;\n                    }\n                    break;\n            }\n            n = n.getNextSibling();\n        } \n        return null;\n    }\n\n    public final Element getLastElementChild() {\n        Node n = getLastChild();\n        while (n != null) {\n            switch (n.getNodeType()) {\n                case Node.ELEMENT_NODE :\n                    return ((Element) (n));\n                case Node.ENTITY_REFERENCE_NODE :\n                    final Element e = getLastElementChild(n);\n                    if (e != null) {\n                        return e;\n                    }\n                    break;\n            }\n            n = n.getPreviousSibling();\n        } \n        return null;\n    }\n\n    public final Element getNextElementSibling() {\n        Node n = getNextLogicalSibling(this);\n        while (n != null) {\n            switch (n.getNodeType()) {\n                case Node.ELEMENT_NODE :\n                    return ((Element) (n));\n                case Node.ENTITY_REFERENCE_NODE :\n                    final Element e = getFirstElementChild(n);\n                    if (e != null) {\n                        return e;\n                    }\n                    break;\n            }\n            n = getNextLogicalSibling(n);\n        } \n        return null;\n    }\n\n    public final Element getPreviousElementSibling() {\n        Node n = getPreviousLogicalSibling(this);\n        while (n != null) {\n            switch (n.getNodeType()) {\n                case Node.ELEMENT_NODE :\n                    return ((Element) (n));\n                case Node.ENTITY_REFERENCE_NODE :\n                    final Element e = getLastElementChild(n);\n                    if (e != null) {\n                        return e;\n                    }\n                    break;\n            }\n            n = getPreviousLogicalSibling(n);\n        } \n        return null;\n    }\n\n    private Element getFirstElementChild(Node n) {\n        final Node top = n;\n        while (n != null) {\n            if (n.getNodeType() == Node.ELEMENT_NODE) {\n                return ((Element) (n));\n            }\n            Node next = n.getFirstChild();\n            while (next == null) {\n                if (top == n) {\n                    break;\n                }\n                next = n.getNextSibling();\n                if (next == null) {\n                    n = n.getParentNode();\n                    if ((n == null) || (top == n)) {\n                        return null;\n                    }\n                }\n            } \n            n = next;\n        } \n        return null;\n    }\n\n    private Element getLastElementChild(Node n) {\n        final Node top = n;\n        while (n != null) {\n            if (n.getNodeType() == Node.ELEMENT_NODE) {\n                return ((Element) (n));\n            }\n            Node next = n.getLastChild();\n            while (next == null) {\n                if (top == n) {\n                    break;\n                }\n                next = n.getPreviousSibling();\n                if (next == null) {\n                    n = n.getParentNode();\n                    if ((n == null) || (top == n)) {\n                        return null;\n                    }\n                }\n            } \n            n = next;\n        } \n        return null;\n    }\n\n    private Node getNextLogicalSibling(Node n) {\n        Node next = n.getNextSibling();\n        if (next == null) {\n            Node parent = n.getParentNode();\n            while ((parent != null) && (parent.getNodeType() == Node.ENTITY_REFERENCE_NODE)) {\n                next = parent.getNextSibling();\n                if (next != null) {\n                    break;\n                }\n                parent = parent.getParentNode();\n            } \n        }\n        return next;\n    }\n\n    private Node getPreviousLogicalSibling(Node n) {\n        Node prev = n.getPreviousSibling();\n        if (prev == null) {\n            Node parent = n.getParentNode();\n            while ((parent != null) && (parent.getNodeType() == Node.ENTITY_REFERENCE_NODE)) {\n                prev = parent.getPreviousSibling();\n                if (prev != null) {\n                    break;\n                }\n                parent = parent.getParentNode();\n            } \n        }\n        return prev;\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\nimport org.w3c.dom.ElementTraversal;\n    implements Element, ElementTraversal, TypeInfo {\nwith the following error message:\n[ERROR] /smooks/core/src/main/java/org/smooks/engine/delivery/sax/ng/org/apache/xerces/dom/ElementImpl.java:[30,19] cannot find symbol  symbol:   class ElementTraversal\n  location: package org.w3c.dom\n[ERROR] /smooks/core/src/main/java/org/smooks/engine/delivery/sax/ng/org/apache/xerces/dom/ElementImpl.java:[67,25] cannot find symbol  symbol: class ElementTraversal\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.w3c.dom.ElementTraversal | DELETION | TYPE_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "import org.w3c.dom.ElementTraversal;\n    implements Element, ElementTraversal, TypeInfo {",
    "error_message": "[ERROR] /smooks/core/src/main/java/org/smooks/engine/delivery/sax/ng/org/apache/xerces/dom/ElementImpl.java:[30,19] cannot find symbol  symbol:   class ElementTraversal\n  location: package org.w3c.dom\n[ERROR] /smooks/core/src/main/java/org/smooks/engine/delivery/sax/ng/org/apache/xerces/dom/ElementImpl.java:[67,25] cannot find symbol  symbol: class ElementTraversal",
    "api_diff": "Format: element | nature | kind\norg.w3c.dom.ElementTraversal | DELETION | TYPE_REMOVED",
    "original_code": "package org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom;\nimport CoreDocumentImpl;\nimport DOMMessageFormatter;\nimport DeepNodeListImpl;\nimport DocumentTypeImpl;\nimport ElementDefinitionImpl;\nimport NamedNodeMapImpl;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.ElementTraversal;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.Text;\nimport org.w3c.dom.TypeInfo;\nimport ownerDocument;\nimport org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom.AttrImpl;\nimport org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom.AttrNSImpl;\nimport org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom.ChildNode;\nimport org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom.NodeImpl;\nimport org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom.ParentNode;\nimport org.smooks.engine.delivery.sax.ng.org.apache.xerces.util.URI;\npublic class ElementImpl extends ParentNode implements Element , ElementTraversal , TypeInfo {\n    static final long serialVersionUID = 3717253516652722278L;\n\n    protected String name;\n\n    protected AttributeMap attributes;\n\n    public ElementImpl(CoreDocumentImpl ownerDoc, String name) {\n        super(ownerDoc);\n        this.name = name;\n        needsSyncData(true);\n    }\n\n    protected ElementImpl() {\n    }\n\n    void rename(String name) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (ownerDocument.errorChecking) {\n            int colon1 = name.indexOf(':');\n            if (colon1 != (-1)) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NAMESPACE_ERR\", null);\n                throw new DOMException(DOMException.NAMESPACE_ERR, msg);\n            }\n            if (!CoreDocumentImpl.isXMLName(name, ownerDocument.isXML11Version())) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"INVALID_CHARACTER_ERR\", null);\n                throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);\n            }\n        }\n        this.name = name;\n        reconcileDefaultAttributes();\n    }\n\n    public short getNodeType() {\n        return Node.ELEMENT_NODE;\n    }\n\n    public String getNodeName() {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        return name;\n    }\n\n    public NamedNodeMap getAttributes() {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            attributes = new AttributeMap(this, null);\n        }\n        return attributes;\n    }\n\n    public Node cloneNode(boolean deep) {\n        ElementImpl newnode = ((ElementImpl) (super.cloneNode(deep)));\n        if (attributes != null) {\n            newnode.attributes = ((AttributeMap) (attributes.cloneMap(newnode)));\n        }\n        return newnode;\n    }\n\n    public String getBaseURI() {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes != null) {\n            final Attr attrNode = getXMLBaseAttribute();\n            if (attrNode != null) {\n                final String uri = attrNode.getNodeValue();\n                if (uri.length() != 0) {\n                    try {\n                        URI _uri = new URI(uri, true);\n                        if (_uri.isAbsoluteURI()) {\n                            return _uri.toString();\n                        }\n                        String parentBaseURI = (this.ownerNode != null) ? this.ownerNode.getBaseURI() : null;\n                        if (parentBaseURI != null) {\n                            try {\n                                URI _parentBaseURI = new URI(parentBaseURI);\n                                _uri.absolutize(_parentBaseURI);\n                                return _uri.toString();\n                            } catch (URI.MalformedURIException ex) {\n                                return null;\n                            }\n                        }\n                        return null;\n                    } catch (URI.MalformedURIException ex) {\n                        return null;\n                    }\n                }\n            }\n        }\n        return this.ownerNode != null ? this.ownerNode.getBaseURI() : null;\n    }\n\n    protected Attr getXMLBaseAttribute() {\n        return ((Attr) (attributes.getNamedItem(\"xml:base\")));\n    }\n\n    protected void setOwnerDocument(CoreDocumentImpl doc) {\n        super.setOwnerDocument(doc);\n        if (attributes != null) {\n            attributes.setOwnerDocument(doc);\n        }\n    }\n\n    public String getAttribute(String name) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return \"\";\n        }\n        Attr attr = ((Attr) (attributes.getNamedItem(name)));\n        return attr == null ? \"\" : attr.getValue();\n    }\n\n    public Attr getAttributeNode(String name) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return null;\n        }\n        return ((Attr) (attributes.getNamedItem(name)));\n    }\n\n    public NodeList getElementsByTagName(String tagname) {\n        return new DeepNodeListImpl(this, tagname);\n    }\n\n    public String getTagName() {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        return name;\n    }\n\n    public void normalize() {\n        if (isNormalized()) {\n            return;\n        }\n        if (needsSyncChildren()) {\n            synchronizeChildren();\n        }\n        ChildNode kid;\n        ChildNode next;\n        for (kid = firstChild; kid != null; kid = next) {\n            next = kid.nextSibling;\n            if (kid.getNodeType() == Node.TEXT_NODE) {\n                if ((next != null) && (next.getNodeType() == Node.TEXT_NODE)) {\n                    ((Text) (kid)).appendData(next.getNodeValue());\n                    removeChild(next);\n                    next = kid;\n                } else if ((kid.getNodeValue() == null) || (kid.getNodeValue().length() == 0)) {\n                    removeChild(kid);\n                }\n            } else if (kid.getNodeType() == Node.ELEMENT_NODE) {\n                kid.normalize();\n            }\n        }\n        if (attributes != null) {\n            for (int i = 0; i < attributes.getLength(); ++i) {\n                Node attr = attributes.item(i);\n                attr.normalize();\n            }\n        }\n        isNormalized(true);\n    }\n\n    public void removeAttribute(String name) {\n        if (ownerDocument.errorChecking && isReadOnly()) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n        }\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return;\n        }\n        attributes.safeRemoveNamedItem(name);\n    }\n\n    public Attr removeAttributeNode(Attr oldAttr) throws DOMException {\n        if (ownerDocument.errorChecking && isReadOnly()) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n        }\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NOT_FOUND_ERR\", null);\n            throw new DOMException(DOMException.NOT_FOUND_ERR, msg);\n        }\n        return ((Attr) (attributes.removeItem(oldAttr, true)));\n    }\n\n    public void setAttribute(String name, String value) {\n        if (ownerDocument.errorChecking && isReadOnly()) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n        }\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        Attr newAttr = getAttributeNode(name);\n        if (newAttr == null) {\n            newAttr = getOwnerDocument().createAttribute(name);\n            if (attributes == null) {\n                attributes = new AttributeMap(this, null);\n            }\n            newAttr.setNodeValue(value);\n            attributes.setNamedItem(newAttr);\n        } else {\n            newAttr.setNodeValue(value);\n        }\n    }\n\n    public Attr setAttributeNode(Attr newAttr) throws DOMException {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (ownerDocument.errorChecking) {\n            if (isReadOnly()) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n            }\n            if (newAttr.getOwnerDocument() != ownerDocument) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"WRONG_DOCUMENT_ERR\", null);\n                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);\n            }\n        }\n        if (attributes == null) {\n            attributes = new AttributeMap(this, null);\n        }\n        return ((Attr) (attributes.setNamedItem(newAttr)));\n    }\n\n    public String getAttributeNS(String namespaceURI, String localName) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return \"\";\n        }\n        Attr attr = ((Attr) (attributes.getNamedItemNS(namespaceURI, localName)));\n        return attr == null ? \"\" : attr.getValue();\n    }\n\n    public void setAttributeNS(String namespaceURI, String qualifiedName, String value) {\n        if (ownerDocument.errorChecking && isReadOnly()) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n        }\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        int index = qualifiedName.indexOf(':');\n        String prefix;\n        String localName;\n        if (index < 0) {\n            prefix = null;\n            localName = qualifiedName;\n        } else {\n            prefix = qualifiedName.substring(0, index);\n            localName = qualifiedName.substring(index + 1);\n        }\n        Attr newAttr = getAttributeNodeNS(namespaceURI, localName);\n        if (newAttr == null) {\n            newAttr = getOwnerDocument().createAttributeNS(namespaceURI, qualifiedName);\n            if (attributes == null) {\n                attributes = new AttributeMap(this, null);\n            }\n            newAttr.setNodeValue(value);\n            attributes.setNamedItemNS(newAttr);\n        } else {\n            if (newAttr instanceof AttrNSImpl) {\n                ((AttrNSImpl) (newAttr)).name = (prefix != null) ? (prefix + \":\") + localName : localName;\n            } else {\n                newAttr = ((CoreDocumentImpl) (getOwnerDocument())).createAttributeNS(namespaceURI, qualifiedName, localName);\n                attributes.setNamedItemNS(newAttr);\n            }\n            newAttr.setNodeValue(value);\n        }\n    }\n\n    public void removeAttributeNS(String namespaceURI, String localName) {\n        if (ownerDocument.errorChecking && isReadOnly()) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n        }\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return;\n        }\n        attributes.safeRemoveNamedItemNS(namespaceURI, localName);\n    }\n\n    public Attr getAttributeNodeNS(String namespaceURI, String localName) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return null;\n        }\n        return ((Attr) (attributes.getNamedItemNS(namespaceURI, localName)));\n    }\n\n    public Attr setAttributeNodeNS(Attr newAttr) throws DOMException {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (ownerDocument.errorChecking) {\n            if (isReadOnly()) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n            }\n            if (newAttr.getOwnerDocument() != ownerDocument) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"WRONG_DOCUMENT_ERR\", null);\n                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);\n            }\n        }\n        if (attributes == null) {\n            attributes = new AttributeMap(this, null);\n        }\n        return ((Attr) (attributes.setNamedItemNS(newAttr)));\n    }\n\n    protected int setXercesAttributeNode(Attr attr) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            attributes = new AttributeMap(this, null);\n        }\n        return attributes.addItem(attr);\n    }\n\n    protected int getXercesAttribute(String namespaceURI, String localName) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (attributes == null) {\n            return -1;\n        }\n        return attributes.getNamedItemIndex(namespaceURI, localName);\n    }\n\n    public boolean hasAttributes() {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        return (attributes != null) && (attributes.getLength() != 0);\n    }\n\n    public boolean hasAttribute(String name) {\n        return getAttributeNode(name) != null;\n    }\n\n    public boolean hasAttributeNS(String namespaceURI, String localName) {\n        return getAttributeNodeNS(namespaceURI, localName) != null;\n    }\n\n    public NodeList getElementsByTagNameNS(String namespaceURI, String localName) {\n        return new DeepNodeListImpl(this, namespaceURI, localName);\n    }\n\n    public boolean isEqualNode(Node arg) {\n        if (!super.isEqualNode(arg)) {\n            return false;\n        }\n        boolean hasAttrs = hasAttributes();\n        if (hasAttrs != ((Element) (arg)).hasAttributes()) {\n            return false;\n        }\n        if (hasAttrs) {\n            NamedNodeMap map1 = getAttributes();\n            NamedNodeMap map2 = ((Element) (arg)).getAttributes();\n            int len = map1.getLength();\n            if (len != map2.getLength()) {\n                return false;\n            }\n            for (int i = 0; i < len; i++) {\n                Node n1 = map1.item(i);\n                if (n1.getLocalName() == null) {\n                    Node n2 = map2.getNamedItem(n1.getNodeName());\n                    if ((n2 == null) || (!((NodeImpl) (n1)).isEqualNode(n2))) {\n                        return false;\n                    }\n                } else {\n                    Node n2 = map2.getNamedItemNS(n1.getNamespaceURI(), n1.getLocalName());\n                    if ((n2 == null) || (!((NodeImpl) (n1)).isEqualNode(n2))) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    public void setIdAttributeNode(Attr at, boolean makeId) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (ownerDocument.errorChecking) {\n            if (isReadOnly()) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n            }\n            if (at.getOwnerElement() != this) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NOT_FOUND_ERR\", null);\n                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);\n            }\n        }\n        ((AttrImpl) (at)).isIdAttribute(makeId);\n        if (!makeId) {\n            ownerDocument.removeIdentifier(at.getValue());\n        } else {\n            ownerDocument.putIdentifier(at.getValue(), this);\n        }\n    }\n\n    public void setIdAttribute(String name, boolean makeId) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        Attr at = getAttributeNode(name);\n        if (at == null) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NOT_FOUND_ERR\", null);\n            throw new DOMException(DOMException.NOT_FOUND_ERR, msg);\n        }\n        if (ownerDocument.errorChecking) {\n            if (isReadOnly()) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n            }\n            if (at.getOwnerElement() != this) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NOT_FOUND_ERR\", null);\n                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);\n            }\n        }\n        ((AttrImpl) (at)).isIdAttribute(makeId);\n        if (!makeId) {\n            ownerDocument.removeIdentifier(at.getValue());\n        } else {\n            ownerDocument.putIdentifier(at.getValue(), this);\n        }\n    }\n\n    public void setIdAttributeNS(String namespaceURI, String localName, boolean makeId) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        Attr at = getAttributeNodeNS(namespaceURI, localName);\n        if (at == null) {\n            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NOT_FOUND_ERR\", null);\n            throw new DOMException(DOMException.NOT_FOUND_ERR, msg);\n        }\n        if (ownerDocument.errorChecking) {\n            if (isReadOnly()) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NO_MODIFICATION_ALLOWED_ERR\", null);\n                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);\n            }\n            if (at.getOwnerElement() != this) {\n                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, \"NOT_FOUND_ERR\", null);\n                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);\n            }\n        }\n        ((AttrImpl) (at)).isIdAttribute(makeId);\n        if (!makeId) {\n            ownerDocument.removeIdentifier(at.getValue());\n        } else {\n            ownerDocument.putIdentifier(at.getValue(), this);\n        }\n    }\n\n    public String getTypeName() {\n        return null;\n    }\n\n    public String getTypeNamespace() {\n        return null;\n    }\n\n    public boolean isDerivedFrom(String typeNamespaceArg, String typeNameArg, int derivationMethod) {\n        return false;\n    }\n\n    public TypeInfo getSchemaTypeInfo() {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        return this;\n    }\n\n    public void setReadOnly(boolean readOnly, boolean deep) {\n        super.setReadOnly(readOnly, deep);\n        if (attributes != null) {\n            attributes.setReadOnly(readOnly, true);\n        }\n    }\n\n    protected void synchronizeData() {\n        needsSyncData(false);\n        boolean orig = ownerDocument.getMutationEvents();\n        ownerDocument.setMutationEvents(false);\n        setupDefaultAttributes();\n        ownerDocument.setMutationEvents(orig);\n    }\n\n    void moveSpecifiedAttributes(ElementImpl el) {\n        if (needsSyncData()) {\n            synchronizeData();\n        }\n        if (el.hasAttributes()) {\n            if (attributes == null) {\n                attributes = new AttributeMap(this, null);\n            }\n            attributes.moveSpecifiedAttributes(el.attributes);\n        }\n    }\n\n    protected void setupDefaultAttributes() {\n        NamedNodeMapImpl defaults = getDefaultAttributes();\n        if (defaults != null) {\n            attributes = new AttributeMap(this, defaults);\n        }\n    }\n\n    protected void reconcileDefaultAttributes() {\n        if (attributes != null) {\n            NamedNodeMapImpl defaults = getDefaultAttributes();\n            attributes.reconcileDefaults(defaults);\n        }\n    }\n\n    protected org.smooks.engine.delivery.sax.ng.org.apache.xerces.dom.NamedNodeMapImpl getDefaultAttributes() {\n        DocumentTypeImpl doctype = ((DocumentTypeImpl) (ownerDocument.getDoctype()));\n        if (doctype == null) {\n            return null;\n        }\n        ElementDefinitionImpl eldef = ((ElementDefinitionImpl) (doctype.getElements().getNamedItem(getNodeName())));\n        if (eldef == null) {\n            return null;\n        }\n        return ((NamedNodeMapImpl) (eldef.getAttributes()));\n    }\n\n    public final int getChildElementCount() {\n        int count = 0;\n        Element child = getFirstElementChild();\n        while (child != null) {\n            ++count;\n            child = ((ElementImpl) (child)).getNextElementSibling();\n        } \n        return count;\n    }\n\n    public final Element getFirstElementChild() {\n        Node n = getFirstChild();\n        while (n != null) {\n            switch (n.getNodeType()) {\n                case Node.ELEMENT_NODE :\n                    return ((Element) (n));\n                case Node.ENTITY_REFERENCE_NODE :\n                    final Element e = getFirstElementChild(n);\n                    if (e != null) {\n                        return e;\n                    }\n                    break;\n            }\n            n = n.getNextSibling();\n        } \n        return null;\n    }\n\n    public final Element getLastElementChild() {\n        Node n = getLastChild();\n        while (n != null) {\n            switch (n.getNodeType()) {\n                case Node.ELEMENT_NODE :\n                    return ((Element) (n));\n                case Node.ENTITY_REFERENCE_NODE :\n                    final Element e = getLastElementChild(n);\n                    if (e != null) {\n                        return e;\n                    }\n                    break;\n            }\n            n = n.getPreviousSibling();\n        } \n        return null;\n    }\n\n    public final Element getNextElementSibling() {\n        Node n = getNextLogicalSibling(this);\n        while (n != null) {\n            switch (n.getNodeType()) {\n                case Node.ELEMENT_NODE :\n                    return ((Element) (n));\n                case Node.ENTITY_REFERENCE_NODE :\n                    final Element e = getFirstElementChild(n);\n                    if (e != null) {\n                        return e;\n                    }\n                    break;\n            }\n            n = getNextLogicalSibling(n);\n        } \n        return null;\n    }\n\n    public final Element getPreviousElementSibling() {\n        Node n = getPreviousLogicalSibling(this);\n        while (n != null) {\n            switch (n.getNodeType()) {\n                case Node.ELEMENT_NODE :\n                    return ((Element) (n));\n                case Node.ENTITY_REFERENCE_NODE :\n                    final Element e = getLastElementChild(n);\n                    if (e != null) {\n                        return e;\n                    }\n                    break;\n            }\n            n = getPreviousLogicalSibling(n);\n        } \n        return null;\n    }\n\n    private Element getFirstElementChild(Node n) {\n        final Node top = n;\n        while (n != null) {\n            if (n.getNodeType() == Node.ELEMENT_NODE) {\n                return ((Element) (n));\n            }\n            Node next = n.getFirstChild();\n            while (next == null) {\n                if (top == n) {\n                    break;\n                }\n                next = n.getNextSibling();\n                if (next == null) {\n                    n = n.getParentNode();\n                    if ((n == null) || (top == n)) {\n                        return null;\n                    }\n                }\n            } \n            n = next;\n        } \n        return null;\n    }\n\n    private Element getLastElementChild(Node n) {\n        final Node top = n;\n        while (n != null) {\n            if (n.getNodeType() == Node.ELEMENT_NODE) {\n                return ((Element) (n));\n            }\n            Node next = n.getLastChild();\n            while (next == null) {\n                if (top == n) {\n                    break;\n                }\n                next = n.getPreviousSibling();\n                if (next == null) {\n                    n = n.getParentNode();\n                    if ((n == null) || (top == n)) {\n                        return null;\n                    }\n                }\n            } \n            n = next;\n        } \n        return null;\n    }\n\n    private Node getNextLogicalSibling(Node n) {\n        Node next = n.getNextSibling();\n        if (next == null) {\n            Node parent = n.getParentNode();\n            while ((parent != null) && (parent.getNodeType() == Node.ENTITY_REFERENCE_NODE)) {\n                next = parent.getNextSibling();\n                if (next != null) {\n                    break;\n                }\n                parent = parent.getParentNode();\n            } \n        }\n        return next;\n    }\n\n    private Node getPreviousLogicalSibling(Node n) {\n        Node prev = n.getPreviousSibling();\n        if (prev == null) {\n            Node parent = n.getParentNode();\n            while ((parent != null) && (parent.getNodeType() == Node.ENTITY_REFERENCE_NODE)) {\n                prev = parent.getPreviousSibling();\n                if (prev != null) {\n                    break;\n                }\n                parent = parent.getParentNode();\n            } \n        }\n        return prev;\n    }\n}\n",
    "project": "smooks",
    "libraryName": "xml-apis",
    "libraryGroupID": "xml-apis",
    "newVersion": "2.0.0",
    "previousVersion": "1.4.01",
    "breakingCommit": "6f067d9679caa4a8b2086f1e2b4d177ab19cb3b3"
}