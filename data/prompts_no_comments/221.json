{
    "absolute_path_to_file_in_container": "/nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java",
    "errors": [
        {
            "line_number": 108,
            "message": "[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[108,57] constructor Flyway in class org.flywaydb.core.Flyway cannot be applied to given types;",
            "additional_info": "  required: org.flywaydb.core.api.configuration.Configuration\n  found: no arguments\n  reason: actual and formal argument lists differ in length",
            "file_name": "NisAppConfig.java",
            "uid": "f6fd2d7c-07bd-53d8-83d6-a73a9663a9f1"
        },
        {
            "line_number": 109,
            "message": "[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[109,23] cannot find symbol",
            "additional_info": "  symbol:   method setDataSource(javax.sql.DataSource)\n  location: variable flyway of type org.flywaydb.core.Flyway",
            "file_name": "NisAppConfig.java",
            "uid": "f8905bd9-433a-558c-b3bb-3b7693625500"
        },
        {
            "line_number": 110,
            "message": "[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[110,23] cannot find symbol",
            "additional_info": "  symbol:   method setClassLoader(java.lang.ClassLoader)\n  location: variable flyway of type org.flywaydb.core.Flyway",
            "file_name": "NisAppConfig.java",
            "uid": "b108c696-ce84-5e64-9a74-bf7ec6dd134f"
        },
        {
            "line_number": 111,
            "message": "[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[111,23] cannot find symbol",
            "additional_info": "  symbol:   method setLocations(java.lang.String)\n  location: variable flyway of type org.flywaydb.core.Flyway",
            "file_name": "NisAppConfig.java",
            "uid": "022b88f1-1e80-5d26-9917-af12ed6dacdb"
        },
        {
            "line_number": 112,
            "message": "[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[112,23] cannot find symbol",
            "additional_info": "  symbol:   method setValidateOnMigrate(java.lang.Boolean)\n  location: variable flyway of type org.flywaydb.core.Flyway",
            "file_name": "NisAppConfig.java",
            "uid": "624367a7-dc8a-5f18-b4f6-295840a609ec"
        }
    ],
    "prompt": "Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation. \nYou are specialized in breaking dependency updates, in which the failure is caused by an external dependency. \nTo solve the failure you can only work on the client code.\n\nAPI upgrade: flyway-core 3.2.1->9.17.0\n\nthe following client code fails: \n'''java\npackage org.nem.specific.deploy.appconfig;\nimport AccountDaoLookupAdapter;\nimport Address;\nimport AlwaysVestedBalances;\nimport BlockChainConfiguration;\nimport BlockChainFeature;\nimport BlockChainFeatureDependentFactory;\nimport BlockGenerator;\nimport BlockHeight;\nimport BlockScorer;\nimport CachedTrustProvider;\nimport CommonStarter;\nimport ComponentScan.Filter;\nimport CountingBlockSynchronizer;\nimport DefaultAccountCache;\nimport DefaultAccountStateCache;\nimport DefaultChainServices;\nimport DefaultHashCache;\nimport DefaultMapperFactory;\nimport DefaultMosaicIdCache;\nimport DefaultNamespaceCache;\nimport DefaultNewBlockTransactionsProvider;\nimport DefaultNisCache;\nimport DefaultNodeCompatibilityChecker;\nimport DefaultPoxFacade;\nimport DefaultTransactionFeeCalculator;\nimport DefaultUnconfirmedTransactions;\nimport EigenTrustPlusPlus;\nimport FilterType;\nimport ForkConfiguration;\nimport HarvestAwareNetworkHostBootstrapper;\nimport HarvestingTask;\nimport LowComTrustProvider;\nimport NamespaceCacheLookupAdapters;\nimport NemGlobals;\nimport NemNamespaceEntry;\nimport NemStateGlobals;\nimport NetworkInfos;\nimport NewBlockTransactionsProvider;\nimport NisCacheUtils;\nimport NisConfiguration;\nimport NisConfigurationPolicy;\nimport ObserverOption;\nimport PeerNetworkScheduler;\nimport PoiImportanceCalculator;\nimport PoiOptionsBuilder;\nimport PoiScorer;\nimport SessionFactoryLoader;\nimport SynchronizedMosaicIdCache;\nimport SynchronizedUnconfirmedTransactions;\nimport TimeBasedVestingWeightedBalances;\nimport UnconfirmedStateFactory;\nimport WeightedBalances;\nimport ZeroTransactionFeeCalculator;\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.function.*;\nimport javax.sql.DataSource;\nimport org.nem.nis.pox.poi.PoiOptions;\nimport org.springframework.stereotype.Controller;\nimport org.flywaydb.core.Flyway;\nimport org.hibernate.SessionFactory;\nimport org.nem.core.model.*;\nimport org.nem.core.model.primitive.*;\nimport org.nem.core.node.NodeFeature;\nimport org.nem.core.time.TimeProvider;\nimport org.nem.deploy.*;\nimport org.nem.nis.*;\nimport org.nem.nis.audit.AuditCollection;\nimport org.nem.nis.boot.*;\nimport org.nem.nis.cache.*;\nimport org.nem.nis.connect.*;\nimport org.nem.nis.controller.interceptors.LocalHostDetector;\nimport org.nem.nis.dao.*;\nimport org.nem.nis.harvesting.*;\nimport org.nem.nis.mappers.*;\nimport org.nem.nis.pox.ImportanceCalculator;\nimport org.nem.nis.pox.poi.*;\nimport org.nem.nis.pox.pos.PosImportanceCalculator;\nimport org.nem.nis.secret.*;\nimport org.nem.nis.service.BlockChainLastBlockLayer;\nimport org.nem.nis.state.*;\nimport org.nem.nis.sync.*;\nimport org.nem.nis.validators.*;\nimport org.nem.peer.connect.CommunicationMode;\nimport org.nem.peer.node.*;\nimport org.nem.peer.services.ChainServices;\nimport org.nem.peer.trust.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.*;\nimport org.springframework.jdbc.datasource.DriverManagerDataSource;\nimport org.springframework.orm.hibernate4.HibernateTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n@Configuration\n@ComponentScan(basePackages = { \"org.nem.nis\" }, excludeFilters = { @Filter(type = FilterType.ANNOTATION, value = Controller.class), @Filter(type = FilterType.REGEX, pattern = { \"org.nem.nis.websocket.*\" }) })\n@EnableTransactionManagement\npublic class NisAppConfig {\n    @Autowired\n    private AccountDao accountDao;\n\n    @Autowired\n    private BlockDao blockDao;\n\n    @Autowired\n    private BlockChainLastBlockLayer blockChainLastBlockLayer;\n\n    @Autowired\n    @SuppressWarnings(\"unused\")\n    private TransferDao transferDao;\n\n    private static final int MAX_AUDIT_HISTORY_SIZE = 50;\n\n    @Bean\n    protected AuditCollection outgoingAudits() {\n        return this.createAuditCollection();\n    }\n\n    @Bean\n    protected AuditCollection incomingAudits() {\n        return this.createAuditCollection();\n    }\n\n    private AuditCollection createAuditCollection() {\n        return new AuditCollection(MAX_AUDIT_HISTORY_SIZE, this.timeProvider());\n    }\n\n    @Bean\n    public DataSource dataSource() throws IOException {\n        final NisConfiguration configuration = this.nisConfiguration();\n        final String nemFolder = configuration.getNemFolder();\n        final Properties prop = new Properties();\n        prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream(\"db.properties\"));\n        final String jdbcUrl = prop.getProperty(\"jdbc.url\").replace(\"${nem.folder}\", nemFolder).replace(\"${nem.network}\", configuration.getNetworkName());\n        final DriverManagerDataSource dataSource = new DriverManagerDataSource();\n        dataSource.setDriverClassName(prop.getProperty(\"jdbc.driverClassName\"));\n        dataSource.setUrl(jdbcUrl);\n        dataSource.setUsername(prop.getProperty(\"jdbc.username\"));\n        dataSource.setPassword(prop.getProperty(\"jdbc.password\"));\n        return dataSource;\n    }\n\n    @Bean(initMethod = \"migrate\")\n    public Flyway flyway() throws IOException {\n        final Properties prop = new Properties();\n        prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream(\"db.properties\"));\n        final Flyway flyway = new Flyway();\n        flyway.setDataSource(this.dataSource());\n        flyway.setClassLoader(NisAppConfig.class.getClassLoader());\n        flyway.setLocations(prop.getProperty(\"flyway.locations\"));\n        flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty(\"flyway.validate\")));\n        return flyway;\n    }\n\n    @Bean\n    @DependsOn(\"flyway\")\n    public SessionFactory sessionFactory() throws IOException {\n        return SessionFactoryLoader.load(this.dataSource());\n    }\n\n    @Bean\n    public BlockChain blockChain() {\n        return new BlockChain(this.blockChainLastBlockLayer, this.blockChainUpdater());\n    }\n\n    @Bean\n    public BlockChainServices blockChainServices() {\n        return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(), this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());\n    }\n\n    @Bean\n    public BlockChainUpdater blockChainUpdater() {\n        return new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(), this.unconfirmedTransactions(), this.nisConfiguration());\n    }\n\n    @Bean\n    public BlockChainContextFactory blockChainContextFactory() {\n        return new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(), this.unconfirmedTransactions());\n    }\n\n    @Bean\n    public MapperFactory mapperFactory() {\n        return new DefaultMapperFactory(this.mosaicIdCache());\n    }\n\n    @Bean\n    public NisMapperFactory nisMapperFactory() {\n        return new NisMapperFactory(this.mapperFactory());\n    }\n\n    @Bean\n    public NisModelToDbModelMapper nisModelToDbModelMapper() {\n        return new NisModelToDbModelMapper(this.mapperFactory().createModelToDbModelMapper(new AccountDaoLookupAdapter(this.accountDao)));\n    }\n\n    @Bean\n    public NisDbModelToModelMapper nisDbModelToModelMapper() {\n        return this.nisMapperFactory().createDbModelToModelNisMapper(this.accountCache());\n    }\n\n    @Bean\n    public BlockTransactionObserverFactory blockTransactionObserverFactory() {\n        final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();\n        final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();\n        return new BlockTransactionObserverFactory(this.observerOptions(), estimatedBlocksPerYear, forkConfiguration);\n    }\n\n    @Bean\n    public BlockValidatorFactory blockValidatorFactory() {\n        return new BlockValidatorFactory(this.timeProvider(), this.nisConfiguration().getForkConfiguration());\n    }\n\n    @Bean\n    public TransactionValidatorFactory transactionValidatorFactory() {\n        return new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(), this.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());\n    }\n\n    @Bean\n    public SingleTransactionValidator transactionValidator() {\n        return this.transactionValidatorFactory().createIncompleteSingleBuilder(this.nisCache()).build();\n    }\n\n    @Bean\n    public Harvester harvester() {\n        final NewBlockTransactionsProvider transactionsProvider = new DefaultNewBlockTransactionsProvider(this.nisCache(), this.transactionValidatorFactory(), this.blockValidatorFactory(), this.blockTransactionObserverFactory(), this.unconfirmedTransactionsFilter(), this.nisConfiguration().getForkConfiguration());\n        final BlockGenerator generator = new BlockGenerator(this.nisCache(), transactionsProvider, this.blockDao, new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));\n        return new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(), generator);\n    }\n\n    @Bean\n    public SynchronizedAccountCache accountCache() {\n        return new SynchronizedAccountCache(new DefaultAccountCache());\n    }\n\n    @Bean\n    public SynchronizedAccountStateCache accountStateCache() {\n        return new SynchronizedAccountStateCache(new DefaultAccountStateCache());\n    }\n\n    @Bean\n    public SynchronizedHashCache transactionHashCache() {\n        return new SynchronizedHashCache(new DefaultHashCache(50000, this.nisConfiguration().getTransactionHashRetentionTime()));\n    }\n\n    @Bean\n    public SynchronizedPoxFacade poxFacade() {\n        return new SynchronizedPoxFacade(new DefaultPoxFacade(this.importanceCalculator()));\n    }\n\n    @Bean\n    public SynchronizedNamespaceCache namespaceCache() {\n        final BlockHeight mosaicRedefinitionForkHeight = this.nisConfiguration().getForkConfiguration().getMosaicRedefinitionForkHeight();\n        NemNamespaceEntry.setDefault(mosaicRedefinitionForkHeight);\n        return new SynchronizedNamespaceCache(new DefaultNamespaceCache(mosaicRedefinitionForkHeight));\n    }\n\n    @Bean\n    public ReadOnlyNisCache nisCache() {\n        return new DefaultNisCache(this.accountCache(), this.accountStateCache(), this.poxFacade(), this.transactionHashCache(), this.namespaceCache());\n    }\n\n    @Bean\n    @SuppressWarnings(\"serial\")\n    public ImportanceCalculator importanceCalculator() {\n        final Map<BlockChainFeature, Supplier<ImportanceCalculator>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<ImportanceCalculator>>() {\n            {\n                this.put(BlockChainFeature.PROOF_OF_IMPORTANCE, () -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));\n                this.put(BlockChainFeature.PROOF_OF_STAKE, PosImportanceCalculator::new);\n            }\n        };\n        return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), \"consensus algorithm\", featureSupplierMap);\n    }\n\n    @Bean\n    public UnlockedAccounts unlockedAccounts() {\n        return new UnlockedAccounts(this.accountCache(), this.accountStateCache(), this.blockChainLastBlockLayer, this.canHarvestPredicate(), this.nisConfiguration().getUnlockedLimit());\n    }\n\n    @Bean\n    public CanHarvestPredicate canHarvestPredicate() {\n        return new CanHarvestPredicate(this::getBlockDependentMinHarvesterBalance);\n    }\n\n    private Amount getBlockDependentMinHarvesterBalance(final BlockHeight height) {\n        return getBlockDependentPoiOptions(height).getMinHarvesterBalance();\n    }\n\n    private static PoiOptions getBlockDependentPoiOptions(final BlockHeight height) {\n        return new PoiOptionsBuilder(height).create();\n    }\n\n    @Bean\n    public Supplier<BlockHeight> lastBlockHeight() {\n        return this.blockChainLastBlockLayer::getLastBlockHeight;\n    }\n\n    @Bean\n    public UnconfirmedTransactions unconfirmedTransactions() {\n        final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();\n        final UnconfirmedStateFactory unconfirmedStateFactory = new UnconfirmedStateFactory(this.transactionValidatorFactory(), this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(), blockChainConfiguration.getMaxTransactionsPerBlock(), this.nisConfiguration().getForkConfiguration());\n        final UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory, this.nisCache());\n        return new SynchronizedUnconfirmedTransactions(unconfirmedTransactions);\n    }\n\n    @Bean\n    public UnconfirmedTransactionsFilter unconfirmedTransactionsFilter() {\n        return this.unconfirmedTransactions().asFilter();\n    }\n\n    @Bean\n    public HibernateTransactionManager transactionManager() throws IOException {\n        return new HibernateTransactionManager(this.sessionFactory());\n    }\n\n    @Bean\n    public NisMain nisMain() {\n        final NisConfiguration nisConfiguration = this.nisConfiguration();\n        NetworkInfos.setDefault(nisConfiguration.getNetworkInfo());\n        final NamespaceCacheLookupAdapters adapters = new NamespaceCacheLookupAdapters(this.namespaceCache());\n        if (nisConfiguration.ignoreFees()) {\n            NemGlobals.setTransactionFeeCalculator(new ZeroTransactionFeeCalculator());\n        } else {\n            NemGlobals.setTransactionFeeCalculator(new DefaultTransactionFeeCalculator(adapters.asMosaicFeeInformationLookup(), () -> this.blockChainLastBlockLayer.getLastBlockHeight().next(), new BlockHeight[]{ nisConfiguration.getForkConfiguration().getFeeFork().getFirstHeight(), nisConfiguration.getForkConfiguration().getFeeFork().getSecondHeight() }));\n        }\n        NemGlobals.setBlockChainConfiguration(nisConfiguration.getBlockChainConfiguration());\n        NemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());\n        return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(), nisConfiguration, this.blockAnalyzer(), System::exit);\n    }\n\n    @SuppressWarnings(\"serial\")\n    private Supplier<WeightedBalances> weighedBalancesSupplier() {\n        final Map<BlockChainFeature, Supplier<Supplier<WeightedBalances>>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<Supplier<WeightedBalances>>>() {\n            {\n                this.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);\n                this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);\n            }\n        };\n        return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), \"weighted balance scheme\", featureSupplierMap);\n    }\n\n    @Bean\n    public BlockAnalyzer blockAnalyzer() {\n        final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();\n        final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();\n        return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(), estimatedBlocksPerYear, forkConfiguration);\n    }\n\n    @Bean\n    public HttpConnectorPool httpConnectorPool() {\n        final CommunicationMode communicationMode = (this.nisConfiguration().useBinaryTransport()) ? CommunicationMode.BINARY : CommunicationMode.JSON;\n        return new HttpConnectorPool(communicationMode, this.outgoingAudits());\n    }\n\n    @Bean\n    public NisPeerNetworkHost nisPeerNetworkHost() {\n        final HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());\n        final PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);\n        final CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());\n        return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(), this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());\n    }\n\n    @Bean\n    public NetworkHostBootstrapper networkHostBootstrapper() {\n        return new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());\n    }\n\n    @Bean\n    public org.nem.specific.deploy.appconfig.NisConfiguration nisConfiguration() {\n        return new NisConfiguration();\n    }\n\n    @Bean\n    public TimeProvider timeProvider() {\n        return CommonStarter.TIME_PROVIDER;\n    }\n\n    @Bean\n    public TrustProvider trustProvider() {\n        final int LOW_COMMUNICATION_NODE_WEIGHT = 30;\n        final int TRUST_CACHE_TIME = 15 * 60;\n        return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME, this.timeProvider());\n    }\n\n    @Bean\n    public NemConfigurationPolicy configurationPolicy() {\n        return new NisConfigurationPolicy();\n    }\n\n    @Bean\n    public ChainServices chainServices() {\n        return new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());\n    }\n\n    @Bean\n    public org.nem.specific.deploy.appconfig.CommonStarter commonStarter() {\n        return CommonStarter.INSTANCE;\n    }\n\n    @Bean\n    public ValidationState validationState() {\n        return NisCacheUtils.createValidationState(this.nisCache());\n    }\n\n    @Bean\n    public LocalHostDetector localHostDetector() {\n        return new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());\n    }\n\n    @Bean\n    public NodeCompatibilityChecker nodeCompatibilityChecker() {\n        return new DefaultNodeCompatibilityChecker();\n    }\n\n    @Bean\n    public EnumSet<ObserverOption> observerOptions() {\n        final EnumSet<ObserverOption> observerOptions = EnumSet.noneOf(org.nem.specific.deploy.appconfig.ObserverOption.class);\n        if (this.nisConfiguration().isFeatureSupported(NodeFeature.HISTORICAL_ACCOUNT_DATA)) {\n            observerOptions.add(ObserverOption.NoHistoricalDataPruning);\n        }\n        final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();\n        if (blockChainConfiguration.isBlockChainFeatureSupported(BlockChainFeature.PROOF_OF_STAKE)) {\n            observerOptions.add(ObserverOption.NoOutlinkObserver);\n        }\n        return observerOptions;\n    }\n\n    @Bean\n    public Function<Address, Collection<Address>> cosignatoryLookup() {\n        return a -> this.accountStateCache().findStateByAddress(a).getMultisigLinks().getCosignatories();\n    }\n\n    @Bean\n    public MosaicIdCache mosaicIdCache() {\n        return new SynchronizedMosaicIdCache(new DefaultMosaicIdCache());\n    }\n}\n\n'''\nthe error is triggered in the following specific lines in the previous code:\n\t\tfinal org.flywaydb.core.Flyway flyway = new Flyway();\n\t\tflyway.setDataSource(this.dataSource());\n\t\tflyway.setClassLoader(NisAppConfig.class.getClassLoader());\n\t\tflyway.setLocations(prop.getProperty(\"flyway.locations\"));\n\t\tflyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty(\"flyway.validate\")));\nwith the following error message:\n[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[108,57] constructor Flyway in class org.flywaydb.core.Flyway cannot be applied to given types;  required: org.flywaydb.core.api.configuration.Configuration\n  found: no arguments\n  reason: actual and formal argument lists differ in length\n[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[109,23] cannot find symbol  symbol:   method setDataSource(javax.sql.DataSource)\n  location: variable flyway of type org.flywaydb.core.Flyway\n[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[110,23] cannot find symbol  symbol:   method setClassLoader(java.lang.ClassLoader)\n  location: variable flyway of type org.flywaydb.core.Flyway\n[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[111,23] cannot find symbol  symbol:   method setLocations(java.lang.String)\n  location: variable flyway of type org.flywaydb.core.Flyway\n[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[112,23] cannot find symbol  symbol:   method setValidateOnMigrate(java.lang.Boolean)\n  location: variable flyway of type org.flywaydb.core.Flyway\nThe error is caused by a change in the API of the dependency. The new library version includes the following changes:\nFormat: element | nature | kind\norg.flywaydb.core.Flyway.setSqlMigrationSeparator | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.isPlaceholderReplacement | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getBaselineVersion | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setEncoding | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getEncoding | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setResolversAsClassNames | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setBaselineVersion | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setSchemas | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getTable | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.isBaselineOnMigrate | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setSqlMigrationSuffix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.init | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.isOutOfOrder | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.command.DbBaseline.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setResolvers | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.info.MigrationInfoServiceImpl.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setCleanOnValidationError | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getLocations | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setBaselineDescription | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.resolver.ResolvedMigrationImpl.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.isValidateOnMigrate | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setInitOnMigrate | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getCallbacks | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getPlaceholderPrefix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setPlaceholders | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setOutOfOrder | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setTarget | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getInitVersion | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getClassLoader | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getPlaceholderSuffix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setLocations | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setTable | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setPlaceholderReplacement | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setPlaceholderPrefix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setTargetAsString | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setInitDescription | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getSqlMigrationSeparator | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.resolver.CompositeMigrationResolver.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.getSqlMigrationSuffix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.migrate | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.flywaydb.core.Flyway.configure | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setInitVersion | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.util.Pair.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.internal.command.DbSchemas.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setPlaceholderSuffix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.isInitOnMigrate | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.info.MigrationInfoImpl.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setCallbacks | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.resolver.sql.SqlMigrationExecutor.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.internal.command.DbRepair.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setCallbacksAsClassNames | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getBaselineDescription | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.command.DbValidate.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setBaselineVersionAsString | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.baseline | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.flywaydb.core.Flyway.setClassLoader | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.repair | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.flywaydb.core.Flyway.getSchemas | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.resolver.sql.SqlMigrationResolver.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setBaselineOnMigrate | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getResolvers | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setIgnoreFailedFutureMigration | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getTarget | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.command.DbMigrate.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.getPlaceholders | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getInitDescription | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getDataSource | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setValidateOnMigrate | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.isIgnoreFailedFutureMigration | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setSqlMigrationPrefix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getSqlMigrationPrefix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.isCleanOnValidationError | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.clean | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.flywaydb.core.Flyway.setDataSource | DELETION | METHOD_REMOVED\n\n- Identify the specific API changes that are causing the failure in the client code. \n- Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists. \n- Determine which parts of the client code need to be updated to accommodate these API changes. \n- Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments). \n- Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API. \n- Consider potential side effects of the proposed changes on other parts of the code. \n- Ensure that the planned changes will result in a complete and compilable class. \n- If applicable, note any additional imports that may be needed due to the API changes.  \n- Propose a patch that can be applied to the code to fix the issue. \n- Return only a complete and compilable class in a fenced code block. \n- You CANNOT change the function signature of any method but may create variables if it simplifies the code. \n- You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version. \n- If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version. \n- Avoid removing any existing code unless it directly causes a compilation or functionality error. \n- Return only the fixed class, ensuring it fully compiles and adheres to these constraints.",
    "buggy_lines": "\t\tfinal org.flywaydb.core.Flyway flyway = new Flyway();\n\t\tflyway.setDataSource(this.dataSource());\n\t\tflyway.setClassLoader(NisAppConfig.class.getClassLoader());\n\t\tflyway.setLocations(prop.getProperty(\"flyway.locations\"));\n\t\tflyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty(\"flyway.validate\")));",
    "error_message": "[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[108,57] constructor Flyway in class org.flywaydb.core.Flyway cannot be applied to given types;  required: org.flywaydb.core.api.configuration.Configuration\n  found: no arguments\n  reason: actual and formal argument lists differ in length\n[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[109,23] cannot find symbol  symbol:   method setDataSource(javax.sql.DataSource)\n  location: variable flyway of type org.flywaydb.core.Flyway\n[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[110,23] cannot find symbol  symbol:   method setClassLoader(java.lang.ClassLoader)\n  location: variable flyway of type org.flywaydb.core.Flyway\n[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[111,23] cannot find symbol  symbol:   method setLocations(java.lang.String)\n  location: variable flyway of type org.flywaydb.core.Flyway\n[ERROR] /nem/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java:[112,23] cannot find symbol  symbol:   method setValidateOnMigrate(java.lang.Boolean)\n  location: variable flyway of type org.flywaydb.core.Flyway",
    "api_diff": "Format: element | nature | kind\norg.flywaydb.core.Flyway.setSqlMigrationSeparator | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.isPlaceholderReplacement | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getBaselineVersion | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setEncoding | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getEncoding | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setResolversAsClassNames | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setBaselineVersion | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setSchemas | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getTable | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.isBaselineOnMigrate | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setSqlMigrationSuffix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.init | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.isOutOfOrder | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.command.DbBaseline.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setResolvers | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.info.MigrationInfoServiceImpl.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setCleanOnValidationError | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getLocations | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setBaselineDescription | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.resolver.ResolvedMigrationImpl.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.isValidateOnMigrate | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setInitOnMigrate | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getCallbacks | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getPlaceholderPrefix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setPlaceholders | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setOutOfOrder | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setTarget | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getInitVersion | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getClassLoader | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getPlaceholderSuffix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setLocations | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setTable | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setPlaceholderReplacement | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setPlaceholderPrefix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setTargetAsString | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setInitDescription | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getSqlMigrationSeparator | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.resolver.CompositeMigrationResolver.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.getSqlMigrationSuffix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.migrate | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.flywaydb.core.Flyway.configure | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setInitVersion | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.util.Pair.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.internal.command.DbSchemas.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setPlaceholderSuffix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.isInitOnMigrate | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.info.MigrationInfoImpl.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setCallbacks | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.resolver.sql.SqlMigrationExecutor.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.internal.command.DbRepair.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setCallbacksAsClassNames | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getBaselineDescription | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.command.DbValidate.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setBaselineVersionAsString | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.baseline | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.flywaydb.core.Flyway.setClassLoader | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.repair | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.flywaydb.core.Flyway.getSchemas | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.resolver.sql.SqlMigrationResolver.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.setBaselineOnMigrate | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getResolvers | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setIgnoreFailedFutureMigration | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getTarget | DELETION | METHOD_REMOVED\norg.flywaydb.core.internal.command.DbMigrate.<init> | DELETION | CONSTRUCTOR_REMOVED\norg.flywaydb.core.Flyway.getPlaceholders | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getInitDescription | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getDataSource | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setValidateOnMigrate | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.isIgnoreFailedFutureMigration | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.setSqlMigrationPrefix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.getSqlMigrationPrefix | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.isCleanOnValidationError | DELETION | METHOD_REMOVED\norg.flywaydb.core.Flyway.clean | MUTATION | METHOD_RETURN_TYPE_CHANGED\norg.flywaydb.core.Flyway.setDataSource | DELETION | METHOD_REMOVED",
    "original_code": "package org.nem.specific.deploy.appconfig;\nimport AccountDaoLookupAdapter;\nimport Address;\nimport AlwaysVestedBalances;\nimport BlockChainConfiguration;\nimport BlockChainFeature;\nimport BlockChainFeatureDependentFactory;\nimport BlockGenerator;\nimport BlockHeight;\nimport BlockScorer;\nimport CachedTrustProvider;\nimport CommonStarter;\nimport ComponentScan.Filter;\nimport CountingBlockSynchronizer;\nimport DefaultAccountCache;\nimport DefaultAccountStateCache;\nimport DefaultChainServices;\nimport DefaultHashCache;\nimport DefaultMapperFactory;\nimport DefaultMosaicIdCache;\nimport DefaultNamespaceCache;\nimport DefaultNewBlockTransactionsProvider;\nimport DefaultNisCache;\nimport DefaultNodeCompatibilityChecker;\nimport DefaultPoxFacade;\nimport DefaultTransactionFeeCalculator;\nimport DefaultUnconfirmedTransactions;\nimport EigenTrustPlusPlus;\nimport FilterType;\nimport ForkConfiguration;\nimport HarvestAwareNetworkHostBootstrapper;\nimport HarvestingTask;\nimport LowComTrustProvider;\nimport NamespaceCacheLookupAdapters;\nimport NemGlobals;\nimport NemNamespaceEntry;\nimport NemStateGlobals;\nimport NetworkInfos;\nimport NewBlockTransactionsProvider;\nimport NisCacheUtils;\nimport NisConfiguration;\nimport NisConfigurationPolicy;\nimport ObserverOption;\nimport PeerNetworkScheduler;\nimport PoiImportanceCalculator;\nimport PoiOptionsBuilder;\nimport PoiScorer;\nimport SessionFactoryLoader;\nimport SynchronizedMosaicIdCache;\nimport SynchronizedUnconfirmedTransactions;\nimport TimeBasedVestingWeightedBalances;\nimport UnconfirmedStateFactory;\nimport WeightedBalances;\nimport ZeroTransactionFeeCalculator;\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.function.*;\nimport javax.sql.DataSource;\nimport org.nem.nis.pox.poi.PoiOptions;\nimport org.springframework.stereotype.Controller;\nimport org.flywaydb.core.Flyway;\nimport org.hibernate.SessionFactory;\nimport org.nem.core.model.*;\nimport org.nem.core.model.primitive.*;\nimport org.nem.core.node.NodeFeature;\nimport org.nem.core.time.TimeProvider;\nimport org.nem.deploy.*;\nimport org.nem.nis.*;\nimport org.nem.nis.audit.AuditCollection;\nimport org.nem.nis.boot.*;\nimport org.nem.nis.cache.*;\nimport org.nem.nis.connect.*;\nimport org.nem.nis.controller.interceptors.LocalHostDetector;\nimport org.nem.nis.dao.*;\nimport org.nem.nis.harvesting.*;\nimport org.nem.nis.mappers.*;\nimport org.nem.nis.pox.ImportanceCalculator;\nimport org.nem.nis.pox.poi.*;\nimport org.nem.nis.pox.pos.PosImportanceCalculator;\nimport org.nem.nis.secret.*;\nimport org.nem.nis.service.BlockChainLastBlockLayer;\nimport org.nem.nis.state.*;\nimport org.nem.nis.sync.*;\nimport org.nem.nis.validators.*;\nimport org.nem.peer.connect.CommunicationMode;\nimport org.nem.peer.node.*;\nimport org.nem.peer.services.ChainServices;\nimport org.nem.peer.trust.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.*;\nimport org.springframework.jdbc.datasource.DriverManagerDataSource;\nimport org.springframework.orm.hibernate4.HibernateTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n@Configuration\n@ComponentScan(basePackages = { \"org.nem.nis\" }, excludeFilters = { @Filter(type = FilterType.ANNOTATION, value = Controller.class), @Filter(type = FilterType.REGEX, pattern = { \"org.nem.nis.websocket.*\" }) })\n@EnableTransactionManagement\npublic class NisAppConfig {\n    @Autowired\n    private AccountDao accountDao;\n\n    @Autowired\n    private BlockDao blockDao;\n\n    @Autowired\n    private BlockChainLastBlockLayer blockChainLastBlockLayer;\n\n    @Autowired\n    @SuppressWarnings(\"unused\")\n    private TransferDao transferDao;\n\n    private static final int MAX_AUDIT_HISTORY_SIZE = 50;\n\n    @Bean\n    protected AuditCollection outgoingAudits() {\n        return this.createAuditCollection();\n    }\n\n    @Bean\n    protected AuditCollection incomingAudits() {\n        return this.createAuditCollection();\n    }\n\n    private AuditCollection createAuditCollection() {\n        return new AuditCollection(MAX_AUDIT_HISTORY_SIZE, this.timeProvider());\n    }\n\n    @Bean\n    public DataSource dataSource() throws IOException {\n        final NisConfiguration configuration = this.nisConfiguration();\n        final String nemFolder = configuration.getNemFolder();\n        final Properties prop = new Properties();\n        prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream(\"db.properties\"));\n        final String jdbcUrl = prop.getProperty(\"jdbc.url\").replace(\"${nem.folder}\", nemFolder).replace(\"${nem.network}\", configuration.getNetworkName());\n        final DriverManagerDataSource dataSource = new DriverManagerDataSource();\n        dataSource.setDriverClassName(prop.getProperty(\"jdbc.driverClassName\"));\n        dataSource.setUrl(jdbcUrl);\n        dataSource.setUsername(prop.getProperty(\"jdbc.username\"));\n        dataSource.setPassword(prop.getProperty(\"jdbc.password\"));\n        return dataSource;\n    }\n\n    @Bean(initMethod = \"migrate\")\n    public Flyway flyway() throws IOException {\n        final Properties prop = new Properties();\n        prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream(\"db.properties\"));\n        final Flyway flyway = new Flyway();\n        flyway.setDataSource(this.dataSource());\n        flyway.setClassLoader(NisAppConfig.class.getClassLoader());\n        flyway.setLocations(prop.getProperty(\"flyway.locations\"));\n        flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty(\"flyway.validate\")));\n        return flyway;\n    }\n\n    @Bean\n    @DependsOn(\"flyway\")\n    public SessionFactory sessionFactory() throws IOException {\n        return SessionFactoryLoader.load(this.dataSource());\n    }\n\n    @Bean\n    public BlockChain blockChain() {\n        return new BlockChain(this.blockChainLastBlockLayer, this.blockChainUpdater());\n    }\n\n    @Bean\n    public BlockChainServices blockChainServices() {\n        return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(), this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());\n    }\n\n    @Bean\n    public BlockChainUpdater blockChainUpdater() {\n        return new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(), this.unconfirmedTransactions(), this.nisConfiguration());\n    }\n\n    @Bean\n    public BlockChainContextFactory blockChainContextFactory() {\n        return new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(), this.unconfirmedTransactions());\n    }\n\n    @Bean\n    public MapperFactory mapperFactory() {\n        return new DefaultMapperFactory(this.mosaicIdCache());\n    }\n\n    @Bean\n    public NisMapperFactory nisMapperFactory() {\n        return new NisMapperFactory(this.mapperFactory());\n    }\n\n    @Bean\n    public NisModelToDbModelMapper nisModelToDbModelMapper() {\n        return new NisModelToDbModelMapper(this.mapperFactory().createModelToDbModelMapper(new AccountDaoLookupAdapter(this.accountDao)));\n    }\n\n    @Bean\n    public NisDbModelToModelMapper nisDbModelToModelMapper() {\n        return this.nisMapperFactory().createDbModelToModelNisMapper(this.accountCache());\n    }\n\n    @Bean\n    public BlockTransactionObserverFactory blockTransactionObserverFactory() {\n        final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();\n        final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();\n        return new BlockTransactionObserverFactory(this.observerOptions(), estimatedBlocksPerYear, forkConfiguration);\n    }\n\n    @Bean\n    public BlockValidatorFactory blockValidatorFactory() {\n        return new BlockValidatorFactory(this.timeProvider(), this.nisConfiguration().getForkConfiguration());\n    }\n\n    @Bean\n    public TransactionValidatorFactory transactionValidatorFactory() {\n        return new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(), this.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());\n    }\n\n    @Bean\n    public SingleTransactionValidator transactionValidator() {\n        return this.transactionValidatorFactory().createIncompleteSingleBuilder(this.nisCache()).build();\n    }\n\n    @Bean\n    public Harvester harvester() {\n        final NewBlockTransactionsProvider transactionsProvider = new DefaultNewBlockTransactionsProvider(this.nisCache(), this.transactionValidatorFactory(), this.blockValidatorFactory(), this.blockTransactionObserverFactory(), this.unconfirmedTransactionsFilter(), this.nisConfiguration().getForkConfiguration());\n        final BlockGenerator generator = new BlockGenerator(this.nisCache(), transactionsProvider, this.blockDao, new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));\n        return new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(), generator);\n    }\n\n    @Bean\n    public SynchronizedAccountCache accountCache() {\n        return new SynchronizedAccountCache(new DefaultAccountCache());\n    }\n\n    @Bean\n    public SynchronizedAccountStateCache accountStateCache() {\n        return new SynchronizedAccountStateCache(new DefaultAccountStateCache());\n    }\n\n    @Bean\n    public SynchronizedHashCache transactionHashCache() {\n        return new SynchronizedHashCache(new DefaultHashCache(50000, this.nisConfiguration().getTransactionHashRetentionTime()));\n    }\n\n    @Bean\n    public SynchronizedPoxFacade poxFacade() {\n        return new SynchronizedPoxFacade(new DefaultPoxFacade(this.importanceCalculator()));\n    }\n\n    @Bean\n    public SynchronizedNamespaceCache namespaceCache() {\n        final BlockHeight mosaicRedefinitionForkHeight = this.nisConfiguration().getForkConfiguration().getMosaicRedefinitionForkHeight();\n        NemNamespaceEntry.setDefault(mosaicRedefinitionForkHeight);\n        return new SynchronizedNamespaceCache(new DefaultNamespaceCache(mosaicRedefinitionForkHeight));\n    }\n\n    @Bean\n    public ReadOnlyNisCache nisCache() {\n        return new DefaultNisCache(this.accountCache(), this.accountStateCache(), this.poxFacade(), this.transactionHashCache(), this.namespaceCache());\n    }\n\n    @Bean\n    @SuppressWarnings(\"serial\")\n    public ImportanceCalculator importanceCalculator() {\n        final Map<BlockChainFeature, Supplier<ImportanceCalculator>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<ImportanceCalculator>>() {\n            {\n                this.put(BlockChainFeature.PROOF_OF_IMPORTANCE, () -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));\n                this.put(BlockChainFeature.PROOF_OF_STAKE, PosImportanceCalculator::new);\n            }\n        };\n        return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), \"consensus algorithm\", featureSupplierMap);\n    }\n\n    @Bean\n    public UnlockedAccounts unlockedAccounts() {\n        return new UnlockedAccounts(this.accountCache(), this.accountStateCache(), this.blockChainLastBlockLayer, this.canHarvestPredicate(), this.nisConfiguration().getUnlockedLimit());\n    }\n\n    @Bean\n    public CanHarvestPredicate canHarvestPredicate() {\n        return new CanHarvestPredicate(this::getBlockDependentMinHarvesterBalance);\n    }\n\n    private Amount getBlockDependentMinHarvesterBalance(final BlockHeight height) {\n        return getBlockDependentPoiOptions(height).getMinHarvesterBalance();\n    }\n\n    private static PoiOptions getBlockDependentPoiOptions(final BlockHeight height) {\n        return new PoiOptionsBuilder(height).create();\n    }\n\n    @Bean\n    public Supplier<BlockHeight> lastBlockHeight() {\n        return this.blockChainLastBlockLayer::getLastBlockHeight;\n    }\n\n    @Bean\n    public UnconfirmedTransactions unconfirmedTransactions() {\n        final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();\n        final UnconfirmedStateFactory unconfirmedStateFactory = new UnconfirmedStateFactory(this.transactionValidatorFactory(), this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(), blockChainConfiguration.getMaxTransactionsPerBlock(), this.nisConfiguration().getForkConfiguration());\n        final UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory, this.nisCache());\n        return new SynchronizedUnconfirmedTransactions(unconfirmedTransactions);\n    }\n\n    @Bean\n    public UnconfirmedTransactionsFilter unconfirmedTransactionsFilter() {\n        return this.unconfirmedTransactions().asFilter();\n    }\n\n    @Bean\n    public HibernateTransactionManager transactionManager() throws IOException {\n        return new HibernateTransactionManager(this.sessionFactory());\n    }\n\n    @Bean\n    public NisMain nisMain() {\n        final NisConfiguration nisConfiguration = this.nisConfiguration();\n        NetworkInfos.setDefault(nisConfiguration.getNetworkInfo());\n        final NamespaceCacheLookupAdapters adapters = new NamespaceCacheLookupAdapters(this.namespaceCache());\n        if (nisConfiguration.ignoreFees()) {\n            NemGlobals.setTransactionFeeCalculator(new ZeroTransactionFeeCalculator());\n        } else {\n            NemGlobals.setTransactionFeeCalculator(new DefaultTransactionFeeCalculator(adapters.asMosaicFeeInformationLookup(), () -> this.blockChainLastBlockLayer.getLastBlockHeight().next(), new BlockHeight[]{ nisConfiguration.getForkConfiguration().getFeeFork().getFirstHeight(), nisConfiguration.getForkConfiguration().getFeeFork().getSecondHeight() }));\n        }\n        NemGlobals.setBlockChainConfiguration(nisConfiguration.getBlockChainConfiguration());\n        NemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());\n        return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(), nisConfiguration, this.blockAnalyzer(), System::exit);\n    }\n\n    @SuppressWarnings(\"serial\")\n    private Supplier<WeightedBalances> weighedBalancesSupplier() {\n        final Map<BlockChainFeature, Supplier<Supplier<WeightedBalances>>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<Supplier<WeightedBalances>>>() {\n            {\n                this.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);\n                this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);\n            }\n        };\n        return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), \"weighted balance scheme\", featureSupplierMap);\n    }\n\n    @Bean\n    public BlockAnalyzer blockAnalyzer() {\n        final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();\n        final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();\n        return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(), estimatedBlocksPerYear, forkConfiguration);\n    }\n\n    @Bean\n    public HttpConnectorPool httpConnectorPool() {\n        final CommunicationMode communicationMode = (this.nisConfiguration().useBinaryTransport()) ? CommunicationMode.BINARY : CommunicationMode.JSON;\n        return new HttpConnectorPool(communicationMode, this.outgoingAudits());\n    }\n\n    @Bean\n    public NisPeerNetworkHost nisPeerNetworkHost() {\n        final HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());\n        final PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);\n        final CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());\n        return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(), this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());\n    }\n\n    @Bean\n    public NetworkHostBootstrapper networkHostBootstrapper() {\n        return new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());\n    }\n\n    @Bean\n    public org.nem.specific.deploy.appconfig.NisConfiguration nisConfiguration() {\n        return new NisConfiguration();\n    }\n\n    @Bean\n    public TimeProvider timeProvider() {\n        return CommonStarter.TIME_PROVIDER;\n    }\n\n    @Bean\n    public TrustProvider trustProvider() {\n        final int LOW_COMMUNICATION_NODE_WEIGHT = 30;\n        final int TRUST_CACHE_TIME = 15 * 60;\n        return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME, this.timeProvider());\n    }\n\n    @Bean\n    public NemConfigurationPolicy configurationPolicy() {\n        return new NisConfigurationPolicy();\n    }\n\n    @Bean\n    public ChainServices chainServices() {\n        return new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());\n    }\n\n    @Bean\n    public org.nem.specific.deploy.appconfig.CommonStarter commonStarter() {\n        return CommonStarter.INSTANCE;\n    }\n\n    @Bean\n    public ValidationState validationState() {\n        return NisCacheUtils.createValidationState(this.nisCache());\n    }\n\n    @Bean\n    public LocalHostDetector localHostDetector() {\n        return new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());\n    }\n\n    @Bean\n    public NodeCompatibilityChecker nodeCompatibilityChecker() {\n        return new DefaultNodeCompatibilityChecker();\n    }\n\n    @Bean\n    public EnumSet<ObserverOption> observerOptions() {\n        final EnumSet<ObserverOption> observerOptions = EnumSet.noneOf(org.nem.specific.deploy.appconfig.ObserverOption.class);\n        if (this.nisConfiguration().isFeatureSupported(NodeFeature.HISTORICAL_ACCOUNT_DATA)) {\n            observerOptions.add(ObserverOption.NoHistoricalDataPruning);\n        }\n        final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();\n        if (blockChainConfiguration.isBlockChainFeatureSupported(BlockChainFeature.PROOF_OF_STAKE)) {\n            observerOptions.add(ObserverOption.NoOutlinkObserver);\n        }\n        return observerOptions;\n    }\n\n    @Bean\n    public Function<Address, Collection<Address>> cosignatoryLookup() {\n        return a -> this.accountStateCache().findStateByAddress(a).getMultisigLinks().getCosignatories();\n    }\n\n    @Bean\n    public MosaicIdCache mosaicIdCache() {\n        return new SynchronizedMosaicIdCache(new DefaultMosaicIdCache());\n    }\n}\n",
    "project": "nem",
    "libraryName": "flyway-core",
    "libraryGroupID": "org.flywaydb",
    "newVersion": "9.17.0",
    "previousVersion": "3.2.1",
    "breakingCommit": "af6e5d1cc94f031f29b4838e7a8b56704c8c5de4"
}